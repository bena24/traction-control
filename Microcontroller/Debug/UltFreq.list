
UltFreq.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009908  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004cc  08009ad8  08009ad8  00019ad8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009fa4  08009fa4  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08009fa4  08009fa4  00019fa4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009fac  08009fac  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009fac  08009fac  00019fac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009fb0  08009fb0  00019fb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08009fb4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002a8  200001dc  0800a190  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000484  0800a190  00020484  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001456c  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000281b  00000000  00000000  00034778  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001298  00000000  00000000  00036f98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011b8  00000000  00000000  00038230  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024d65  00000000  00000000  000393e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000169c1  00000000  00000000  0005e14d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e2983  00000000  00000000  00074b0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00157491  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006038  00000000  00000000  001574e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001dc 	.word	0x200001dc
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08009ac0 	.word	0x08009ac0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e0 	.word	0x200001e0
 800020c:	08009ac0 	.word	0x08009ac0

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b974 	b.w	8000ee8 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	4604      	mov	r4, r0
 8000c20:	468e      	mov	lr, r1
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d14d      	bne.n	8000cc2 <__udivmoddi4+0xaa>
 8000c26:	428a      	cmp	r2, r1
 8000c28:	4694      	mov	ip, r2
 8000c2a:	d969      	bls.n	8000d00 <__udivmoddi4+0xe8>
 8000c2c:	fab2 f282 	clz	r2, r2
 8000c30:	b152      	cbz	r2, 8000c48 <__udivmoddi4+0x30>
 8000c32:	fa01 f302 	lsl.w	r3, r1, r2
 8000c36:	f1c2 0120 	rsb	r1, r2, #32
 8000c3a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c3e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c42:	ea41 0e03 	orr.w	lr, r1, r3
 8000c46:	4094      	lsls	r4, r2
 8000c48:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c4c:	0c21      	lsrs	r1, r4, #16
 8000c4e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c52:	fa1f f78c 	uxth.w	r7, ip
 8000c56:	fb08 e316 	mls	r3, r8, r6, lr
 8000c5a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c5e:	fb06 f107 	mul.w	r1, r6, r7
 8000c62:	4299      	cmp	r1, r3
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x64>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c6e:	f080 811f 	bcs.w	8000eb0 <__udivmoddi4+0x298>
 8000c72:	4299      	cmp	r1, r3
 8000c74:	f240 811c 	bls.w	8000eb0 <__udivmoddi4+0x298>
 8000c78:	3e02      	subs	r6, #2
 8000c7a:	4463      	add	r3, ip
 8000c7c:	1a5b      	subs	r3, r3, r1
 8000c7e:	b2a4      	uxth	r4, r4
 8000c80:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c84:	fb08 3310 	mls	r3, r8, r0, r3
 8000c88:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c8c:	fb00 f707 	mul.w	r7, r0, r7
 8000c90:	42a7      	cmp	r7, r4
 8000c92:	d90a      	bls.n	8000caa <__udivmoddi4+0x92>
 8000c94:	eb1c 0404 	adds.w	r4, ip, r4
 8000c98:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c9c:	f080 810a 	bcs.w	8000eb4 <__udivmoddi4+0x29c>
 8000ca0:	42a7      	cmp	r7, r4
 8000ca2:	f240 8107 	bls.w	8000eb4 <__udivmoddi4+0x29c>
 8000ca6:	4464      	add	r4, ip
 8000ca8:	3802      	subs	r0, #2
 8000caa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cae:	1be4      	subs	r4, r4, r7
 8000cb0:	2600      	movs	r6, #0
 8000cb2:	b11d      	cbz	r5, 8000cbc <__udivmoddi4+0xa4>
 8000cb4:	40d4      	lsrs	r4, r2
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	e9c5 4300 	strd	r4, r3, [r5]
 8000cbc:	4631      	mov	r1, r6
 8000cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	d909      	bls.n	8000cda <__udivmoddi4+0xc2>
 8000cc6:	2d00      	cmp	r5, #0
 8000cc8:	f000 80ef 	beq.w	8000eaa <__udivmoddi4+0x292>
 8000ccc:	2600      	movs	r6, #0
 8000cce:	e9c5 0100 	strd	r0, r1, [r5]
 8000cd2:	4630      	mov	r0, r6
 8000cd4:	4631      	mov	r1, r6
 8000cd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cda:	fab3 f683 	clz	r6, r3
 8000cde:	2e00      	cmp	r6, #0
 8000ce0:	d14a      	bne.n	8000d78 <__udivmoddi4+0x160>
 8000ce2:	428b      	cmp	r3, r1
 8000ce4:	d302      	bcc.n	8000cec <__udivmoddi4+0xd4>
 8000ce6:	4282      	cmp	r2, r0
 8000ce8:	f200 80f9 	bhi.w	8000ede <__udivmoddi4+0x2c6>
 8000cec:	1a84      	subs	r4, r0, r2
 8000cee:	eb61 0303 	sbc.w	r3, r1, r3
 8000cf2:	2001      	movs	r0, #1
 8000cf4:	469e      	mov	lr, r3
 8000cf6:	2d00      	cmp	r5, #0
 8000cf8:	d0e0      	beq.n	8000cbc <__udivmoddi4+0xa4>
 8000cfa:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cfe:	e7dd      	b.n	8000cbc <__udivmoddi4+0xa4>
 8000d00:	b902      	cbnz	r2, 8000d04 <__udivmoddi4+0xec>
 8000d02:	deff      	udf	#255	; 0xff
 8000d04:	fab2 f282 	clz	r2, r2
 8000d08:	2a00      	cmp	r2, #0
 8000d0a:	f040 8092 	bne.w	8000e32 <__udivmoddi4+0x21a>
 8000d0e:	eba1 010c 	sub.w	r1, r1, ip
 8000d12:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d16:	fa1f fe8c 	uxth.w	lr, ip
 8000d1a:	2601      	movs	r6, #1
 8000d1c:	0c20      	lsrs	r0, r4, #16
 8000d1e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d22:	fb07 1113 	mls	r1, r7, r3, r1
 8000d26:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d2a:	fb0e f003 	mul.w	r0, lr, r3
 8000d2e:	4288      	cmp	r0, r1
 8000d30:	d908      	bls.n	8000d44 <__udivmoddi4+0x12c>
 8000d32:	eb1c 0101 	adds.w	r1, ip, r1
 8000d36:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d3a:	d202      	bcs.n	8000d42 <__udivmoddi4+0x12a>
 8000d3c:	4288      	cmp	r0, r1
 8000d3e:	f200 80cb 	bhi.w	8000ed8 <__udivmoddi4+0x2c0>
 8000d42:	4643      	mov	r3, r8
 8000d44:	1a09      	subs	r1, r1, r0
 8000d46:	b2a4      	uxth	r4, r4
 8000d48:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d4c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d50:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d54:	fb0e fe00 	mul.w	lr, lr, r0
 8000d58:	45a6      	cmp	lr, r4
 8000d5a:	d908      	bls.n	8000d6e <__udivmoddi4+0x156>
 8000d5c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d60:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d64:	d202      	bcs.n	8000d6c <__udivmoddi4+0x154>
 8000d66:	45a6      	cmp	lr, r4
 8000d68:	f200 80bb 	bhi.w	8000ee2 <__udivmoddi4+0x2ca>
 8000d6c:	4608      	mov	r0, r1
 8000d6e:	eba4 040e 	sub.w	r4, r4, lr
 8000d72:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d76:	e79c      	b.n	8000cb2 <__udivmoddi4+0x9a>
 8000d78:	f1c6 0720 	rsb	r7, r6, #32
 8000d7c:	40b3      	lsls	r3, r6
 8000d7e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d82:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d86:	fa20 f407 	lsr.w	r4, r0, r7
 8000d8a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d8e:	431c      	orrs	r4, r3
 8000d90:	40f9      	lsrs	r1, r7
 8000d92:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d96:	fa00 f306 	lsl.w	r3, r0, r6
 8000d9a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d9e:	0c20      	lsrs	r0, r4, #16
 8000da0:	fa1f fe8c 	uxth.w	lr, ip
 8000da4:	fb09 1118 	mls	r1, r9, r8, r1
 8000da8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dac:	fb08 f00e 	mul.w	r0, r8, lr
 8000db0:	4288      	cmp	r0, r1
 8000db2:	fa02 f206 	lsl.w	r2, r2, r6
 8000db6:	d90b      	bls.n	8000dd0 <__udivmoddi4+0x1b8>
 8000db8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dbc:	f108 3aff 	add.w	sl, r8, #4294967295
 8000dc0:	f080 8088 	bcs.w	8000ed4 <__udivmoddi4+0x2bc>
 8000dc4:	4288      	cmp	r0, r1
 8000dc6:	f240 8085 	bls.w	8000ed4 <__udivmoddi4+0x2bc>
 8000dca:	f1a8 0802 	sub.w	r8, r8, #2
 8000dce:	4461      	add	r1, ip
 8000dd0:	1a09      	subs	r1, r1, r0
 8000dd2:	b2a4      	uxth	r4, r4
 8000dd4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000dd8:	fb09 1110 	mls	r1, r9, r0, r1
 8000ddc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000de0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000de4:	458e      	cmp	lr, r1
 8000de6:	d908      	bls.n	8000dfa <__udivmoddi4+0x1e2>
 8000de8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dec:	f100 34ff 	add.w	r4, r0, #4294967295
 8000df0:	d26c      	bcs.n	8000ecc <__udivmoddi4+0x2b4>
 8000df2:	458e      	cmp	lr, r1
 8000df4:	d96a      	bls.n	8000ecc <__udivmoddi4+0x2b4>
 8000df6:	3802      	subs	r0, #2
 8000df8:	4461      	add	r1, ip
 8000dfa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dfe:	fba0 9402 	umull	r9, r4, r0, r2
 8000e02:	eba1 010e 	sub.w	r1, r1, lr
 8000e06:	42a1      	cmp	r1, r4
 8000e08:	46c8      	mov	r8, r9
 8000e0a:	46a6      	mov	lr, r4
 8000e0c:	d356      	bcc.n	8000ebc <__udivmoddi4+0x2a4>
 8000e0e:	d053      	beq.n	8000eb8 <__udivmoddi4+0x2a0>
 8000e10:	b15d      	cbz	r5, 8000e2a <__udivmoddi4+0x212>
 8000e12:	ebb3 0208 	subs.w	r2, r3, r8
 8000e16:	eb61 010e 	sbc.w	r1, r1, lr
 8000e1a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e1e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e22:	40f1      	lsrs	r1, r6
 8000e24:	431f      	orrs	r7, r3
 8000e26:	e9c5 7100 	strd	r7, r1, [r5]
 8000e2a:	2600      	movs	r6, #0
 8000e2c:	4631      	mov	r1, r6
 8000e2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e32:	f1c2 0320 	rsb	r3, r2, #32
 8000e36:	40d8      	lsrs	r0, r3
 8000e38:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e3c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e40:	4091      	lsls	r1, r2
 8000e42:	4301      	orrs	r1, r0
 8000e44:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e48:	fa1f fe8c 	uxth.w	lr, ip
 8000e4c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e50:	fb07 3610 	mls	r6, r7, r0, r3
 8000e54:	0c0b      	lsrs	r3, r1, #16
 8000e56:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e5a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e5e:	429e      	cmp	r6, r3
 8000e60:	fa04 f402 	lsl.w	r4, r4, r2
 8000e64:	d908      	bls.n	8000e78 <__udivmoddi4+0x260>
 8000e66:	eb1c 0303 	adds.w	r3, ip, r3
 8000e6a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e6e:	d22f      	bcs.n	8000ed0 <__udivmoddi4+0x2b8>
 8000e70:	429e      	cmp	r6, r3
 8000e72:	d92d      	bls.n	8000ed0 <__udivmoddi4+0x2b8>
 8000e74:	3802      	subs	r0, #2
 8000e76:	4463      	add	r3, ip
 8000e78:	1b9b      	subs	r3, r3, r6
 8000e7a:	b289      	uxth	r1, r1
 8000e7c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e80:	fb07 3316 	mls	r3, r7, r6, r3
 8000e84:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e88:	fb06 f30e 	mul.w	r3, r6, lr
 8000e8c:	428b      	cmp	r3, r1
 8000e8e:	d908      	bls.n	8000ea2 <__udivmoddi4+0x28a>
 8000e90:	eb1c 0101 	adds.w	r1, ip, r1
 8000e94:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e98:	d216      	bcs.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e9a:	428b      	cmp	r3, r1
 8000e9c:	d914      	bls.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e9e:	3e02      	subs	r6, #2
 8000ea0:	4461      	add	r1, ip
 8000ea2:	1ac9      	subs	r1, r1, r3
 8000ea4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ea8:	e738      	b.n	8000d1c <__udivmoddi4+0x104>
 8000eaa:	462e      	mov	r6, r5
 8000eac:	4628      	mov	r0, r5
 8000eae:	e705      	b.n	8000cbc <__udivmoddi4+0xa4>
 8000eb0:	4606      	mov	r6, r0
 8000eb2:	e6e3      	b.n	8000c7c <__udivmoddi4+0x64>
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	e6f8      	b.n	8000caa <__udivmoddi4+0x92>
 8000eb8:	454b      	cmp	r3, r9
 8000eba:	d2a9      	bcs.n	8000e10 <__udivmoddi4+0x1f8>
 8000ebc:	ebb9 0802 	subs.w	r8, r9, r2
 8000ec0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ec4:	3801      	subs	r0, #1
 8000ec6:	e7a3      	b.n	8000e10 <__udivmoddi4+0x1f8>
 8000ec8:	4646      	mov	r6, r8
 8000eca:	e7ea      	b.n	8000ea2 <__udivmoddi4+0x28a>
 8000ecc:	4620      	mov	r0, r4
 8000ece:	e794      	b.n	8000dfa <__udivmoddi4+0x1e2>
 8000ed0:	4640      	mov	r0, r8
 8000ed2:	e7d1      	b.n	8000e78 <__udivmoddi4+0x260>
 8000ed4:	46d0      	mov	r8, sl
 8000ed6:	e77b      	b.n	8000dd0 <__udivmoddi4+0x1b8>
 8000ed8:	3b02      	subs	r3, #2
 8000eda:	4461      	add	r1, ip
 8000edc:	e732      	b.n	8000d44 <__udivmoddi4+0x12c>
 8000ede:	4630      	mov	r0, r6
 8000ee0:	e709      	b.n	8000cf6 <__udivmoddi4+0xde>
 8000ee2:	4464      	add	r4, ip
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	e742      	b.n	8000d6e <__udivmoddi4+0x156>

08000ee8 <__aeabi_idiv0>:
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop

08000eec <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000eec:	b5b0      	push	{r4, r5, r7, lr}
 8000eee:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000ef0:	f001 f89c 	bl	800202c <HAL_Init>
	/* USER CODE BEGIN Init */
	//dMX_I2C1_Init();
	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000ef4:	f000 f886 	bl	8001004 <SystemClock_Config>

	/* USER CODE BEGIN SysInit */
	MX_GPIO_Init();
 8000ef8:	f000 fb44 	bl	8001584 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 8000efc:	f000 fb18 	bl	8001530 <MX_USART2_UART_Init>
	//htim3.Channel = HAL_TIM_ACTIVE_CHANNEL_1;
	//htim2.Channel = HAL_TIM_ACTIVE_CHANNEL_1;
	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000f00:	f000 fb40 	bl	8001584 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 8000f04:	f000 fb14 	bl	8001530 <MX_USART2_UART_Init>
	MX_TIM2_Init();
 8000f08:	f000 fa44 	bl	8001394 <MX_TIM2_Init>
	MX_DAC_Init();
 8000f0c:	f000 f9ea 	bl	80012e4 <MX_DAC_Init>
	MX_ADC1_Init();
 8000f10:	f000 f8f2 	bl	80010f8 <MX_ADC1_Init>
	MX_TIM5_Init();
 8000f14:	f000 fa9c 	bl	8001450 <MX_TIM5_Init>
	MX_I2C1_Init();
 8000f18:	f000 fa0e 	bl	8001338 <MX_I2C1_Init>
	MX_ADC2_Init();
 8000f1c:	f000 f93e 	bl	800119c <MX_ADC2_Init>
	MX_ADC3_Init();
 8000f20:	f000 f98e 	bl	8001240 <MX_ADC3_Init>
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	//uint32_t var = 0;
	//uint32_t var = (uint32_t)(val*4096)/3.3;
	//htim13.Channel = HAL_TIM_ACTIVE_CHANNEL_1;
	htim5.Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8000f24:	4b2c      	ldr	r3, [pc, #176]	; (8000fd8 <main+0xec>)
 8000f26:	2202      	movs	r2, #2
 8000f28:	771a      	strb	r2, [r3, #28]
	//htim2.Channel = HAL_TIM_ACTIVE_CHANNEL_1;
	//HAL_TIM_IC_Start_IT(&htim13, TIM_CHANNEL_1);
	HAL_TIM_IC_Start_IT(&htim5, TIM_CHANNEL_2);
 8000f2a:	2104      	movs	r1, #4
 8000f2c:	482a      	ldr	r0, [pc, #168]	; (8000fd8 <main+0xec>)
 8000f2e:	f004 fd89 	bl	8005a44 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 8000f32:	2100      	movs	r1, #0
 8000f34:	4829      	ldr	r0, [pc, #164]	; (8000fdc <main+0xf0>)
 8000f36:	f004 fd85 	bl	8005a44 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_3);
 8000f3a:	2108      	movs	r1, #8
 8000f3c:	4827      	ldr	r0, [pc, #156]	; (8000fdc <main+0xf0>)
 8000f3e:	f004 fd81 	bl	8005a44 <HAL_TIM_IC_Start_IT>
	HAL_ADC_Start(&hadc1);
 8000f42:	4827      	ldr	r0, [pc, #156]	; (8000fe0 <main+0xf4>)
 8000f44:	f001 f928 	bl	8002198 <HAL_ADC_Start>
	//HAL_TIM_PWM_Start(&htim11, TIM_CHANNEL_1);
	//Trac_Control_Init(&tc1);
	HAL_DAC_Start(&hdac, 1);
 8000f48:	2101      	movs	r1, #1
 8000f4a:	4826      	ldr	r0, [pc, #152]	; (8000fe4 <main+0xf8>)
 8000f4c:	f001 fd57 	bl	80029fe <HAL_DAC_Start>
	HAL_I2C_EnableListen_IT(&hi2c1);
 8000f50:	4825      	ldr	r0, [pc, #148]	; (8000fe8 <main+0xfc>)
 8000f52:	f002 f9e3 	bl	800331c <HAL_I2C_EnableListen_IT>
		//value = HAL_ADC_GetValue(&hadc1);
		//printf("%lu\n\r", value);
		//HAL_Delay(100);
		//HAL_ADC_Stop(&hadc1);
		//HAL_TIM_IC_CaptureCallback(&htim13);
		htim2.Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8000f56:	4b21      	ldr	r3, [pc, #132]	; (8000fdc <main+0xf0>)
 8000f58:	2201      	movs	r2, #1
 8000f5a:	771a      	strb	r2, [r3, #28]
		//HAL_TIM_IC_CaptureCallback(&htim2);
		htim2.Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8000f5c:	4b1f      	ldr	r3, [pc, #124]	; (8000fdc <main+0xf0>)
 8000f5e:	2204      	movs	r2, #4
 8000f60:	771a      	strb	r2, [r3, #28]
		//HAL_TIM_IC_CaptureCallback(&htim2);
		//HAL_TIM_IC_CaptureCallback(&htim5);
		//HAL_TIM_IC_CaptureCallback(&htim3);
		//HAL_TIM_ReadCapturedValue(&htim2, TIM_CHANNEL_1);
		//printf("Value = %lu", IC_Value1);
		if (tim1.CalculationOK == 1)
 8000f62:	4b22      	ldr	r3, [pc, #136]	; (8000fec <main+0x100>)
 8000f64:	695b      	ldr	r3, [r3, #20]
 8000f66:	2b01      	cmp	r3, #1
 8000f68:	d10b      	bne.n	8000f82 <main+0x96>
			printf(
 8000f6a:	4b20      	ldr	r3, [pc, #128]	; (8000fec <main+0x100>)
 8000f6c:	68dc      	ldr	r4, [r3, #12]
 8000f6e:	4b1f      	ldr	r3, [pc, #124]	; (8000fec <main+0x100>)
 8000f70:	691d      	ldr	r5, [r3, #16]
 8000f72:	f004 f859 	bl	8005028 <HAL_RCC_GetPCLK1Freq>
 8000f76:	4603      	mov	r3, r0
 8000f78:	462a      	mov	r2, r5
 8000f7a:	4621      	mov	r1, r4
 8000f7c:	481c      	ldr	r0, [pc, #112]	; (8000ff0 <main+0x104>)
 8000f7e:	f006 fcd9 	bl	8007934 <iprintf>
					" TIM2: Period = %lu ---- Frequency = %lu ---- PCLK1 frequency %lu \n\r",
					tim1.Difference, tim1.Frequency, HAL_RCC_GetPCLK1Freq());
		if (tim2.CalculationOK == 1) {
 8000f82:	4b1c      	ldr	r3, [pc, #112]	; (8000ff4 <main+0x108>)
 8000f84:	695b      	ldr	r3, [r3, #20]
 8000f86:	2b01      	cmp	r3, #1
 8000f88:	d10b      	bne.n	8000fa2 <main+0xb6>
			printf(
 8000f8a:	4b1a      	ldr	r3, [pc, #104]	; (8000ff4 <main+0x108>)
 8000f8c:	68dc      	ldr	r4, [r3, #12]
 8000f8e:	4b19      	ldr	r3, [pc, #100]	; (8000ff4 <main+0x108>)
 8000f90:	691d      	ldr	r5, [r3, #16]
 8000f92:	f004 f849 	bl	8005028 <HAL_RCC_GetPCLK1Freq>
 8000f96:	4603      	mov	r3, r0
 8000f98:	462a      	mov	r2, r5
 8000f9a:	4621      	mov	r1, r4
 8000f9c:	4816      	ldr	r0, [pc, #88]	; (8000ff8 <main+0x10c>)
 8000f9e:	f006 fcc9 	bl	8007934 <iprintf>
					" TIM5: Period = %lu ---- Frequency = %lu ---- PCLK1 frequency %lu \n\r",
					tim2.Difference, tim2.Frequency, HAL_RCC_GetPCLK1Freq());
		}
		if (tim3.CalculationOK == 1) {
 8000fa2:	4b16      	ldr	r3, [pc, #88]	; (8000ffc <main+0x110>)
 8000fa4:	695b      	ldr	r3, [r3, #20]
 8000fa6:	2b01      	cmp	r3, #1
 8000fa8:	d10b      	bne.n	8000fc2 <main+0xd6>
			printf(
 8000faa:	4b14      	ldr	r3, [pc, #80]	; (8000ffc <main+0x110>)
 8000fac:	68dc      	ldr	r4, [r3, #12]
 8000fae:	4b13      	ldr	r3, [pc, #76]	; (8000ffc <main+0x110>)
 8000fb0:	691d      	ldr	r5, [r3, #16]
 8000fb2:	f004 f839 	bl	8005028 <HAL_RCC_GetPCLK1Freq>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	462a      	mov	r2, r5
 8000fba:	4621      	mov	r1, r4
 8000fbc:	4810      	ldr	r0, [pc, #64]	; (8001000 <main+0x114>)
 8000fbe:	f006 fcb9 	bl	8007934 <iprintf>
					" TIM2 (2): Period = %lu ---- Frequency = %lu ---- PCLK1 frequency %lu \n\r",
					tim3.Difference, tim3.Frequency, HAL_RCC_GetPCLK1Freq());
		}
		tim1.CalculationOK = 0;
 8000fc2:	4b0a      	ldr	r3, [pc, #40]	; (8000fec <main+0x100>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	615a      	str	r2, [r3, #20]
		tim2.CalculationOK = 0;
 8000fc8:	4b0a      	ldr	r3, [pc, #40]	; (8000ff4 <main+0x108>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	615a      	str	r2, [r3, #20]
		tim3.CalculationOK = 0;
 8000fce:	4b0b      	ldr	r3, [pc, #44]	; (8000ffc <main+0x110>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	615a      	str	r2, [r3, #20]
		htim2.Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8000fd4:	e7bf      	b.n	8000f56 <main+0x6a>
 8000fd6:	bf00      	nop
 8000fd8:	20000380 	.word	0x20000380
 8000fdc:	20000338 	.word	0x20000338
 8000fe0:	200001f8 	.word	0x200001f8
 8000fe4:	200002d0 	.word	0x200002d0
 8000fe8:	200002e4 	.word	0x200002e4
 8000fec:	2000040c 	.word	0x2000040c
 8000ff0:	08009ad8 	.word	0x08009ad8
 8000ff4:	20000424 	.word	0x20000424
 8000ff8:	08009b20 	.word	0x08009b20
 8000ffc:	2000043c 	.word	0x2000043c
 8001000:	08009b68 	.word	0x08009b68

08001004 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001004:	b580      	push	{r7, lr}
 8001006:	b094      	sub	sp, #80	; 0x50
 8001008:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800100a:	f107 031c 	add.w	r3, r7, #28
 800100e:	2234      	movs	r2, #52	; 0x34
 8001010:	2100      	movs	r1, #0
 8001012:	4618      	mov	r0, r3
 8001014:	f006 f81c 	bl	8007050 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001018:	f107 0308 	add.w	r3, r7, #8
 800101c:	2200      	movs	r2, #0
 800101e:	601a      	str	r2, [r3, #0]
 8001020:	605a      	str	r2, [r3, #4]
 8001022:	609a      	str	r2, [r3, #8]
 8001024:	60da      	str	r2, [r3, #12]
 8001026:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8001028:	2300      	movs	r3, #0
 800102a:	607b      	str	r3, [r7, #4]
 800102c:	4b30      	ldr	r3, [pc, #192]	; (80010f0 <SystemClock_Config+0xec>)
 800102e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001030:	4a2f      	ldr	r2, [pc, #188]	; (80010f0 <SystemClock_Config+0xec>)
 8001032:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001036:	6413      	str	r3, [r2, #64]	; 0x40
 8001038:	4b2d      	ldr	r3, [pc, #180]	; (80010f0 <SystemClock_Config+0xec>)
 800103a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800103c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001040:	607b      	str	r3, [r7, #4]
 8001042:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001044:	2300      	movs	r3, #0
 8001046:	603b      	str	r3, [r7, #0]
 8001048:	4b2a      	ldr	r3, [pc, #168]	; (80010f4 <SystemClock_Config+0xf0>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4a29      	ldr	r2, [pc, #164]	; (80010f4 <SystemClock_Config+0xf0>)
 800104e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001052:	6013      	str	r3, [r2, #0]
 8001054:	4b27      	ldr	r3, [pc, #156]	; (80010f4 <SystemClock_Config+0xf0>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800105c:	603b      	str	r3, [r7, #0]
 800105e:	683b      	ldr	r3, [r7, #0]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI
 8001060:	2306      	movs	r3, #6
 8001062:	61fb      	str	r3, [r7, #28]
			| RCC_OSCILLATORTYPE_LSE;
	RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001064:	2301      	movs	r3, #1
 8001066:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001068:	2301      	movs	r3, #1
 800106a:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800106c:	2310      	movs	r3, #16
 800106e:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001070:	2302      	movs	r3, #2
 8001072:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001074:	2300      	movs	r3, #0
 8001076:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLM = 8;
 8001078:	2308      	movs	r3, #8
 800107a:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLN = 180;
 800107c:	23b4      	movs	r3, #180	; 0xb4
 800107e:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001080:	2302      	movs	r3, #2
 8001082:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLQ = 2;
 8001084:	2302      	movs	r3, #2
 8001086:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLR = 2;
 8001088:	2302      	movs	r3, #2
 800108a:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800108c:	f107 031c 	add.w	r3, r7, #28
 8001090:	4618      	mov	r0, r3
 8001092:	f004 f99b 	bl	80053cc <HAL_RCC_OscConfig>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d001      	beq.n	80010a0 <SystemClock_Config+0x9c>
		Error_Handler();
 800109c:	f000 fbfe 	bl	800189c <Error_Handler>
	}
	/** Activate the Over-Drive mode
	 */
	if (HAL_PWREx_EnableOverDrive() != HAL_OK) {
 80010a0:	f003 fe18 	bl	8004cd4 <HAL_PWREx_EnableOverDrive>
 80010a4:	4603      	mov	r3, r0
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d001      	beq.n	80010ae <SystemClock_Config+0xaa>
		Error_Handler();
 80010aa:	f000 fbf7 	bl	800189c <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80010ae:	230f      	movs	r3, #15
 80010b0:	60bb      	str	r3, [r7, #8]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010b2:	2302      	movs	r3, #2
 80010b4:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010b6:	2300      	movs	r3, #0
 80010b8:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80010ba:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80010be:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80010c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010c4:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 80010c6:	f107 0308 	add.w	r3, r7, #8
 80010ca:	2105      	movs	r1, #5
 80010cc:	4618      	mov	r0, r3
 80010ce:	f003 fe51 	bl	8004d74 <HAL_RCC_ClockConfig>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d001      	beq.n	80010dc <SystemClock_Config+0xd8>
		Error_Handler();
 80010d8:	f000 fbe0 	bl	800189c <Error_Handler>
	}
	HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_LSE, RCC_MCODIV_1);
 80010dc:	2200      	movs	r2, #0
 80010de:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80010e2:	2000      	movs	r0, #0
 80010e4:	f003 ff2c 	bl	8004f40 <HAL_RCC_MCOConfig>
}
 80010e8:	bf00      	nop
 80010ea:	3750      	adds	r7, #80	; 0x50
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}
 80010f0:	40023800 	.word	0x40023800
 80010f4:	40007000 	.word	0x40007000

080010f8 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b084      	sub	sp, #16
 80010fc:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 80010fe:	463b      	mov	r3, r7
 8001100:	2200      	movs	r2, #0
 8001102:	601a      	str	r2, [r3, #0]
 8001104:	605a      	str	r2, [r3, #4]
 8001106:	609a      	str	r2, [r3, #8]
 8001108:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN ADC1_Init 1 */

	/* USER CODE END ADC1_Init 1 */
	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc1.Instance = ADC1;
 800110a:	4b21      	ldr	r3, [pc, #132]	; (8001190 <MX_ADC1_Init+0x98>)
 800110c:	4a21      	ldr	r2, [pc, #132]	; (8001194 <MX_ADC1_Init+0x9c>)
 800110e:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001110:	4b1f      	ldr	r3, [pc, #124]	; (8001190 <MX_ADC1_Init+0x98>)
 8001112:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001116:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001118:	4b1d      	ldr	r3, [pc, #116]	; (8001190 <MX_ADC1_Init+0x98>)
 800111a:	2200      	movs	r2, #0
 800111c:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = DISABLE;
 800111e:	4b1c      	ldr	r3, [pc, #112]	; (8001190 <MX_ADC1_Init+0x98>)
 8001120:	2200      	movs	r2, #0
 8001122:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = DISABLE;
 8001124:	4b1a      	ldr	r3, [pc, #104]	; (8001190 <MX_ADC1_Init+0x98>)
 8001126:	2200      	movs	r2, #0
 8001128:	761a      	strb	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 800112a:	4b19      	ldr	r3, [pc, #100]	; (8001190 <MX_ADC1_Init+0x98>)
 800112c:	2200      	movs	r2, #0
 800112e:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001132:	4b17      	ldr	r3, [pc, #92]	; (8001190 <MX_ADC1_Init+0x98>)
 8001134:	2200      	movs	r2, #0
 8001136:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001138:	4b15      	ldr	r3, [pc, #84]	; (8001190 <MX_ADC1_Init+0x98>)
 800113a:	4a17      	ldr	r2, [pc, #92]	; (8001198 <MX_ADC1_Init+0xa0>)
 800113c:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800113e:	4b14      	ldr	r3, [pc, #80]	; (8001190 <MX_ADC1_Init+0x98>)
 8001140:	2200      	movs	r2, #0
 8001142:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 1;
 8001144:	4b12      	ldr	r3, [pc, #72]	; (8001190 <MX_ADC1_Init+0x98>)
 8001146:	2201      	movs	r2, #1
 8001148:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = DISABLE;
 800114a:	4b11      	ldr	r3, [pc, #68]	; (8001190 <MX_ADC1_Init+0x98>)
 800114c:	2200      	movs	r2, #0
 800114e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001152:	4b0f      	ldr	r3, [pc, #60]	; (8001190 <MX_ADC1_Init+0x98>)
 8001154:	2201      	movs	r2, #1
 8001156:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8001158:	480d      	ldr	r0, [pc, #52]	; (8001190 <MX_ADC1_Init+0x98>)
 800115a:	f000 ffd9 	bl	8002110 <HAL_ADC_Init>
 800115e:	4603      	mov	r3, r0
 8001160:	2b00      	cmp	r3, #0
 8001162:	d001      	beq.n	8001168 <MX_ADC1_Init+0x70>
		Error_Handler();
 8001164:	f000 fb9a 	bl	800189c <Error_Handler>
	}
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_10;
 8001168:	230a      	movs	r3, #10
 800116a:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 800116c:	2301      	movs	r3, #1
 800116e:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001170:	2300      	movs	r3, #0
 8001172:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001174:	463b      	mov	r3, r7
 8001176:	4619      	mov	r1, r3
 8001178:	4805      	ldr	r0, [pc, #20]	; (8001190 <MX_ADC1_Init+0x98>)
 800117a:	f001 f8df 	bl	800233c <HAL_ADC_ConfigChannel>
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	d001      	beq.n	8001188 <MX_ADC1_Init+0x90>
		Error_Handler();
 8001184:	f000 fb8a 	bl	800189c <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8001188:	bf00      	nop
 800118a:	3710      	adds	r7, #16
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}
 8001190:	200001f8 	.word	0x200001f8
 8001194:	40012000 	.word	0x40012000
 8001198:	0f000001 	.word	0x0f000001

0800119c <MX_ADC2_Init>:
/**
 * @brief ADC2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC2_Init(void) {
 800119c:	b580      	push	{r7, lr}
 800119e:	b084      	sub	sp, #16
 80011a0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC2_Init 0 */

	/* USER CODE END ADC2_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 80011a2:	463b      	mov	r3, r7
 80011a4:	2200      	movs	r2, #0
 80011a6:	601a      	str	r2, [r3, #0]
 80011a8:	605a      	str	r2, [r3, #4]
 80011aa:	609a      	str	r2, [r3, #8]
 80011ac:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN ADC2_Init 1 */

	/* USER CODE END ADC2_Init 1 */
	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc2.Instance = ADC2;
 80011ae:	4b21      	ldr	r3, [pc, #132]	; (8001234 <MX_ADC2_Init+0x98>)
 80011b0:	4a21      	ldr	r2, [pc, #132]	; (8001238 <MX_ADC2_Init+0x9c>)
 80011b2:	601a      	str	r2, [r3, #0]
	hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80011b4:	4b1f      	ldr	r3, [pc, #124]	; (8001234 <MX_ADC2_Init+0x98>)
 80011b6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80011ba:	605a      	str	r2, [r3, #4]
	hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80011bc:	4b1d      	ldr	r3, [pc, #116]	; (8001234 <MX_ADC2_Init+0x98>)
 80011be:	2200      	movs	r2, #0
 80011c0:	609a      	str	r2, [r3, #8]
	hadc2.Init.ScanConvMode = DISABLE;
 80011c2:	4b1c      	ldr	r3, [pc, #112]	; (8001234 <MX_ADC2_Init+0x98>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	611a      	str	r2, [r3, #16]
	hadc2.Init.ContinuousConvMode = DISABLE;
 80011c8:	4b1a      	ldr	r3, [pc, #104]	; (8001234 <MX_ADC2_Init+0x98>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	761a      	strb	r2, [r3, #24]
	hadc2.Init.DiscontinuousConvMode = DISABLE;
 80011ce:	4b19      	ldr	r3, [pc, #100]	; (8001234 <MX_ADC2_Init+0x98>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	f883 2020 	strb.w	r2, [r3, #32]
	hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80011d6:	4b17      	ldr	r3, [pc, #92]	; (8001234 <MX_ADC2_Init+0x98>)
 80011d8:	2200      	movs	r2, #0
 80011da:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011dc:	4b15      	ldr	r3, [pc, #84]	; (8001234 <MX_ADC2_Init+0x98>)
 80011de:	4a17      	ldr	r2, [pc, #92]	; (800123c <MX_ADC2_Init+0xa0>)
 80011e0:	629a      	str	r2, [r3, #40]	; 0x28
	hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80011e2:	4b14      	ldr	r3, [pc, #80]	; (8001234 <MX_ADC2_Init+0x98>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	60da      	str	r2, [r3, #12]
	hadc2.Init.NbrOfConversion = 1;
 80011e8:	4b12      	ldr	r3, [pc, #72]	; (8001234 <MX_ADC2_Init+0x98>)
 80011ea:	2201      	movs	r2, #1
 80011ec:	61da      	str	r2, [r3, #28]
	hadc2.Init.DMAContinuousRequests = DISABLE;
 80011ee:	4b11      	ldr	r3, [pc, #68]	; (8001234 <MX_ADC2_Init+0x98>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80011f6:	4b0f      	ldr	r3, [pc, #60]	; (8001234 <MX_ADC2_Init+0x98>)
 80011f8:	2201      	movs	r2, #1
 80011fa:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc2) != HAL_OK) {
 80011fc:	480d      	ldr	r0, [pc, #52]	; (8001234 <MX_ADC2_Init+0x98>)
 80011fe:	f000 ff87 	bl	8002110 <HAL_ADC_Init>
 8001202:	4603      	mov	r3, r0
 8001204:	2b00      	cmp	r3, #0
 8001206:	d001      	beq.n	800120c <MX_ADC2_Init+0x70>
		Error_Handler();
 8001208:	f000 fb48 	bl	800189c <Error_Handler>
	}
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_11;
 800120c:	230b      	movs	r3, #11
 800120e:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 8001210:	2301      	movs	r3, #1
 8001212:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001214:	2300      	movs	r3, #0
 8001216:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK) {
 8001218:	463b      	mov	r3, r7
 800121a:	4619      	mov	r1, r3
 800121c:	4805      	ldr	r0, [pc, #20]	; (8001234 <MX_ADC2_Init+0x98>)
 800121e:	f001 f88d 	bl	800233c <HAL_ADC_ConfigChannel>
 8001222:	4603      	mov	r3, r0
 8001224:	2b00      	cmp	r3, #0
 8001226:	d001      	beq.n	800122c <MX_ADC2_Init+0x90>
		Error_Handler();
 8001228:	f000 fb38 	bl	800189c <Error_Handler>
	}
	/* USER CODE BEGIN ADC2_Init 2 */

	/* USER CODE END ADC2_Init 2 */

}
 800122c:	bf00      	nop
 800122e:	3710      	adds	r7, #16
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}
 8001234:	20000240 	.word	0x20000240
 8001238:	40012100 	.word	0x40012100
 800123c:	0f000001 	.word	0x0f000001

08001240 <MX_ADC3_Init>:
/**
 * @brief ADC3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC3_Init(void) {
 8001240:	b580      	push	{r7, lr}
 8001242:	b084      	sub	sp, #16
 8001244:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC3_Init 0 */

	/* USER CODE END ADC3_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 8001246:	463b      	mov	r3, r7
 8001248:	2200      	movs	r2, #0
 800124a:	601a      	str	r2, [r3, #0]
 800124c:	605a      	str	r2, [r3, #4]
 800124e:	609a      	str	r2, [r3, #8]
 8001250:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN ADC3_Init 1 */

	/* USER CODE END ADC3_Init 1 */
	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc3.Instance = ADC3;
 8001252:	4b21      	ldr	r3, [pc, #132]	; (80012d8 <MX_ADC3_Init+0x98>)
 8001254:	4a21      	ldr	r2, [pc, #132]	; (80012dc <MX_ADC3_Init+0x9c>)
 8001256:	601a      	str	r2, [r3, #0]
	hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001258:	4b1f      	ldr	r3, [pc, #124]	; (80012d8 <MX_ADC3_Init+0x98>)
 800125a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800125e:	605a      	str	r2, [r3, #4]
	hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001260:	4b1d      	ldr	r3, [pc, #116]	; (80012d8 <MX_ADC3_Init+0x98>)
 8001262:	2200      	movs	r2, #0
 8001264:	609a      	str	r2, [r3, #8]
	hadc3.Init.ScanConvMode = DISABLE;
 8001266:	4b1c      	ldr	r3, [pc, #112]	; (80012d8 <MX_ADC3_Init+0x98>)
 8001268:	2200      	movs	r2, #0
 800126a:	611a      	str	r2, [r3, #16]
	hadc3.Init.ContinuousConvMode = DISABLE;
 800126c:	4b1a      	ldr	r3, [pc, #104]	; (80012d8 <MX_ADC3_Init+0x98>)
 800126e:	2200      	movs	r2, #0
 8001270:	761a      	strb	r2, [r3, #24]
	hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001272:	4b19      	ldr	r3, [pc, #100]	; (80012d8 <MX_ADC3_Init+0x98>)
 8001274:	2200      	movs	r2, #0
 8001276:	f883 2020 	strb.w	r2, [r3, #32]
	hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800127a:	4b17      	ldr	r3, [pc, #92]	; (80012d8 <MX_ADC3_Init+0x98>)
 800127c:	2200      	movs	r2, #0
 800127e:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001280:	4b15      	ldr	r3, [pc, #84]	; (80012d8 <MX_ADC3_Init+0x98>)
 8001282:	4a17      	ldr	r2, [pc, #92]	; (80012e0 <MX_ADC3_Init+0xa0>)
 8001284:	629a      	str	r2, [r3, #40]	; 0x28
	hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001286:	4b14      	ldr	r3, [pc, #80]	; (80012d8 <MX_ADC3_Init+0x98>)
 8001288:	2200      	movs	r2, #0
 800128a:	60da      	str	r2, [r3, #12]
	hadc3.Init.NbrOfConversion = 1;
 800128c:	4b12      	ldr	r3, [pc, #72]	; (80012d8 <MX_ADC3_Init+0x98>)
 800128e:	2201      	movs	r2, #1
 8001290:	61da      	str	r2, [r3, #28]
	hadc3.Init.DMAContinuousRequests = DISABLE;
 8001292:	4b11      	ldr	r3, [pc, #68]	; (80012d8 <MX_ADC3_Init+0x98>)
 8001294:	2200      	movs	r2, #0
 8001296:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800129a:	4b0f      	ldr	r3, [pc, #60]	; (80012d8 <MX_ADC3_Init+0x98>)
 800129c:	2201      	movs	r2, #1
 800129e:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc3) != HAL_OK) {
 80012a0:	480d      	ldr	r0, [pc, #52]	; (80012d8 <MX_ADC3_Init+0x98>)
 80012a2:	f000 ff35 	bl	8002110 <HAL_ADC_Init>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d001      	beq.n	80012b0 <MX_ADC3_Init+0x70>
		Error_Handler();
 80012ac:	f000 faf6 	bl	800189c <Error_Handler>
	}
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_12;
 80012b0:	230c      	movs	r3, #12
 80012b2:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 80012b4:	2301      	movs	r3, #1
 80012b6:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80012b8:	2300      	movs	r3, #0
 80012ba:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK) {
 80012bc:	463b      	mov	r3, r7
 80012be:	4619      	mov	r1, r3
 80012c0:	4805      	ldr	r0, [pc, #20]	; (80012d8 <MX_ADC3_Init+0x98>)
 80012c2:	f001 f83b 	bl	800233c <HAL_ADC_ConfigChannel>
 80012c6:	4603      	mov	r3, r0
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d001      	beq.n	80012d0 <MX_ADC3_Init+0x90>
		Error_Handler();
 80012cc:	f000 fae6 	bl	800189c <Error_Handler>
	}
	/* USER CODE BEGIN ADC3_Init 2 */

	/* USER CODE END ADC3_Init 2 */

}
 80012d0:	bf00      	nop
 80012d2:	3710      	adds	r7, #16
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	20000288 	.word	0x20000288
 80012dc:	40012200 	.word	0x40012200
 80012e0:	0f000001 	.word	0x0f000001

080012e4 <MX_DAC_Init>:
/**
 * @brief DAC Initialization Function
 * @param None
 * @retval None
 */
static void MX_DAC_Init(void) {
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b082      	sub	sp, #8
 80012e8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN DAC_Init 0 */

	/* USER CODE END DAC_Init 0 */

	DAC_ChannelConfTypeDef sConfig = { 0 };
 80012ea:	463b      	mov	r3, r7
 80012ec:	2200      	movs	r2, #0
 80012ee:	601a      	str	r2, [r3, #0]
 80012f0:	605a      	str	r2, [r3, #4]
	/* USER CODE BEGIN DAC_Init 1 */

	/* USER CODE END DAC_Init 1 */
	/** DAC Initialization
	 */
	hdac.Instance = DAC;
 80012f2:	4b0f      	ldr	r3, [pc, #60]	; (8001330 <MX_DAC_Init+0x4c>)
 80012f4:	4a0f      	ldr	r2, [pc, #60]	; (8001334 <MX_DAC_Init+0x50>)
 80012f6:	601a      	str	r2, [r3, #0]
	if (HAL_DAC_Init(&hdac) != HAL_OK) {
 80012f8:	480d      	ldr	r0, [pc, #52]	; (8001330 <MX_DAC_Init+0x4c>)
 80012fa:	f001 fb5e 	bl	80029ba <HAL_DAC_Init>
 80012fe:	4603      	mov	r3, r0
 8001300:	2b00      	cmp	r3, #0
 8001302:	d001      	beq.n	8001308 <MX_DAC_Init+0x24>
		Error_Handler();
 8001304:	f000 faca 	bl	800189c <Error_Handler>
	}
	/** DAC channel OUT1 config
	 */
	sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001308:	2300      	movs	r3, #0
 800130a:	603b      	str	r3, [r7, #0]
	sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800130c:	2300      	movs	r3, #0
 800130e:	607b      	str	r3, [r7, #4]
	if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK) {
 8001310:	463b      	mov	r3, r7
 8001312:	2200      	movs	r2, #0
 8001314:	4619      	mov	r1, r3
 8001316:	4806      	ldr	r0, [pc, #24]	; (8001330 <MX_DAC_Init+0x4c>)
 8001318:	f001 fbc3 	bl	8002aa2 <HAL_DAC_ConfigChannel>
 800131c:	4603      	mov	r3, r0
 800131e:	2b00      	cmp	r3, #0
 8001320:	d001      	beq.n	8001326 <MX_DAC_Init+0x42>
		Error_Handler();
 8001322:	f000 fabb 	bl	800189c <Error_Handler>
	}
	/* USER CODE BEGIN DAC_Init 2 */

	/* USER CODE END DAC_Init 2 */

}
 8001326:	bf00      	nop
 8001328:	3708      	adds	r7, #8
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	200002d0 	.word	0x200002d0
 8001334:	40007400 	.word	0x40007400

08001338 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8001338:	b580      	push	{r7, lr}
 800133a:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 800133c:	4b12      	ldr	r3, [pc, #72]	; (8001388 <MX_I2C1_Init+0x50>)
 800133e:	4a13      	ldr	r2, [pc, #76]	; (800138c <MX_I2C1_Init+0x54>)
 8001340:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 8001342:	4b11      	ldr	r3, [pc, #68]	; (8001388 <MX_I2C1_Init+0x50>)
 8001344:	4a12      	ldr	r2, [pc, #72]	; (8001390 <MX_I2C1_Init+0x58>)
 8001346:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001348:	4b0f      	ldr	r3, [pc, #60]	; (8001388 <MX_I2C1_Init+0x50>)
 800134a:	2200      	movs	r2, #0
 800134c:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 210;
 800134e:	4b0e      	ldr	r3, [pc, #56]	; (8001388 <MX_I2C1_Init+0x50>)
 8001350:	22d2      	movs	r2, #210	; 0xd2
 8001352:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001354:	4b0c      	ldr	r3, [pc, #48]	; (8001388 <MX_I2C1_Init+0x50>)
 8001356:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800135a:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800135c:	4b0a      	ldr	r3, [pc, #40]	; (8001388 <MX_I2C1_Init+0x50>)
 800135e:	2200      	movs	r2, #0
 8001360:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 8001362:	4b09      	ldr	r3, [pc, #36]	; (8001388 <MX_I2C1_Init+0x50>)
 8001364:	2200      	movs	r2, #0
 8001366:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001368:	4b07      	ldr	r3, [pc, #28]	; (8001388 <MX_I2C1_Init+0x50>)
 800136a:	2200      	movs	r2, #0
 800136c:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800136e:	4b06      	ldr	r3, [pc, #24]	; (8001388 <MX_I2C1_Init+0x50>)
 8001370:	2200      	movs	r2, #0
 8001372:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8001374:	4804      	ldr	r0, [pc, #16]	; (8001388 <MX_I2C1_Init+0x50>)
 8001376:	f001 fda7 	bl	8002ec8 <HAL_I2C_Init>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d001      	beq.n	8001384 <MX_I2C1_Init+0x4c>
		Error_Handler();
 8001380:	f000 fa8c 	bl	800189c <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8001384:	bf00      	nop
 8001386:	bd80      	pop	{r7, pc}
 8001388:	200002e4 	.word	0x200002e4
 800138c:	40005400 	.word	0x40005400
 8001390:	000186a0 	.word	0x000186a0

08001394 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8001394:	b580      	push	{r7, lr}
 8001396:	b086      	sub	sp, #24
 8001398:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800139a:	f107 0310 	add.w	r3, r7, #16
 800139e:	2200      	movs	r2, #0
 80013a0:	601a      	str	r2, [r3, #0]
 80013a2:	605a      	str	r2, [r3, #4]
	TIM_IC_InitTypeDef sConfigIC = { 0 };
 80013a4:	463b      	mov	r3, r7
 80013a6:	2200      	movs	r2, #0
 80013a8:	601a      	str	r2, [r3, #0]
 80013aa:	605a      	str	r2, [r3, #4]
 80013ac:	609a      	str	r2, [r3, #8]
 80013ae:	60da      	str	r2, [r3, #12]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 80013b0:	4b26      	ldr	r3, [pc, #152]	; (800144c <MX_TIM2_Init+0xb8>)
 80013b2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80013b6:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 0;
 80013b8:	4b24      	ldr	r3, [pc, #144]	; (800144c <MX_TIM2_Init+0xb8>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013be:	4b23      	ldr	r3, [pc, #140]	; (800144c <MX_TIM2_Init+0xb8>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 4294967295;
 80013c4:	4b21      	ldr	r3, [pc, #132]	; (800144c <MX_TIM2_Init+0xb8>)
 80013c6:	f04f 32ff 	mov.w	r2, #4294967295
 80013ca:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013cc:	4b1f      	ldr	r3, [pc, #124]	; (800144c <MX_TIM2_Init+0xb8>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013d2:	4b1e      	ldr	r3, [pc, #120]	; (800144c <MX_TIM2_Init+0xb8>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_IC_Init(&htim2) != HAL_OK) {
 80013d8:	481c      	ldr	r0, [pc, #112]	; (800144c <MX_TIM2_Init+0xb8>)
 80013da:	f004 fae4 	bl	80059a6 <HAL_TIM_IC_Init>
 80013de:	4603      	mov	r3, r0
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d001      	beq.n	80013e8 <MX_TIM2_Init+0x54>
		Error_Handler();
 80013e4:	f000 fa5a 	bl	800189c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013e8:	2300      	movs	r3, #0
 80013ea:	613b      	str	r3, [r7, #16]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013ec:	2300      	movs	r3, #0
 80013ee:	617b      	str	r3, [r7, #20]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 80013f0:	f107 0310 	add.w	r3, r7, #16
 80013f4:	4619      	mov	r1, r3
 80013f6:	4815      	ldr	r0, [pc, #84]	; (800144c <MX_TIM2_Init+0xb8>)
 80013f8:	f005 f9ae 	bl	8006758 <HAL_TIMEx_MasterConfigSynchronization>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d001      	beq.n	8001406 <MX_TIM2_Init+0x72>
			!= HAL_OK) {
		Error_Handler();
 8001402:	f000 fa4b 	bl	800189c <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001406:	2300      	movs	r3, #0
 8001408:	603b      	str	r3, [r7, #0]
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800140a:	2301      	movs	r3, #1
 800140c:	607b      	str	r3, [r7, #4]
	sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800140e:	2300      	movs	r3, #0
 8001410:	60bb      	str	r3, [r7, #8]
	sConfigIC.ICFilter = 0;
 8001412:	2300      	movs	r3, #0
 8001414:	60fb      	str	r3, [r7, #12]
	if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK) {
 8001416:	463b      	mov	r3, r7
 8001418:	2200      	movs	r2, #0
 800141a:	4619      	mov	r1, r3
 800141c:	480b      	ldr	r0, [pc, #44]	; (800144c <MX_TIM2_Init+0xb8>)
 800141e:	f004 fd41 	bl	8005ea4 <HAL_TIM_IC_ConfigChannel>
 8001422:	4603      	mov	r3, r0
 8001424:	2b00      	cmp	r3, #0
 8001426:	d001      	beq.n	800142c <MX_TIM2_Init+0x98>
		Error_Handler();
 8001428:	f000 fa38 	bl	800189c <Error_Handler>
	}
	if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK) {
 800142c:	463b      	mov	r3, r7
 800142e:	2208      	movs	r2, #8
 8001430:	4619      	mov	r1, r3
 8001432:	4806      	ldr	r0, [pc, #24]	; (800144c <MX_TIM2_Init+0xb8>)
 8001434:	f004 fd36 	bl	8005ea4 <HAL_TIM_IC_ConfigChannel>
 8001438:	4603      	mov	r3, r0
 800143a:	2b00      	cmp	r3, #0
 800143c:	d001      	beq.n	8001442 <MX_TIM2_Init+0xae>
		Error_Handler();
 800143e:	f000 fa2d 	bl	800189c <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 8001442:	bf00      	nop
 8001444:	3718      	adds	r7, #24
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	20000338 	.word	0x20000338

08001450 <MX_TIM5_Init>:
/**
 * @brief TIM5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM5_Init(void) {
 8001450:	b580      	push	{r7, lr}
 8001452:	b08a      	sub	sp, #40	; 0x28
 8001454:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM5_Init 0 */

	/* USER CODE END TIM5_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8001456:	f107 0318 	add.w	r3, r7, #24
 800145a:	2200      	movs	r2, #0
 800145c:	601a      	str	r2, [r3, #0]
 800145e:	605a      	str	r2, [r3, #4]
 8001460:	609a      	str	r2, [r3, #8]
 8001462:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001464:	f107 0310 	add.w	r3, r7, #16
 8001468:	2200      	movs	r2, #0
 800146a:	601a      	str	r2, [r3, #0]
 800146c:	605a      	str	r2, [r3, #4]
	TIM_IC_InitTypeDef sConfigIC = { 0 };
 800146e:	463b      	mov	r3, r7
 8001470:	2200      	movs	r2, #0
 8001472:	601a      	str	r2, [r3, #0]
 8001474:	605a      	str	r2, [r3, #4]
 8001476:	609a      	str	r2, [r3, #8]
 8001478:	60da      	str	r2, [r3, #12]

	/* USER CODE BEGIN TIM5_Init 1 */

	/* USER CODE END TIM5_Init 1 */
	htim5.Instance = TIM5;
 800147a:	4b2b      	ldr	r3, [pc, #172]	; (8001528 <MX_TIM5_Init+0xd8>)
 800147c:	4a2b      	ldr	r2, [pc, #172]	; (800152c <MX_TIM5_Init+0xdc>)
 800147e:	601a      	str	r2, [r3, #0]
	htim5.Init.Prescaler = 0;
 8001480:	4b29      	ldr	r3, [pc, #164]	; (8001528 <MX_TIM5_Init+0xd8>)
 8001482:	2200      	movs	r2, #0
 8001484:	605a      	str	r2, [r3, #4]
	htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001486:	4b28      	ldr	r3, [pc, #160]	; (8001528 <MX_TIM5_Init+0xd8>)
 8001488:	2200      	movs	r2, #0
 800148a:	609a      	str	r2, [r3, #8]
	htim5.Init.Period = 4294967295;
 800148c:	4b26      	ldr	r3, [pc, #152]	; (8001528 <MX_TIM5_Init+0xd8>)
 800148e:	f04f 32ff 	mov.w	r2, #4294967295
 8001492:	60da      	str	r2, [r3, #12]
	htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001494:	4b24      	ldr	r3, [pc, #144]	; (8001528 <MX_TIM5_Init+0xd8>)
 8001496:	2200      	movs	r2, #0
 8001498:	611a      	str	r2, [r3, #16]
	htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800149a:	4b23      	ldr	r3, [pc, #140]	; (8001528 <MX_TIM5_Init+0xd8>)
 800149c:	2200      	movs	r2, #0
 800149e:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim5) != HAL_OK) {
 80014a0:	4821      	ldr	r0, [pc, #132]	; (8001528 <MX_TIM5_Init+0xd8>)
 80014a2:	f004 fa31 	bl	8005908 <HAL_TIM_Base_Init>
 80014a6:	4603      	mov	r3, r0
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d001      	beq.n	80014b0 <MX_TIM5_Init+0x60>
		Error_Handler();
 80014ac:	f000 f9f6 	bl	800189c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014b4:	61bb      	str	r3, [r7, #24]
	if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK) {
 80014b6:	f107 0318 	add.w	r3, r7, #24
 80014ba:	4619      	mov	r1, r3
 80014bc:	481a      	ldr	r0, [pc, #104]	; (8001528 <MX_TIM5_Init+0xd8>)
 80014be:	f004 fd8d 	bl	8005fdc <HAL_TIM_ConfigClockSource>
 80014c2:	4603      	mov	r3, r0
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d001      	beq.n	80014cc <MX_TIM5_Init+0x7c>
		Error_Handler();
 80014c8:	f000 f9e8 	bl	800189c <Error_Handler>
	}
	if (HAL_TIM_IC_Init(&htim5) != HAL_OK) {
 80014cc:	4816      	ldr	r0, [pc, #88]	; (8001528 <MX_TIM5_Init+0xd8>)
 80014ce:	f004 fa6a 	bl	80059a6 <HAL_TIM_IC_Init>
 80014d2:	4603      	mov	r3, r0
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d001      	beq.n	80014dc <MX_TIM5_Init+0x8c>
		Error_Handler();
 80014d8:	f000 f9e0 	bl	800189c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014dc:	2300      	movs	r3, #0
 80014de:	613b      	str	r3, [r7, #16]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014e0:	2300      	movs	r3, #0
 80014e2:	617b      	str	r3, [r7, #20]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig)
 80014e4:	f107 0310 	add.w	r3, r7, #16
 80014e8:	4619      	mov	r1, r3
 80014ea:	480f      	ldr	r0, [pc, #60]	; (8001528 <MX_TIM5_Init+0xd8>)
 80014ec:	f005 f934 	bl	8006758 <HAL_TIMEx_MasterConfigSynchronization>
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d001      	beq.n	80014fa <MX_TIM5_Init+0xaa>
			!= HAL_OK) {
		Error_Handler();
 80014f6:	f000 f9d1 	bl	800189c <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80014fa:	2300      	movs	r3, #0
 80014fc:	603b      	str	r3, [r7, #0]
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80014fe:	2301      	movs	r3, #1
 8001500:	607b      	str	r3, [r7, #4]
	sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001502:	2300      	movs	r3, #0
 8001504:	60bb      	str	r3, [r7, #8]
	sConfigIC.ICFilter = 0;
 8001506:	2300      	movs	r3, #0
 8001508:	60fb      	str	r3, [r7, #12]
	if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_2) != HAL_OK) {
 800150a:	463b      	mov	r3, r7
 800150c:	2204      	movs	r2, #4
 800150e:	4619      	mov	r1, r3
 8001510:	4805      	ldr	r0, [pc, #20]	; (8001528 <MX_TIM5_Init+0xd8>)
 8001512:	f004 fcc7 	bl	8005ea4 <HAL_TIM_IC_ConfigChannel>
 8001516:	4603      	mov	r3, r0
 8001518:	2b00      	cmp	r3, #0
 800151a:	d001      	beq.n	8001520 <MX_TIM5_Init+0xd0>
		Error_Handler();
 800151c:	f000 f9be 	bl	800189c <Error_Handler>
	}
	/* USER CODE BEGIN TIM5_Init 2 */

	/* USER CODE END TIM5_Init 2 */

}
 8001520:	bf00      	nop
 8001522:	3728      	adds	r7, #40	; 0x28
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}
 8001528:	20000380 	.word	0x20000380
 800152c:	40000c00 	.word	0x40000c00

08001530 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8001530:	b580      	push	{r7, lr}
 8001532:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8001534:	4b11      	ldr	r3, [pc, #68]	; (800157c <MX_USART2_UART_Init+0x4c>)
 8001536:	4a12      	ldr	r2, [pc, #72]	; (8001580 <MX_USART2_UART_Init+0x50>)
 8001538:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 800153a:	4b10      	ldr	r3, [pc, #64]	; (800157c <MX_USART2_UART_Init+0x4c>)
 800153c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001540:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001542:	4b0e      	ldr	r3, [pc, #56]	; (800157c <MX_USART2_UART_Init+0x4c>)
 8001544:	2200      	movs	r2, #0
 8001546:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8001548:	4b0c      	ldr	r3, [pc, #48]	; (800157c <MX_USART2_UART_Init+0x4c>)
 800154a:	2200      	movs	r2, #0
 800154c:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 800154e:	4b0b      	ldr	r3, [pc, #44]	; (800157c <MX_USART2_UART_Init+0x4c>)
 8001550:	2200      	movs	r2, #0
 8001552:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8001554:	4b09      	ldr	r3, [pc, #36]	; (800157c <MX_USART2_UART_Init+0x4c>)
 8001556:	220c      	movs	r2, #12
 8001558:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800155a:	4b08      	ldr	r3, [pc, #32]	; (800157c <MX_USART2_UART_Init+0x4c>)
 800155c:	2200      	movs	r2, #0
 800155e:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001560:	4b06      	ldr	r3, [pc, #24]	; (800157c <MX_USART2_UART_Init+0x4c>)
 8001562:	2200      	movs	r2, #0
 8001564:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8001566:	4805      	ldr	r0, [pc, #20]	; (800157c <MX_USART2_UART_Init+0x4c>)
 8001568:	f005 f986 	bl	8006878 <HAL_UART_Init>
 800156c:	4603      	mov	r3, r0
 800156e:	2b00      	cmp	r3, #0
 8001570:	d001      	beq.n	8001576 <MX_USART2_UART_Init+0x46>
		Error_Handler();
 8001572:	f000 f993 	bl	800189c <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8001576:	bf00      	nop
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	200003c8 	.word	0x200003c8
 8001580:	40004400 	.word	0x40004400

08001584 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001584:	b580      	push	{r7, lr}
 8001586:	b088      	sub	sp, #32
 8001588:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800158a:	f107 030c 	add.w	r3, r7, #12
 800158e:	2200      	movs	r2, #0
 8001590:	601a      	str	r2, [r3, #0]
 8001592:	605a      	str	r2, [r3, #4]
 8001594:	609a      	str	r2, [r3, #8]
 8001596:	60da      	str	r2, [r3, #12]
 8001598:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800159a:	2300      	movs	r3, #0
 800159c:	60bb      	str	r3, [r7, #8]
 800159e:	4b1e      	ldr	r3, [pc, #120]	; (8001618 <MX_GPIO_Init+0x94>)
 80015a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a2:	4a1d      	ldr	r2, [pc, #116]	; (8001618 <MX_GPIO_Init+0x94>)
 80015a4:	f043 0304 	orr.w	r3, r3, #4
 80015a8:	6313      	str	r3, [r2, #48]	; 0x30
 80015aa:	4b1b      	ldr	r3, [pc, #108]	; (8001618 <MX_GPIO_Init+0x94>)
 80015ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ae:	f003 0304 	and.w	r3, r3, #4
 80015b2:	60bb      	str	r3, [r7, #8]
 80015b4:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80015b6:	2300      	movs	r3, #0
 80015b8:	607b      	str	r3, [r7, #4]
 80015ba:	4b17      	ldr	r3, [pc, #92]	; (8001618 <MX_GPIO_Init+0x94>)
 80015bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015be:	4a16      	ldr	r2, [pc, #88]	; (8001618 <MX_GPIO_Init+0x94>)
 80015c0:	f043 0301 	orr.w	r3, r3, #1
 80015c4:	6313      	str	r3, [r2, #48]	; 0x30
 80015c6:	4b14      	ldr	r3, [pc, #80]	; (8001618 <MX_GPIO_Init+0x94>)
 80015c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ca:	f003 0301 	and.w	r3, r3, #1
 80015ce:	607b      	str	r3, [r7, #4]
 80015d0:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80015d2:	2300      	movs	r3, #0
 80015d4:	603b      	str	r3, [r7, #0]
 80015d6:	4b10      	ldr	r3, [pc, #64]	; (8001618 <MX_GPIO_Init+0x94>)
 80015d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015da:	4a0f      	ldr	r2, [pc, #60]	; (8001618 <MX_GPIO_Init+0x94>)
 80015dc:	f043 0302 	orr.w	r3, r3, #2
 80015e0:	6313      	str	r3, [r2, #48]	; 0x30
 80015e2:	4b0d      	ldr	r3, [pc, #52]	; (8001618 <MX_GPIO_Init+0x94>)
 80015e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e6:	f003 0302 	and.w	r3, r3, #2
 80015ea:	603b      	str	r3, [r7, #0]
 80015ec:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin : PA8 */
	GPIO_InitStruct.Pin = GPIO_PIN_8;
 80015ee:	f44f 7380 	mov.w	r3, #256	; 0x100
 80015f2:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015f4:	2302      	movs	r3, #2
 80015f6:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f8:	2300      	movs	r3, #0
 80015fa:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015fc:	2300      	movs	r3, #0
 80015fe:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8001600:	2300      	movs	r3, #0
 8001602:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001604:	f107 030c 	add.w	r3, r7, #12
 8001608:	4619      	mov	r1, r3
 800160a:	4804      	ldr	r0, [pc, #16]	; (800161c <MX_GPIO_Init+0x98>)
 800160c:	f001 fac8 	bl	8002ba0 <HAL_GPIO_Init>

}
 8001610:	bf00      	nop
 8001612:	3720      	adds	r7, #32
 8001614:	46bd      	mov	sp, r7
 8001616:	bd80      	pop	{r7, pc}
 8001618:	40023800 	.word	0x40023800
 800161c:	40020000 	.word	0x40020000

08001620 <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8001620:	b580      	push	{r7, lr}
 8001622:	b082      	sub	sp, #8
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) {
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	7f1b      	ldrb	r3, [r3, #28]
 800162c:	2b01      	cmp	r3, #1
 800162e:	d139      	bne.n	80016a4 <HAL_TIM_IC_CaptureCallback+0x84>
		if (tim1.Is_First_Captured == 0) {
 8001630:	4b5c      	ldr	r3, [pc, #368]	; (80017a4 <HAL_TIM_IC_CaptureCallback+0x184>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	2b00      	cmp	r3, #0
 8001636:	d10a      	bne.n	800164e <HAL_TIM_IC_CaptureCallback+0x2e>
			tim1.IC_Value1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8001638:	2100      	movs	r1, #0
 800163a:	6878      	ldr	r0, [r7, #4]
 800163c:	f004 fd96 	bl	800616c <HAL_TIM_ReadCapturedValue>
 8001640:	4603      	mov	r3, r0
 8001642:	4a58      	ldr	r2, [pc, #352]	; (80017a4 <HAL_TIM_IC_CaptureCallback+0x184>)
 8001644:	6053      	str	r3, [r2, #4]
			tim1.Is_First_Captured = 1;
 8001646:	4b57      	ldr	r3, [pc, #348]	; (80017a4 <HAL_TIM_IC_CaptureCallback+0x184>)
 8001648:	2201      	movs	r2, #1
 800164a:	601a      	str	r2, [r3, #0]
 800164c:	e02a      	b.n	80016a4 <HAL_TIM_IC_CaptureCallback+0x84>
		} else if (tim1.Is_First_Captured) {
 800164e:	4b55      	ldr	r3, [pc, #340]	; (80017a4 <HAL_TIM_IC_CaptureCallback+0x184>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	2b00      	cmp	r3, #0
 8001654:	d026      	beq.n	80016a4 <HAL_TIM_IC_CaptureCallback+0x84>
			tim1.IC_Value2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8001656:	2100      	movs	r1, #0
 8001658:	6878      	ldr	r0, [r7, #4]
 800165a:	f004 fd87 	bl	800616c <HAL_TIM_ReadCapturedValue>
 800165e:	4603      	mov	r3, r0
 8001660:	4a50      	ldr	r2, [pc, #320]	; (80017a4 <HAL_TIM_IC_CaptureCallback+0x184>)
 8001662:	6093      	str	r3, [r2, #8]
			if (tim1.IC_Value2 > tim1.IC_Value1) {
 8001664:	4b4f      	ldr	r3, [pc, #316]	; (80017a4 <HAL_TIM_IC_CaptureCallback+0x184>)
 8001666:	689a      	ldr	r2, [r3, #8]
 8001668:	4b4e      	ldr	r3, [pc, #312]	; (80017a4 <HAL_TIM_IC_CaptureCallback+0x184>)
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	429a      	cmp	r2, r3
 800166e:	d913      	bls.n	8001698 <HAL_TIM_IC_CaptureCallback+0x78>
				tim1.Difference = tim1.IC_Value2 - tim1.IC_Value1;
 8001670:	4b4c      	ldr	r3, [pc, #304]	; (80017a4 <HAL_TIM_IC_CaptureCallback+0x184>)
 8001672:	689a      	ldr	r2, [r3, #8]
 8001674:	4b4b      	ldr	r3, [pc, #300]	; (80017a4 <HAL_TIM_IC_CaptureCallback+0x184>)
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	1ad3      	subs	r3, r2, r3
 800167a:	4a4a      	ldr	r2, [pc, #296]	; (80017a4 <HAL_TIM_IC_CaptureCallback+0x184>)
 800167c:	60d3      	str	r3, [r2, #12]
				tim1.Frequency = HAL_RCC_GetPCLK1Freq() / tim1.Difference;
 800167e:	f003 fcd3 	bl	8005028 <HAL_RCC_GetPCLK1Freq>
 8001682:	4602      	mov	r2, r0
 8001684:	4b47      	ldr	r3, [pc, #284]	; (80017a4 <HAL_TIM_IC_CaptureCallback+0x184>)
 8001686:	68db      	ldr	r3, [r3, #12]
 8001688:	fbb2 f3f3 	udiv	r3, r2, r3
 800168c:	4a45      	ldr	r2, [pc, #276]	; (80017a4 <HAL_TIM_IC_CaptureCallback+0x184>)
 800168e:	6113      	str	r3, [r2, #16]
				tim1.CalculationOK = 1;
 8001690:	4b44      	ldr	r3, [pc, #272]	; (80017a4 <HAL_TIM_IC_CaptureCallback+0x184>)
 8001692:	2201      	movs	r2, #1
 8001694:	615a      	str	r2, [r3, #20]
 8001696:	e002      	b.n	800169e <HAL_TIM_IC_CaptureCallback+0x7e>
			} else
				tim1.CalculationOK = 0;
 8001698:	4b42      	ldr	r3, [pc, #264]	; (80017a4 <HAL_TIM_IC_CaptureCallback+0x184>)
 800169a:	2200      	movs	r2, #0
 800169c:	615a      	str	r2, [r3, #20]
			tim1.Is_First_Captured = 0;
 800169e:	4b41      	ldr	r3, [pc, #260]	; (80017a4 <HAL_TIM_IC_CaptureCallback+0x184>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	601a      	str	r2, [r3, #0]
		}
	}
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2) {
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	7f1b      	ldrb	r3, [r3, #28]
 80016a8:	2b02      	cmp	r3, #2
 80016aa:	d139      	bne.n	8001720 <HAL_TIM_IC_CaptureCallback+0x100>
		if (tim2.Is_First_Captured == 0) {
 80016ac:	4b3e      	ldr	r3, [pc, #248]	; (80017a8 <HAL_TIM_IC_CaptureCallback+0x188>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d10a      	bne.n	80016ca <HAL_TIM_IC_CaptureCallback+0xaa>
			tim2.IC_Value1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 80016b4:	2104      	movs	r1, #4
 80016b6:	6878      	ldr	r0, [r7, #4]
 80016b8:	f004 fd58 	bl	800616c <HAL_TIM_ReadCapturedValue>
 80016bc:	4603      	mov	r3, r0
 80016be:	4a3a      	ldr	r2, [pc, #232]	; (80017a8 <HAL_TIM_IC_CaptureCallback+0x188>)
 80016c0:	6053      	str	r3, [r2, #4]
			tim2.Is_First_Captured = 1;
 80016c2:	4b39      	ldr	r3, [pc, #228]	; (80017a8 <HAL_TIM_IC_CaptureCallback+0x188>)
 80016c4:	2201      	movs	r2, #1
 80016c6:	601a      	str	r2, [r3, #0]
 80016c8:	e02a      	b.n	8001720 <HAL_TIM_IC_CaptureCallback+0x100>
		} else if (tim2.Is_First_Captured) {
 80016ca:	4b37      	ldr	r3, [pc, #220]	; (80017a8 <HAL_TIM_IC_CaptureCallback+0x188>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d026      	beq.n	8001720 <HAL_TIM_IC_CaptureCallback+0x100>
			tim2.IC_Value2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 80016d2:	2104      	movs	r1, #4
 80016d4:	6878      	ldr	r0, [r7, #4]
 80016d6:	f004 fd49 	bl	800616c <HAL_TIM_ReadCapturedValue>
 80016da:	4603      	mov	r3, r0
 80016dc:	4a32      	ldr	r2, [pc, #200]	; (80017a8 <HAL_TIM_IC_CaptureCallback+0x188>)
 80016de:	6093      	str	r3, [r2, #8]
			if (tim2.IC_Value2 > tim2.IC_Value1) {
 80016e0:	4b31      	ldr	r3, [pc, #196]	; (80017a8 <HAL_TIM_IC_CaptureCallback+0x188>)
 80016e2:	689a      	ldr	r2, [r3, #8]
 80016e4:	4b30      	ldr	r3, [pc, #192]	; (80017a8 <HAL_TIM_IC_CaptureCallback+0x188>)
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	429a      	cmp	r2, r3
 80016ea:	d913      	bls.n	8001714 <HAL_TIM_IC_CaptureCallback+0xf4>
				tim2.Difference = tim2.IC_Value2 - tim2.IC_Value1;
 80016ec:	4b2e      	ldr	r3, [pc, #184]	; (80017a8 <HAL_TIM_IC_CaptureCallback+0x188>)
 80016ee:	689a      	ldr	r2, [r3, #8]
 80016f0:	4b2d      	ldr	r3, [pc, #180]	; (80017a8 <HAL_TIM_IC_CaptureCallback+0x188>)
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	1ad3      	subs	r3, r2, r3
 80016f6:	4a2c      	ldr	r2, [pc, #176]	; (80017a8 <HAL_TIM_IC_CaptureCallback+0x188>)
 80016f8:	60d3      	str	r3, [r2, #12]
				tim2.Frequency = HAL_RCC_GetPCLK1Freq() / tim2.Difference;
 80016fa:	f003 fc95 	bl	8005028 <HAL_RCC_GetPCLK1Freq>
 80016fe:	4602      	mov	r2, r0
 8001700:	4b29      	ldr	r3, [pc, #164]	; (80017a8 <HAL_TIM_IC_CaptureCallback+0x188>)
 8001702:	68db      	ldr	r3, [r3, #12]
 8001704:	fbb2 f3f3 	udiv	r3, r2, r3
 8001708:	4a27      	ldr	r2, [pc, #156]	; (80017a8 <HAL_TIM_IC_CaptureCallback+0x188>)
 800170a:	6113      	str	r3, [r2, #16]
				tim2.CalculationOK = 1;
 800170c:	4b26      	ldr	r3, [pc, #152]	; (80017a8 <HAL_TIM_IC_CaptureCallback+0x188>)
 800170e:	2201      	movs	r2, #1
 8001710:	615a      	str	r2, [r3, #20]
 8001712:	e002      	b.n	800171a <HAL_TIM_IC_CaptureCallback+0xfa>
			} else
				tim2.CalculationOK = 0;
 8001714:	4b24      	ldr	r3, [pc, #144]	; (80017a8 <HAL_TIM_IC_CaptureCallback+0x188>)
 8001716:	2200      	movs	r2, #0
 8001718:	615a      	str	r2, [r3, #20]
			tim2.Is_First_Captured = 0;
 800171a:	4b23      	ldr	r3, [pc, #140]	; (80017a8 <HAL_TIM_IC_CaptureCallback+0x188>)
 800171c:	2200      	movs	r2, #0
 800171e:	601a      	str	r2, [r3, #0]
		}
	}
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3) {
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	7f1b      	ldrb	r3, [r3, #28]
 8001724:	2b04      	cmp	r3, #4
 8001726:	d139      	bne.n	800179c <HAL_TIM_IC_CaptureCallback+0x17c>
		if (tim3.Is_First_Captured == 0) {
 8001728:	4b20      	ldr	r3, [pc, #128]	; (80017ac <HAL_TIM_IC_CaptureCallback+0x18c>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	2b00      	cmp	r3, #0
 800172e:	d10a      	bne.n	8001746 <HAL_TIM_IC_CaptureCallback+0x126>
			tim3.IC_Value1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_3);
 8001730:	2108      	movs	r1, #8
 8001732:	6878      	ldr	r0, [r7, #4]
 8001734:	f004 fd1a 	bl	800616c <HAL_TIM_ReadCapturedValue>
 8001738:	4603      	mov	r3, r0
 800173a:	4a1c      	ldr	r2, [pc, #112]	; (80017ac <HAL_TIM_IC_CaptureCallback+0x18c>)
 800173c:	6053      	str	r3, [r2, #4]
			tim3.Is_First_Captured = 1;
 800173e:	4b1b      	ldr	r3, [pc, #108]	; (80017ac <HAL_TIM_IC_CaptureCallback+0x18c>)
 8001740:	2201      	movs	r2, #1
 8001742:	601a      	str	r2, [r3, #0]
			} else
				tim3.CalculationOK = 0;
			tim3.Is_First_Captured = 0;
		}
	}
}
 8001744:	e02a      	b.n	800179c <HAL_TIM_IC_CaptureCallback+0x17c>
		} else if (tim3.Is_First_Captured) {
 8001746:	4b19      	ldr	r3, [pc, #100]	; (80017ac <HAL_TIM_IC_CaptureCallback+0x18c>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	2b00      	cmp	r3, #0
 800174c:	d026      	beq.n	800179c <HAL_TIM_IC_CaptureCallback+0x17c>
			tim3.IC_Value2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_3);
 800174e:	2108      	movs	r1, #8
 8001750:	6878      	ldr	r0, [r7, #4]
 8001752:	f004 fd0b 	bl	800616c <HAL_TIM_ReadCapturedValue>
 8001756:	4603      	mov	r3, r0
 8001758:	4a14      	ldr	r2, [pc, #80]	; (80017ac <HAL_TIM_IC_CaptureCallback+0x18c>)
 800175a:	6093      	str	r3, [r2, #8]
			if (tim3.IC_Value2 > tim3.IC_Value1) {
 800175c:	4b13      	ldr	r3, [pc, #76]	; (80017ac <HAL_TIM_IC_CaptureCallback+0x18c>)
 800175e:	689a      	ldr	r2, [r3, #8]
 8001760:	4b12      	ldr	r3, [pc, #72]	; (80017ac <HAL_TIM_IC_CaptureCallback+0x18c>)
 8001762:	685b      	ldr	r3, [r3, #4]
 8001764:	429a      	cmp	r2, r3
 8001766:	d913      	bls.n	8001790 <HAL_TIM_IC_CaptureCallback+0x170>
				tim3.Difference = tim3.IC_Value2 - tim3.IC_Value1;
 8001768:	4b10      	ldr	r3, [pc, #64]	; (80017ac <HAL_TIM_IC_CaptureCallback+0x18c>)
 800176a:	689a      	ldr	r2, [r3, #8]
 800176c:	4b0f      	ldr	r3, [pc, #60]	; (80017ac <HAL_TIM_IC_CaptureCallback+0x18c>)
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	1ad3      	subs	r3, r2, r3
 8001772:	4a0e      	ldr	r2, [pc, #56]	; (80017ac <HAL_TIM_IC_CaptureCallback+0x18c>)
 8001774:	60d3      	str	r3, [r2, #12]
				tim3.Frequency = HAL_RCC_GetPCLK1Freq() / tim3.Difference;
 8001776:	f003 fc57 	bl	8005028 <HAL_RCC_GetPCLK1Freq>
 800177a:	4602      	mov	r2, r0
 800177c:	4b0b      	ldr	r3, [pc, #44]	; (80017ac <HAL_TIM_IC_CaptureCallback+0x18c>)
 800177e:	68db      	ldr	r3, [r3, #12]
 8001780:	fbb2 f3f3 	udiv	r3, r2, r3
 8001784:	4a09      	ldr	r2, [pc, #36]	; (80017ac <HAL_TIM_IC_CaptureCallback+0x18c>)
 8001786:	6113      	str	r3, [r2, #16]
				tim3.CalculationOK = 1;
 8001788:	4b08      	ldr	r3, [pc, #32]	; (80017ac <HAL_TIM_IC_CaptureCallback+0x18c>)
 800178a:	2201      	movs	r2, #1
 800178c:	615a      	str	r2, [r3, #20]
 800178e:	e002      	b.n	8001796 <HAL_TIM_IC_CaptureCallback+0x176>
				tim3.CalculationOK = 0;
 8001790:	4b06      	ldr	r3, [pc, #24]	; (80017ac <HAL_TIM_IC_CaptureCallback+0x18c>)
 8001792:	2200      	movs	r2, #0
 8001794:	615a      	str	r2, [r3, #20]
			tim3.Is_First_Captured = 0;
 8001796:	4b05      	ldr	r3, [pc, #20]	; (80017ac <HAL_TIM_IC_CaptureCallback+0x18c>)
 8001798:	2200      	movs	r2, #0
 800179a:	601a      	str	r2, [r3, #0]
}
 800179c:	bf00      	nop
 800179e:	3708      	adds	r7, #8
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd80      	pop	{r7, pc}
 80017a4:	2000040c 	.word	0x2000040c
 80017a8:	20000424 	.word	0x20000424
 80017ac:	2000043c 	.word	0x2000043c

080017b0 <__io_putchar>:

int __io_putchar(int ch) {
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b084      	sub	sp, #16
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
	uint8_t c[1];
	c[0] = ch & 0x00FF;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	b2db      	uxtb	r3, r3
 80017bc:	733b      	strb	r3, [r7, #12]
	HAL_UART_Transmit(&huart2, &*c, 1, 10);
 80017be:	f107 010c 	add.w	r1, r7, #12
 80017c2:	230a      	movs	r3, #10
 80017c4:	2201      	movs	r2, #1
 80017c6:	4804      	ldr	r0, [pc, #16]	; (80017d8 <__io_putchar+0x28>)
 80017c8:	f005 f8a3 	bl	8006912 <HAL_UART_Transmit>
	return ch;
 80017cc:	687b      	ldr	r3, [r7, #4]
}
 80017ce:	4618      	mov	r0, r3
 80017d0:	3710      	adds	r7, #16
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	200003c8 	.word	0x200003c8

080017dc <_write>:

int _write(int file, char *ptr, int len) {
 80017dc:	b580      	push	{r7, lr}
 80017de:	b086      	sub	sp, #24
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	60f8      	str	r0, [r7, #12]
 80017e4:	60b9      	str	r1, [r7, #8]
 80017e6:	607a      	str	r2, [r7, #4]
	int DataIdx;
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80017e8:	2300      	movs	r3, #0
 80017ea:	617b      	str	r3, [r7, #20]
 80017ec:	e009      	b.n	8001802 <_write+0x26>
		__io_putchar(*ptr++);
 80017ee:	68bb      	ldr	r3, [r7, #8]
 80017f0:	1c5a      	adds	r2, r3, #1
 80017f2:	60ba      	str	r2, [r7, #8]
 80017f4:	781b      	ldrb	r3, [r3, #0]
 80017f6:	4618      	mov	r0, r3
 80017f8:	f7ff ffda 	bl	80017b0 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80017fc:	697b      	ldr	r3, [r7, #20]
 80017fe:	3301      	adds	r3, #1
 8001800:	617b      	str	r3, [r7, #20]
 8001802:	697a      	ldr	r2, [r7, #20]
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	429a      	cmp	r2, r3
 8001808:	dbf1      	blt.n	80017ee <_write+0x12>
	}
	return len;
 800180a:	687b      	ldr	r3, [r7, #4]
}
 800180c:	4618      	mov	r0, r3
 800180e:	3718      	adds	r7, #24
 8001810:	46bd      	mov	sp, r7
 8001812:	bd80      	pop	{r7, pc}

08001814 <HAL_I2C_ListenCpltCallback>:

void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c) {
 8001814:	b580      	push	{r7, lr}
 8001816:	b082      	sub	sp, #8
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
	HAL_I2C_EnableListen_IT(&hi2c1); // Restart
 800181c:	4803      	ldr	r0, [pc, #12]	; (800182c <HAL_I2C_ListenCpltCallback+0x18>)
 800181e:	f001 fd7d 	bl	800331c <HAL_I2C_EnableListen_IT>
}
 8001822:	bf00      	nop
 8001824:	3708      	adds	r7, #8
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	200002e4 	.word	0x200002e4

08001830 <HAL_I2C_AddrCallback>:

void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection,
		uint16_t AddrMatchCode) {
 8001830:	b580      	push	{r7, lr}
 8001832:	b082      	sub	sp, #8
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
 8001838:	460b      	mov	r3, r1
 800183a:	70fb      	strb	r3, [r7, #3]
 800183c:	4613      	mov	r3, r2
 800183e:	803b      	strh	r3, [r7, #0]
	UNUSED(AddrMatchCode);
	//I2C_NEXT_FRAME
	//I2C_LAST_FRAME
	if (TransferDirection == I2C_DIRECTION_TRANSMIT)
 8001840:	78fb      	ldrb	r3, [r7, #3]
 8001842:	2b01      	cmp	r3, #1
 8001844:	d106      	bne.n	8001854 <HAL_I2C_AddrCallback+0x24>
		HAL_I2C_Slave_Sequential_Receive_IT(&hi2c1, receive, sizeof(receive),
 8001846:	2304      	movs	r3, #4
 8001848:	2214      	movs	r2, #20
 800184a:	4907      	ldr	r1, [pc, #28]	; (8001868 <HAL_I2C_AddrCallback+0x38>)
 800184c:	4807      	ldr	r0, [pc, #28]	; (800186c <HAL_I2C_AddrCallback+0x3c>)
 800184e:	f001 fcf2 	bl	8003236 <HAL_I2C_Slave_Seq_Receive_IT>
	else {
		HAL_I2C_Slave_Sequential_Transmit_IT(&hi2c1, send, sizeof(send),
				I2C_NEXT_FRAME);
	}

}
 8001852:	e005      	b.n	8001860 <HAL_I2C_AddrCallback+0x30>
		HAL_I2C_Slave_Sequential_Transmit_IT(&hi2c1, send, sizeof(send),
 8001854:	2304      	movs	r3, #4
 8001856:	2204      	movs	r2, #4
 8001858:	4905      	ldr	r1, [pc, #20]	; (8001870 <HAL_I2C_AddrCallback+0x40>)
 800185a:	4804      	ldr	r0, [pc, #16]	; (800186c <HAL_I2C_AddrCallback+0x3c>)
 800185c:	f001 fc78 	bl	8003150 <HAL_I2C_Slave_Seq_Transmit_IT>
}
 8001860:	bf00      	nop
 8001862:	3708      	adds	r7, #8
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}
 8001868:	20000458 	.word	0x20000458
 800186c:	200002e4 	.word	0x200002e4
 8001870:	20000454 	.word	0x20000454

08001874 <HAL_I2C_SlaveTxCpltCallback>:

void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c) {
 8001874:	b480      	push	{r7}
 8001876:	b083      	sub	sp, #12
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
}
 800187c:	bf00      	nop
 800187e:	370c      	adds	r7, #12
 8001880:	46bd      	mov	sp, r7
 8001882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001886:	4770      	bx	lr

08001888 <HAL_I2C_SlaveRxCpltCallback>:

void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c) {
 8001888:	b480      	push	{r7}
 800188a:	b083      	sub	sp, #12
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
}
 8001890:	bf00      	nop
 8001892:	370c      	adds	r7, #12
 8001894:	46bd      	mov	sp, r7
 8001896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189a:	4770      	bx	lr

0800189c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800189c:	b480      	push	{r7}
 800189e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018a0:	b672      	cpsid	i
}
 80018a2:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80018a4:	e7fe      	b.n	80018a4 <Error_Handler+0x8>
	...

080018a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018a8:	b480      	push	{r7}
 80018aa:	b083      	sub	sp, #12
 80018ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018ae:	2300      	movs	r3, #0
 80018b0:	607b      	str	r3, [r7, #4]
 80018b2:	4b10      	ldr	r3, [pc, #64]	; (80018f4 <HAL_MspInit+0x4c>)
 80018b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018b6:	4a0f      	ldr	r2, [pc, #60]	; (80018f4 <HAL_MspInit+0x4c>)
 80018b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018bc:	6453      	str	r3, [r2, #68]	; 0x44
 80018be:	4b0d      	ldr	r3, [pc, #52]	; (80018f4 <HAL_MspInit+0x4c>)
 80018c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018c6:	607b      	str	r3, [r7, #4]
 80018c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018ca:	2300      	movs	r3, #0
 80018cc:	603b      	str	r3, [r7, #0]
 80018ce:	4b09      	ldr	r3, [pc, #36]	; (80018f4 <HAL_MspInit+0x4c>)
 80018d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d2:	4a08      	ldr	r2, [pc, #32]	; (80018f4 <HAL_MspInit+0x4c>)
 80018d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018d8:	6413      	str	r3, [r2, #64]	; 0x40
 80018da:	4b06      	ldr	r3, [pc, #24]	; (80018f4 <HAL_MspInit+0x4c>)
 80018dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018e2:	603b      	str	r3, [r7, #0]
 80018e4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018e6:	bf00      	nop
 80018e8:	370c      	adds	r7, #12
 80018ea:	46bd      	mov	sp, r7
 80018ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f0:	4770      	bx	lr
 80018f2:	bf00      	nop
 80018f4:	40023800 	.word	0x40023800

080018f8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b08e      	sub	sp, #56	; 0x38
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001900:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001904:	2200      	movs	r2, #0
 8001906:	601a      	str	r2, [r3, #0]
 8001908:	605a      	str	r2, [r3, #4]
 800190a:	609a      	str	r2, [r3, #8]
 800190c:	60da      	str	r2, [r3, #12]
 800190e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4a52      	ldr	r2, [pc, #328]	; (8001a60 <HAL_ADC_MspInit+0x168>)
 8001916:	4293      	cmp	r3, r2
 8001918:	d142      	bne.n	80019a0 <HAL_ADC_MspInit+0xa8>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800191a:	2300      	movs	r3, #0
 800191c:	623b      	str	r3, [r7, #32]
 800191e:	4b51      	ldr	r3, [pc, #324]	; (8001a64 <HAL_ADC_MspInit+0x16c>)
 8001920:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001922:	4a50      	ldr	r2, [pc, #320]	; (8001a64 <HAL_ADC_MspInit+0x16c>)
 8001924:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001928:	6453      	str	r3, [r2, #68]	; 0x44
 800192a:	4b4e      	ldr	r3, [pc, #312]	; (8001a64 <HAL_ADC_MspInit+0x16c>)
 800192c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800192e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001932:	623b      	str	r3, [r7, #32]
 8001934:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001936:	2300      	movs	r3, #0
 8001938:	61fb      	str	r3, [r7, #28]
 800193a:	4b4a      	ldr	r3, [pc, #296]	; (8001a64 <HAL_ADC_MspInit+0x16c>)
 800193c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800193e:	4a49      	ldr	r2, [pc, #292]	; (8001a64 <HAL_ADC_MspInit+0x16c>)
 8001940:	f043 0304 	orr.w	r3, r3, #4
 8001944:	6313      	str	r3, [r2, #48]	; 0x30
 8001946:	4b47      	ldr	r3, [pc, #284]	; (8001a64 <HAL_ADC_MspInit+0x16c>)
 8001948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800194a:	f003 0304 	and.w	r3, r3, #4
 800194e:	61fb      	str	r3, [r7, #28]
 8001950:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001952:	2300      	movs	r3, #0
 8001954:	61bb      	str	r3, [r7, #24]
 8001956:	4b43      	ldr	r3, [pc, #268]	; (8001a64 <HAL_ADC_MspInit+0x16c>)
 8001958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800195a:	4a42      	ldr	r2, [pc, #264]	; (8001a64 <HAL_ADC_MspInit+0x16c>)
 800195c:	f043 0301 	orr.w	r3, r3, #1
 8001960:	6313      	str	r3, [r2, #48]	; 0x30
 8001962:	4b40      	ldr	r3, [pc, #256]	; (8001a64 <HAL_ADC_MspInit+0x16c>)
 8001964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001966:	f003 0301 	and.w	r3, r3, #1
 800196a:	61bb      	str	r3, [r7, #24]
 800196c:	69bb      	ldr	r3, [r7, #24]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800196e:	2301      	movs	r3, #1
 8001970:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001972:	2303      	movs	r3, #3
 8001974:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001976:	2300      	movs	r3, #0
 8001978:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800197a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800197e:	4619      	mov	r1, r3
 8001980:	4839      	ldr	r0, [pc, #228]	; (8001a68 <HAL_ADC_MspInit+0x170>)
 8001982:	f001 f90d 	bl	8002ba0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001986:	2320      	movs	r3, #32
 8001988:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800198a:	2303      	movs	r3, #3
 800198c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800198e:	2300      	movs	r3, #0
 8001990:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001992:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001996:	4619      	mov	r1, r3
 8001998:	4834      	ldr	r0, [pc, #208]	; (8001a6c <HAL_ADC_MspInit+0x174>)
 800199a:	f001 f901 	bl	8002ba0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 800199e:	e05a      	b.n	8001a56 <HAL_ADC_MspInit+0x15e>
  else if(hadc->Instance==ADC2)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4a32      	ldr	r2, [pc, #200]	; (8001a70 <HAL_ADC_MspInit+0x178>)
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d128      	bne.n	80019fc <HAL_ADC_MspInit+0x104>
    __HAL_RCC_ADC2_CLK_ENABLE();
 80019aa:	2300      	movs	r3, #0
 80019ac:	617b      	str	r3, [r7, #20]
 80019ae:	4b2d      	ldr	r3, [pc, #180]	; (8001a64 <HAL_ADC_MspInit+0x16c>)
 80019b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019b2:	4a2c      	ldr	r2, [pc, #176]	; (8001a64 <HAL_ADC_MspInit+0x16c>)
 80019b4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80019b8:	6453      	str	r3, [r2, #68]	; 0x44
 80019ba:	4b2a      	ldr	r3, [pc, #168]	; (8001a64 <HAL_ADC_MspInit+0x16c>)
 80019bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80019c2:	617b      	str	r3, [r7, #20]
 80019c4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80019c6:	2300      	movs	r3, #0
 80019c8:	613b      	str	r3, [r7, #16]
 80019ca:	4b26      	ldr	r3, [pc, #152]	; (8001a64 <HAL_ADC_MspInit+0x16c>)
 80019cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ce:	4a25      	ldr	r2, [pc, #148]	; (8001a64 <HAL_ADC_MspInit+0x16c>)
 80019d0:	f043 0304 	orr.w	r3, r3, #4
 80019d4:	6313      	str	r3, [r2, #48]	; 0x30
 80019d6:	4b23      	ldr	r3, [pc, #140]	; (8001a64 <HAL_ADC_MspInit+0x16c>)
 80019d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019da:	f003 0304 	and.w	r3, r3, #4
 80019de:	613b      	str	r3, [r7, #16]
 80019e0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80019e2:	2302      	movs	r3, #2
 80019e4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80019e6:	2303      	movs	r3, #3
 80019e8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ea:	2300      	movs	r3, #0
 80019ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019f2:	4619      	mov	r1, r3
 80019f4:	481c      	ldr	r0, [pc, #112]	; (8001a68 <HAL_ADC_MspInit+0x170>)
 80019f6:	f001 f8d3 	bl	8002ba0 <HAL_GPIO_Init>
}
 80019fa:	e02c      	b.n	8001a56 <HAL_ADC_MspInit+0x15e>
  else if(hadc->Instance==ADC3)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4a1c      	ldr	r2, [pc, #112]	; (8001a74 <HAL_ADC_MspInit+0x17c>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d127      	bne.n	8001a56 <HAL_ADC_MspInit+0x15e>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001a06:	2300      	movs	r3, #0
 8001a08:	60fb      	str	r3, [r7, #12]
 8001a0a:	4b16      	ldr	r3, [pc, #88]	; (8001a64 <HAL_ADC_MspInit+0x16c>)
 8001a0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a0e:	4a15      	ldr	r2, [pc, #84]	; (8001a64 <HAL_ADC_MspInit+0x16c>)
 8001a10:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a14:	6453      	str	r3, [r2, #68]	; 0x44
 8001a16:	4b13      	ldr	r3, [pc, #76]	; (8001a64 <HAL_ADC_MspInit+0x16c>)
 8001a18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a1e:	60fb      	str	r3, [r7, #12]
 8001a20:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a22:	2300      	movs	r3, #0
 8001a24:	60bb      	str	r3, [r7, #8]
 8001a26:	4b0f      	ldr	r3, [pc, #60]	; (8001a64 <HAL_ADC_MspInit+0x16c>)
 8001a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a2a:	4a0e      	ldr	r2, [pc, #56]	; (8001a64 <HAL_ADC_MspInit+0x16c>)
 8001a2c:	f043 0304 	orr.w	r3, r3, #4
 8001a30:	6313      	str	r3, [r2, #48]	; 0x30
 8001a32:	4b0c      	ldr	r3, [pc, #48]	; (8001a64 <HAL_ADC_MspInit+0x16c>)
 8001a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a36:	f003 0304 	and.w	r3, r3, #4
 8001a3a:	60bb      	str	r3, [r7, #8]
 8001a3c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001a3e:	230c      	movs	r3, #12
 8001a40:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a42:	2303      	movs	r3, #3
 8001a44:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a46:	2300      	movs	r3, #0
 8001a48:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a4e:	4619      	mov	r1, r3
 8001a50:	4805      	ldr	r0, [pc, #20]	; (8001a68 <HAL_ADC_MspInit+0x170>)
 8001a52:	f001 f8a5 	bl	8002ba0 <HAL_GPIO_Init>
}
 8001a56:	bf00      	nop
 8001a58:	3738      	adds	r7, #56	; 0x38
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	40012000 	.word	0x40012000
 8001a64:	40023800 	.word	0x40023800
 8001a68:	40020800 	.word	0x40020800
 8001a6c:	40020000 	.word	0x40020000
 8001a70:	40012100 	.word	0x40012100
 8001a74:	40012200 	.word	0x40012200

08001a78 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b08a      	sub	sp, #40	; 0x28
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a80:	f107 0314 	add.w	r3, r7, #20
 8001a84:	2200      	movs	r2, #0
 8001a86:	601a      	str	r2, [r3, #0]
 8001a88:	605a      	str	r2, [r3, #4]
 8001a8a:	609a      	str	r2, [r3, #8]
 8001a8c:	60da      	str	r2, [r3, #12]
 8001a8e:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a17      	ldr	r2, [pc, #92]	; (8001af4 <HAL_DAC_MspInit+0x7c>)
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d127      	bne.n	8001aea <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	613b      	str	r3, [r7, #16]
 8001a9e:	4b16      	ldr	r3, [pc, #88]	; (8001af8 <HAL_DAC_MspInit+0x80>)
 8001aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aa2:	4a15      	ldr	r2, [pc, #84]	; (8001af8 <HAL_DAC_MspInit+0x80>)
 8001aa4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001aa8:	6413      	str	r3, [r2, #64]	; 0x40
 8001aaa:	4b13      	ldr	r3, [pc, #76]	; (8001af8 <HAL_DAC_MspInit+0x80>)
 8001aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aae:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001ab2:	613b      	str	r3, [r7, #16]
 8001ab4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	60fb      	str	r3, [r7, #12]
 8001aba:	4b0f      	ldr	r3, [pc, #60]	; (8001af8 <HAL_DAC_MspInit+0x80>)
 8001abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001abe:	4a0e      	ldr	r2, [pc, #56]	; (8001af8 <HAL_DAC_MspInit+0x80>)
 8001ac0:	f043 0301 	orr.w	r3, r3, #1
 8001ac4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ac6:	4b0c      	ldr	r3, [pc, #48]	; (8001af8 <HAL_DAC_MspInit+0x80>)
 8001ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aca:	f003 0301 	and.w	r3, r3, #1
 8001ace:	60fb      	str	r3, [r7, #12]
 8001ad0:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001ad2:	2310      	movs	r3, #16
 8001ad4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ad6:	2303      	movs	r3, #3
 8001ad8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ada:	2300      	movs	r3, #0
 8001adc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ade:	f107 0314 	add.w	r3, r7, #20
 8001ae2:	4619      	mov	r1, r3
 8001ae4:	4805      	ldr	r0, [pc, #20]	; (8001afc <HAL_DAC_MspInit+0x84>)
 8001ae6:	f001 f85b 	bl	8002ba0 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8001aea:	bf00      	nop
 8001aec:	3728      	adds	r7, #40	; 0x28
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop
 8001af4:	40007400 	.word	0x40007400
 8001af8:	40023800 	.word	0x40023800
 8001afc:	40020000 	.word	0x40020000

08001b00 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b08a      	sub	sp, #40	; 0x28
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b08:	f107 0314 	add.w	r3, r7, #20
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	601a      	str	r2, [r3, #0]
 8001b10:	605a      	str	r2, [r3, #4]
 8001b12:	609a      	str	r2, [r3, #8]
 8001b14:	60da      	str	r2, [r3, #12]
 8001b16:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a21      	ldr	r2, [pc, #132]	; (8001ba4 <HAL_I2C_MspInit+0xa4>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d13c      	bne.n	8001b9c <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b22:	2300      	movs	r3, #0
 8001b24:	613b      	str	r3, [r7, #16]
 8001b26:	4b20      	ldr	r3, [pc, #128]	; (8001ba8 <HAL_I2C_MspInit+0xa8>)
 8001b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b2a:	4a1f      	ldr	r2, [pc, #124]	; (8001ba8 <HAL_I2C_MspInit+0xa8>)
 8001b2c:	f043 0302 	orr.w	r3, r3, #2
 8001b30:	6313      	str	r3, [r2, #48]	; 0x30
 8001b32:	4b1d      	ldr	r3, [pc, #116]	; (8001ba8 <HAL_I2C_MspInit+0xa8>)
 8001b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b36:	f003 0302 	and.w	r3, r3, #2
 8001b3a:	613b      	str	r3, [r7, #16]
 8001b3c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001b3e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001b42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b44:	2312      	movs	r3, #18
 8001b46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b4c:	2303      	movs	r3, #3
 8001b4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001b50:	2304      	movs	r3, #4
 8001b52:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b54:	f107 0314 	add.w	r3, r7, #20
 8001b58:	4619      	mov	r1, r3
 8001b5a:	4814      	ldr	r0, [pc, #80]	; (8001bac <HAL_I2C_MspInit+0xac>)
 8001b5c:	f001 f820 	bl	8002ba0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001b60:	2300      	movs	r3, #0
 8001b62:	60fb      	str	r3, [r7, #12]
 8001b64:	4b10      	ldr	r3, [pc, #64]	; (8001ba8 <HAL_I2C_MspInit+0xa8>)
 8001b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b68:	4a0f      	ldr	r2, [pc, #60]	; (8001ba8 <HAL_I2C_MspInit+0xa8>)
 8001b6a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001b6e:	6413      	str	r3, [r2, #64]	; 0x40
 8001b70:	4b0d      	ldr	r3, [pc, #52]	; (8001ba8 <HAL_I2C_MspInit+0xa8>)
 8001b72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b78:	60fb      	str	r3, [r7, #12]
 8001b7a:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	2100      	movs	r1, #0
 8001b80:	201f      	movs	r0, #31
 8001b82:	f000 fee4 	bl	800294e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001b86:	201f      	movs	r0, #31
 8001b88:	f000 fefd 	bl	8002986 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	2100      	movs	r1, #0
 8001b90:	2020      	movs	r0, #32
 8001b92:	f000 fedc 	bl	800294e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001b96:	2020      	movs	r0, #32
 8001b98:	f000 fef5 	bl	8002986 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001b9c:	bf00      	nop
 8001b9e:	3728      	adds	r7, #40	; 0x28
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}
 8001ba4:	40005400 	.word	0x40005400
 8001ba8:	40023800 	.word	0x40023800
 8001bac:	40020400 	.word	0x40020400

08001bb0 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b08a      	sub	sp, #40	; 0x28
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bb8:	f107 0314 	add.w	r3, r7, #20
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	601a      	str	r2, [r3, #0]
 8001bc0:	605a      	str	r2, [r3, #4]
 8001bc2:	609a      	str	r2, [r3, #8]
 8001bc4:	60da      	str	r2, [r3, #12]
 8001bc6:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM2)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bd0:	d152      	bne.n	8001c78 <HAL_TIM_IC_MspInit+0xc8>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	613b      	str	r3, [r7, #16]
 8001bd6:	4b2a      	ldr	r3, [pc, #168]	; (8001c80 <HAL_TIM_IC_MspInit+0xd0>)
 8001bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bda:	4a29      	ldr	r2, [pc, #164]	; (8001c80 <HAL_TIM_IC_MspInit+0xd0>)
 8001bdc:	f043 0301 	orr.w	r3, r3, #1
 8001be0:	6413      	str	r3, [r2, #64]	; 0x40
 8001be2:	4b27      	ldr	r3, [pc, #156]	; (8001c80 <HAL_TIM_IC_MspInit+0xd0>)
 8001be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be6:	f003 0301 	and.w	r3, r3, #1
 8001bea:	613b      	str	r3, [r7, #16]
 8001bec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bee:	2300      	movs	r3, #0
 8001bf0:	60fb      	str	r3, [r7, #12]
 8001bf2:	4b23      	ldr	r3, [pc, #140]	; (8001c80 <HAL_TIM_IC_MspInit+0xd0>)
 8001bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bf6:	4a22      	ldr	r2, [pc, #136]	; (8001c80 <HAL_TIM_IC_MspInit+0xd0>)
 8001bf8:	f043 0301 	orr.w	r3, r3, #1
 8001bfc:	6313      	str	r3, [r2, #48]	; 0x30
 8001bfe:	4b20      	ldr	r3, [pc, #128]	; (8001c80 <HAL_TIM_IC_MspInit+0xd0>)
 8001c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c02:	f003 0301 	and.w	r3, r3, #1
 8001c06:	60fb      	str	r3, [r7, #12]
 8001c08:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	60bb      	str	r3, [r7, #8]
 8001c0e:	4b1c      	ldr	r3, [pc, #112]	; (8001c80 <HAL_TIM_IC_MspInit+0xd0>)
 8001c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c12:	4a1b      	ldr	r2, [pc, #108]	; (8001c80 <HAL_TIM_IC_MspInit+0xd0>)
 8001c14:	f043 0302 	orr.w	r3, r3, #2
 8001c18:	6313      	str	r3, [r2, #48]	; 0x30
 8001c1a:	4b19      	ldr	r3, [pc, #100]	; (8001c80 <HAL_TIM_IC_MspInit+0xd0>)
 8001c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c1e:	f003 0302 	and.w	r3, r3, #2
 8001c22:	60bb      	str	r3, [r7, #8]
 8001c24:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001c26:	2301      	movs	r3, #1
 8001c28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c2a:	2302      	movs	r3, #2
 8001c2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c32:	2300      	movs	r3, #0
 8001c34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001c36:	2301      	movs	r3, #1
 8001c38:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c3a:	f107 0314 	add.w	r3, r7, #20
 8001c3e:	4619      	mov	r1, r3
 8001c40:	4810      	ldr	r0, [pc, #64]	; (8001c84 <HAL_TIM_IC_MspInit+0xd4>)
 8001c42:	f000 ffad 	bl	8002ba0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001c46:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c4c:	2302      	movs	r3, #2
 8001c4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c50:	2300      	movs	r3, #0
 8001c52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c54:	2300      	movs	r3, #0
 8001c56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001c58:	2301      	movs	r3, #1
 8001c5a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c5c:	f107 0314 	add.w	r3, r7, #20
 8001c60:	4619      	mov	r1, r3
 8001c62:	4809      	ldr	r0, [pc, #36]	; (8001c88 <HAL_TIM_IC_MspInit+0xd8>)
 8001c64:	f000 ff9c 	bl	8002ba0 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001c68:	2200      	movs	r2, #0
 8001c6a:	2100      	movs	r1, #0
 8001c6c:	201c      	movs	r0, #28
 8001c6e:	f000 fe6e 	bl	800294e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001c72:	201c      	movs	r0, #28
 8001c74:	f000 fe87 	bl	8002986 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001c78:	bf00      	nop
 8001c7a:	3728      	adds	r7, #40	; 0x28
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bd80      	pop	{r7, pc}
 8001c80:	40023800 	.word	0x40023800
 8001c84:	40020000 	.word	0x40020000
 8001c88:	40020400 	.word	0x40020400

08001c8c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b08a      	sub	sp, #40	; 0x28
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c94:	f107 0314 	add.w	r3, r7, #20
 8001c98:	2200      	movs	r2, #0
 8001c9a:	601a      	str	r2, [r3, #0]
 8001c9c:	605a      	str	r2, [r3, #4]
 8001c9e:	609a      	str	r2, [r3, #8]
 8001ca0:	60da      	str	r2, [r3, #12]
 8001ca2:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM5)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4a1d      	ldr	r2, [pc, #116]	; (8001d20 <HAL_TIM_Base_MspInit+0x94>)
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d133      	bne.n	8001d16 <HAL_TIM_Base_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001cae:	2300      	movs	r3, #0
 8001cb0:	613b      	str	r3, [r7, #16]
 8001cb2:	4b1c      	ldr	r3, [pc, #112]	; (8001d24 <HAL_TIM_Base_MspInit+0x98>)
 8001cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cb6:	4a1b      	ldr	r2, [pc, #108]	; (8001d24 <HAL_TIM_Base_MspInit+0x98>)
 8001cb8:	f043 0308 	orr.w	r3, r3, #8
 8001cbc:	6413      	str	r3, [r2, #64]	; 0x40
 8001cbe:	4b19      	ldr	r3, [pc, #100]	; (8001d24 <HAL_TIM_Base_MspInit+0x98>)
 8001cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc2:	f003 0308 	and.w	r3, r3, #8
 8001cc6:	613b      	str	r3, [r7, #16]
 8001cc8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cca:	2300      	movs	r3, #0
 8001ccc:	60fb      	str	r3, [r7, #12]
 8001cce:	4b15      	ldr	r3, [pc, #84]	; (8001d24 <HAL_TIM_Base_MspInit+0x98>)
 8001cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cd2:	4a14      	ldr	r2, [pc, #80]	; (8001d24 <HAL_TIM_Base_MspInit+0x98>)
 8001cd4:	f043 0301 	orr.w	r3, r3, #1
 8001cd8:	6313      	str	r3, [r2, #48]	; 0x30
 8001cda:	4b12      	ldr	r3, [pc, #72]	; (8001d24 <HAL_TIM_Base_MspInit+0x98>)
 8001cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cde:	f003 0301 	and.w	r3, r3, #1
 8001ce2:	60fb      	str	r3, [r7, #12]
 8001ce4:	68fb      	ldr	r3, [r7, #12]
    /**TIM5 GPIO Configuration
    PA1     ------> TIM5_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001ce6:	2302      	movs	r3, #2
 8001ce8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cea:	2302      	movs	r3, #2
 8001cec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001cf6:	2302      	movs	r3, #2
 8001cf8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cfa:	f107 0314 	add.w	r3, r7, #20
 8001cfe:	4619      	mov	r1, r3
 8001d00:	4809      	ldr	r0, [pc, #36]	; (8001d28 <HAL_TIM_Base_MspInit+0x9c>)
 8001d02:	f000 ff4d 	bl	8002ba0 <HAL_GPIO_Init>

    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8001d06:	2200      	movs	r2, #0
 8001d08:	2100      	movs	r1, #0
 8001d0a:	2032      	movs	r0, #50	; 0x32
 8001d0c:	f000 fe1f 	bl	800294e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001d10:	2032      	movs	r0, #50	; 0x32
 8001d12:	f000 fe38 	bl	8002986 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8001d16:	bf00      	nop
 8001d18:	3728      	adds	r7, #40	; 0x28
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	40000c00 	.word	0x40000c00
 8001d24:	40023800 	.word	0x40023800
 8001d28:	40020000 	.word	0x40020000

08001d2c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b08a      	sub	sp, #40	; 0x28
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d34:	f107 0314 	add.w	r3, r7, #20
 8001d38:	2200      	movs	r2, #0
 8001d3a:	601a      	str	r2, [r3, #0]
 8001d3c:	605a      	str	r2, [r3, #4]
 8001d3e:	609a      	str	r2, [r3, #8]
 8001d40:	60da      	str	r2, [r3, #12]
 8001d42:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4a19      	ldr	r2, [pc, #100]	; (8001db0 <HAL_UART_MspInit+0x84>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d12b      	bne.n	8001da6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001d4e:	2300      	movs	r3, #0
 8001d50:	613b      	str	r3, [r7, #16]
 8001d52:	4b18      	ldr	r3, [pc, #96]	; (8001db4 <HAL_UART_MspInit+0x88>)
 8001d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d56:	4a17      	ldr	r2, [pc, #92]	; (8001db4 <HAL_UART_MspInit+0x88>)
 8001d58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d5c:	6413      	str	r3, [r2, #64]	; 0x40
 8001d5e:	4b15      	ldr	r3, [pc, #84]	; (8001db4 <HAL_UART_MspInit+0x88>)
 8001d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d66:	613b      	str	r3, [r7, #16]
 8001d68:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	60fb      	str	r3, [r7, #12]
 8001d6e:	4b11      	ldr	r3, [pc, #68]	; (8001db4 <HAL_UART_MspInit+0x88>)
 8001d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d72:	4a10      	ldr	r2, [pc, #64]	; (8001db4 <HAL_UART_MspInit+0x88>)
 8001d74:	f043 0301 	orr.w	r3, r3, #1
 8001d78:	6313      	str	r3, [r2, #48]	; 0x30
 8001d7a:	4b0e      	ldr	r3, [pc, #56]	; (8001db4 <HAL_UART_MspInit+0x88>)
 8001d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d7e:	f003 0301 	and.w	r3, r3, #1
 8001d82:	60fb      	str	r3, [r7, #12]
 8001d84:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001d86:	230c      	movs	r3, #12
 8001d88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d8a:	2302      	movs	r3, #2
 8001d8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d92:	2303      	movs	r3, #3
 8001d94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001d96:	2307      	movs	r3, #7
 8001d98:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d9a:	f107 0314 	add.w	r3, r7, #20
 8001d9e:	4619      	mov	r1, r3
 8001da0:	4805      	ldr	r0, [pc, #20]	; (8001db8 <HAL_UART_MspInit+0x8c>)
 8001da2:	f000 fefd 	bl	8002ba0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001da6:	bf00      	nop
 8001da8:	3728      	adds	r7, #40	; 0x28
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}
 8001dae:	bf00      	nop
 8001db0:	40004400 	.word	0x40004400
 8001db4:	40023800 	.word	0x40023800
 8001db8:	40020000 	.word	0x40020000

08001dbc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001dc0:	e7fe      	b.n	8001dc0 <NMI_Handler+0x4>

08001dc2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001dc2:	b480      	push	{r7}
 8001dc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001dc6:	e7fe      	b.n	8001dc6 <HardFault_Handler+0x4>

08001dc8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001dcc:	e7fe      	b.n	8001dcc <MemManage_Handler+0x4>

08001dce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001dce:	b480      	push	{r7}
 8001dd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001dd2:	e7fe      	b.n	8001dd2 <BusFault_Handler+0x4>

08001dd4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001dd8:	e7fe      	b.n	8001dd8 <UsageFault_Handler+0x4>

08001dda <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001dda:	b480      	push	{r7}
 8001ddc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001dde:	bf00      	nop
 8001de0:	46bd      	mov	sp, r7
 8001de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de6:	4770      	bx	lr

08001de8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001de8:	b480      	push	{r7}
 8001dea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001dec:	bf00      	nop
 8001dee:	46bd      	mov	sp, r7
 8001df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df4:	4770      	bx	lr

08001df6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001df6:	b480      	push	{r7}
 8001df8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001dfa:	bf00      	nop
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e02:	4770      	bx	lr

08001e04 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e08:	f000 f962 	bl	80020d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e0c:	bf00      	nop
 8001e0e:	bd80      	pop	{r7, pc}

08001e10 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001e14:	4802      	ldr	r0, [pc, #8]	; (8001e20 <TIM2_IRQHandler+0x10>)
 8001e16:	f003 ff3d 	bl	8005c94 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001e1a:	bf00      	nop
 8001e1c:	bd80      	pop	{r7, pc}
 8001e1e:	bf00      	nop
 8001e20:	20000338 	.word	0x20000338

08001e24 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001e28:	4802      	ldr	r0, [pc, #8]	; (8001e34 <I2C1_EV_IRQHandler+0x10>)
 8001e2a:	f001 faad 	bl	8003388 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001e2e:	bf00      	nop
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	bf00      	nop
 8001e34:	200002e4 	.word	0x200002e4

08001e38 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001e3c:	4802      	ldr	r0, [pc, #8]	; (8001e48 <I2C1_ER_IRQHandler+0x10>)
 8001e3e:	f001 fc14 	bl	800366a <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001e42:	bf00      	nop
 8001e44:	bd80      	pop	{r7, pc}
 8001e46:	bf00      	nop
 8001e48:	200002e4 	.word	0x200002e4

08001e4c <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001e50:	4802      	ldr	r0, [pc, #8]	; (8001e5c <TIM5_IRQHandler+0x10>)
 8001e52:	f003 ff1f 	bl	8005c94 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8001e56:	bf00      	nop
 8001e58:	bd80      	pop	{r7, pc}
 8001e5a:	bf00      	nop
 8001e5c:	20000380 	.word	0x20000380

08001e60 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001e60:	b480      	push	{r7}
 8001e62:	af00      	add	r7, sp, #0
	return 1;
 8001e64:	2301      	movs	r3, #1
}
 8001e66:	4618      	mov	r0, r3
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6e:	4770      	bx	lr

08001e70 <_kill>:

int _kill(int pid, int sig)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b082      	sub	sp, #8
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
 8001e78:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001e7a:	f005 f8bf 	bl	8006ffc <__errno>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	2216      	movs	r2, #22
 8001e82:	601a      	str	r2, [r3, #0]
	return -1;
 8001e84:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e88:	4618      	mov	r0, r3
 8001e8a:	3708      	adds	r7, #8
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bd80      	pop	{r7, pc}

08001e90 <_exit>:

void _exit (int status)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b082      	sub	sp, #8
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001e98:	f04f 31ff 	mov.w	r1, #4294967295
 8001e9c:	6878      	ldr	r0, [r7, #4]
 8001e9e:	f7ff ffe7 	bl	8001e70 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001ea2:	e7fe      	b.n	8001ea2 <_exit+0x12>

08001ea4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b086      	sub	sp, #24
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	60f8      	str	r0, [r7, #12]
 8001eac:	60b9      	str	r1, [r7, #8]
 8001eae:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	617b      	str	r3, [r7, #20]
 8001eb4:	e00a      	b.n	8001ecc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001eb6:	f3af 8000 	nop.w
 8001eba:	4601      	mov	r1, r0
 8001ebc:	68bb      	ldr	r3, [r7, #8]
 8001ebe:	1c5a      	adds	r2, r3, #1
 8001ec0:	60ba      	str	r2, [r7, #8]
 8001ec2:	b2ca      	uxtb	r2, r1
 8001ec4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ec6:	697b      	ldr	r3, [r7, #20]
 8001ec8:	3301      	adds	r3, #1
 8001eca:	617b      	str	r3, [r7, #20]
 8001ecc:	697a      	ldr	r2, [r7, #20]
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	429a      	cmp	r2, r3
 8001ed2:	dbf0      	blt.n	8001eb6 <_read+0x12>
	}

return len;
 8001ed4:	687b      	ldr	r3, [r7, #4]
}
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	3718      	adds	r7, #24
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}

08001ede <_close>:
	}
	return len;
}

int _close(int file)
{
 8001ede:	b480      	push	{r7}
 8001ee0:	b083      	sub	sp, #12
 8001ee2:	af00      	add	r7, sp, #0
 8001ee4:	6078      	str	r0, [r7, #4]
	return -1;
 8001ee6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001eea:	4618      	mov	r0, r3
 8001eec:	370c      	adds	r7, #12
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef4:	4770      	bx	lr

08001ef6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ef6:	b480      	push	{r7}
 8001ef8:	b083      	sub	sp, #12
 8001efa:	af00      	add	r7, sp, #0
 8001efc:	6078      	str	r0, [r7, #4]
 8001efe:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001f06:	605a      	str	r2, [r3, #4]
	return 0;
 8001f08:	2300      	movs	r3, #0
}
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	370c      	adds	r7, #12
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f14:	4770      	bx	lr

08001f16 <_isatty>:

int _isatty(int file)
{
 8001f16:	b480      	push	{r7}
 8001f18:	b083      	sub	sp, #12
 8001f1a:	af00      	add	r7, sp, #0
 8001f1c:	6078      	str	r0, [r7, #4]
	return 1;
 8001f1e:	2301      	movs	r3, #1
}
 8001f20:	4618      	mov	r0, r3
 8001f22:	370c      	adds	r7, #12
 8001f24:	46bd      	mov	sp, r7
 8001f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2a:	4770      	bx	lr

08001f2c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b085      	sub	sp, #20
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	60f8      	str	r0, [r7, #12]
 8001f34:	60b9      	str	r1, [r7, #8]
 8001f36:	607a      	str	r2, [r7, #4]
	return 0;
 8001f38:	2300      	movs	r3, #0
}
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	3714      	adds	r7, #20
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f44:	4770      	bx	lr
	...

08001f48 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b086      	sub	sp, #24
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f50:	4a14      	ldr	r2, [pc, #80]	; (8001fa4 <_sbrk+0x5c>)
 8001f52:	4b15      	ldr	r3, [pc, #84]	; (8001fa8 <_sbrk+0x60>)
 8001f54:	1ad3      	subs	r3, r2, r3
 8001f56:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f58:	697b      	ldr	r3, [r7, #20]
 8001f5a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f5c:	4b13      	ldr	r3, [pc, #76]	; (8001fac <_sbrk+0x64>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d102      	bne.n	8001f6a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f64:	4b11      	ldr	r3, [pc, #68]	; (8001fac <_sbrk+0x64>)
 8001f66:	4a12      	ldr	r2, [pc, #72]	; (8001fb0 <_sbrk+0x68>)
 8001f68:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f6a:	4b10      	ldr	r3, [pc, #64]	; (8001fac <_sbrk+0x64>)
 8001f6c:	681a      	ldr	r2, [r3, #0]
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	4413      	add	r3, r2
 8001f72:	693a      	ldr	r2, [r7, #16]
 8001f74:	429a      	cmp	r2, r3
 8001f76:	d207      	bcs.n	8001f88 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f78:	f005 f840 	bl	8006ffc <__errno>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	220c      	movs	r2, #12
 8001f80:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f82:	f04f 33ff 	mov.w	r3, #4294967295
 8001f86:	e009      	b.n	8001f9c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f88:	4b08      	ldr	r3, [pc, #32]	; (8001fac <_sbrk+0x64>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f8e:	4b07      	ldr	r3, [pc, #28]	; (8001fac <_sbrk+0x64>)
 8001f90:	681a      	ldr	r2, [r3, #0]
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	4413      	add	r3, r2
 8001f96:	4a05      	ldr	r2, [pc, #20]	; (8001fac <_sbrk+0x64>)
 8001f98:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f9a:	68fb      	ldr	r3, [r7, #12]
}
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	3718      	adds	r7, #24
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bd80      	pop	{r7, pc}
 8001fa4:	20020000 	.word	0x20020000
 8001fa8:	00000400 	.word	0x00000400
 8001fac:	2000046c 	.word	0x2000046c
 8001fb0:	20000488 	.word	0x20000488

08001fb4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001fb8:	4b06      	ldr	r3, [pc, #24]	; (8001fd4 <SystemInit+0x20>)
 8001fba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fbe:	4a05      	ldr	r2, [pc, #20]	; (8001fd4 <SystemInit+0x20>)
 8001fc0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001fc4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001fc8:	bf00      	nop
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd0:	4770      	bx	lr
 8001fd2:	bf00      	nop
 8001fd4:	e000ed00 	.word	0xe000ed00

08001fd8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001fd8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002010 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001fdc:	480d      	ldr	r0, [pc, #52]	; (8002014 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001fde:	490e      	ldr	r1, [pc, #56]	; (8002018 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001fe0:	4a0e      	ldr	r2, [pc, #56]	; (800201c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001fe2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001fe4:	e002      	b.n	8001fec <LoopCopyDataInit>

08001fe6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001fe6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001fe8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001fea:	3304      	adds	r3, #4

08001fec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001fec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001fee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ff0:	d3f9      	bcc.n	8001fe6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ff2:	4a0b      	ldr	r2, [pc, #44]	; (8002020 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001ff4:	4c0b      	ldr	r4, [pc, #44]	; (8002024 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001ff6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ff8:	e001      	b.n	8001ffe <LoopFillZerobss>

08001ffa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ffa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ffc:	3204      	adds	r2, #4

08001ffe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ffe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002000:	d3fb      	bcc.n	8001ffa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002002:	f7ff ffd7 	bl	8001fb4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002006:	f004 ffff 	bl	8007008 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800200a:	f7fe ff6f 	bl	8000eec <main>
  bx  lr    
 800200e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002010:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002014:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002018:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 800201c:	08009fb4 	.word	0x08009fb4
  ldr r2, =_sbss
 8002020:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8002024:	20000484 	.word	0x20000484

08002028 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002028:	e7fe      	b.n	8002028 <ADC_IRQHandler>
	...

0800202c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002030:	4b0e      	ldr	r3, [pc, #56]	; (800206c <HAL_Init+0x40>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4a0d      	ldr	r2, [pc, #52]	; (800206c <HAL_Init+0x40>)
 8002036:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800203a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800203c:	4b0b      	ldr	r3, [pc, #44]	; (800206c <HAL_Init+0x40>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4a0a      	ldr	r2, [pc, #40]	; (800206c <HAL_Init+0x40>)
 8002042:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002046:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002048:	4b08      	ldr	r3, [pc, #32]	; (800206c <HAL_Init+0x40>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4a07      	ldr	r2, [pc, #28]	; (800206c <HAL_Init+0x40>)
 800204e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002052:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002054:	2003      	movs	r0, #3
 8002056:	f000 fc6f 	bl	8002938 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800205a:	200f      	movs	r0, #15
 800205c:	f000 f808 	bl	8002070 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002060:	f7ff fc22 	bl	80018a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002064:	2300      	movs	r3, #0
}
 8002066:	4618      	mov	r0, r3
 8002068:	bd80      	pop	{r7, pc}
 800206a:	bf00      	nop
 800206c:	40023c00 	.word	0x40023c00

08002070 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b082      	sub	sp, #8
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002078:	4b12      	ldr	r3, [pc, #72]	; (80020c4 <HAL_InitTick+0x54>)
 800207a:	681a      	ldr	r2, [r3, #0]
 800207c:	4b12      	ldr	r3, [pc, #72]	; (80020c8 <HAL_InitTick+0x58>)
 800207e:	781b      	ldrb	r3, [r3, #0]
 8002080:	4619      	mov	r1, r3
 8002082:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002086:	fbb3 f3f1 	udiv	r3, r3, r1
 800208a:	fbb2 f3f3 	udiv	r3, r2, r3
 800208e:	4618      	mov	r0, r3
 8002090:	f000 fc87 	bl	80029a2 <HAL_SYSTICK_Config>
 8002094:	4603      	mov	r3, r0
 8002096:	2b00      	cmp	r3, #0
 8002098:	d001      	beq.n	800209e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800209a:	2301      	movs	r3, #1
 800209c:	e00e      	b.n	80020bc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2b0f      	cmp	r3, #15
 80020a2:	d80a      	bhi.n	80020ba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80020a4:	2200      	movs	r2, #0
 80020a6:	6879      	ldr	r1, [r7, #4]
 80020a8:	f04f 30ff 	mov.w	r0, #4294967295
 80020ac:	f000 fc4f 	bl	800294e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80020b0:	4a06      	ldr	r2, [pc, #24]	; (80020cc <HAL_InitTick+0x5c>)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80020b6:	2300      	movs	r3, #0
 80020b8:	e000      	b.n	80020bc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80020ba:	2301      	movs	r3, #1
}
 80020bc:	4618      	mov	r0, r3
 80020be:	3708      	adds	r7, #8
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bd80      	pop	{r7, pc}
 80020c4:	20000000 	.word	0x20000000
 80020c8:	20000008 	.word	0x20000008
 80020cc:	20000004 	.word	0x20000004

080020d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020d0:	b480      	push	{r7}
 80020d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80020d4:	4b06      	ldr	r3, [pc, #24]	; (80020f0 <HAL_IncTick+0x20>)
 80020d6:	781b      	ldrb	r3, [r3, #0]
 80020d8:	461a      	mov	r2, r3
 80020da:	4b06      	ldr	r3, [pc, #24]	; (80020f4 <HAL_IncTick+0x24>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4413      	add	r3, r2
 80020e0:	4a04      	ldr	r2, [pc, #16]	; (80020f4 <HAL_IncTick+0x24>)
 80020e2:	6013      	str	r3, [r2, #0]
}
 80020e4:	bf00      	nop
 80020e6:	46bd      	mov	sp, r7
 80020e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ec:	4770      	bx	lr
 80020ee:	bf00      	nop
 80020f0:	20000008 	.word	0x20000008
 80020f4:	20000470 	.word	0x20000470

080020f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020f8:	b480      	push	{r7}
 80020fa:	af00      	add	r7, sp, #0
  return uwTick;
 80020fc:	4b03      	ldr	r3, [pc, #12]	; (800210c <HAL_GetTick+0x14>)
 80020fe:	681b      	ldr	r3, [r3, #0]
}
 8002100:	4618      	mov	r0, r3
 8002102:	46bd      	mov	sp, r7
 8002104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002108:	4770      	bx	lr
 800210a:	bf00      	nop
 800210c:	20000470 	.word	0x20000470

08002110 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b084      	sub	sp, #16
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002118:	2300      	movs	r3, #0
 800211a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d101      	bne.n	8002126 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002122:	2301      	movs	r3, #1
 8002124:	e033      	b.n	800218e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800212a:	2b00      	cmp	r3, #0
 800212c:	d109      	bne.n	8002142 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800212e:	6878      	ldr	r0, [r7, #4]
 8002130:	f7ff fbe2 	bl	80018f8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2200      	movs	r2, #0
 8002138:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2200      	movs	r2, #0
 800213e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002146:	f003 0310 	and.w	r3, r3, #16
 800214a:	2b00      	cmp	r3, #0
 800214c:	d118      	bne.n	8002180 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002152:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002156:	f023 0302 	bic.w	r3, r3, #2
 800215a:	f043 0202 	orr.w	r2, r3, #2
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002162:	6878      	ldr	r0, [r7, #4]
 8002164:	f000 fa1c 	bl	80025a0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2200      	movs	r2, #0
 800216c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002172:	f023 0303 	bic.w	r3, r3, #3
 8002176:	f043 0201 	orr.w	r2, r3, #1
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	641a      	str	r2, [r3, #64]	; 0x40
 800217e:	e001      	b.n	8002184 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002180:	2301      	movs	r3, #1
 8002182:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2200      	movs	r2, #0
 8002188:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800218c:	7bfb      	ldrb	r3, [r7, #15]
}
 800218e:	4618      	mov	r0, r3
 8002190:	3710      	adds	r7, #16
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}
	...

08002198 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002198:	b480      	push	{r7}
 800219a:	b085      	sub	sp, #20
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80021a0:	2300      	movs	r3, #0
 80021a2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021aa:	2b01      	cmp	r3, #1
 80021ac:	d101      	bne.n	80021b2 <HAL_ADC_Start+0x1a>
 80021ae:	2302      	movs	r3, #2
 80021b0:	e0b2      	b.n	8002318 <HAL_ADC_Start+0x180>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2201      	movs	r2, #1
 80021b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	689b      	ldr	r3, [r3, #8]
 80021c0:	f003 0301 	and.w	r3, r3, #1
 80021c4:	2b01      	cmp	r3, #1
 80021c6:	d018      	beq.n	80021fa <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	689a      	ldr	r2, [r3, #8]
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f042 0201 	orr.w	r2, r2, #1
 80021d6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80021d8:	4b52      	ldr	r3, [pc, #328]	; (8002324 <HAL_ADC_Start+0x18c>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4a52      	ldr	r2, [pc, #328]	; (8002328 <HAL_ADC_Start+0x190>)
 80021de:	fba2 2303 	umull	r2, r3, r2, r3
 80021e2:	0c9a      	lsrs	r2, r3, #18
 80021e4:	4613      	mov	r3, r2
 80021e6:	005b      	lsls	r3, r3, #1
 80021e8:	4413      	add	r3, r2
 80021ea:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80021ec:	e002      	b.n	80021f4 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80021ee:	68bb      	ldr	r3, [r7, #8]
 80021f0:	3b01      	subs	r3, #1
 80021f2:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80021f4:	68bb      	ldr	r3, [r7, #8]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d1f9      	bne.n	80021ee <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	689b      	ldr	r3, [r3, #8]
 8002200:	f003 0301 	and.w	r3, r3, #1
 8002204:	2b01      	cmp	r3, #1
 8002206:	d17a      	bne.n	80022fe <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800220c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002210:	f023 0301 	bic.w	r3, r3, #1
 8002214:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002226:	2b00      	cmp	r3, #0
 8002228:	d007      	beq.n	800223a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800222e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002232:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800223e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002242:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002246:	d106      	bne.n	8002256 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800224c:	f023 0206 	bic.w	r2, r3, #6
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	645a      	str	r2, [r3, #68]	; 0x44
 8002254:	e002      	b.n	800225c <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2200      	movs	r2, #0
 800225a:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2200      	movs	r2, #0
 8002260:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002264:	4b31      	ldr	r3, [pc, #196]	; (800232c <HAL_ADC_Start+0x194>)
 8002266:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002270:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	f003 031f 	and.w	r3, r3, #31
 800227a:	2b00      	cmp	r3, #0
 800227c:	d12a      	bne.n	80022d4 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4a2b      	ldr	r2, [pc, #172]	; (8002330 <HAL_ADC_Start+0x198>)
 8002284:	4293      	cmp	r3, r2
 8002286:	d015      	beq.n	80022b4 <HAL_ADC_Start+0x11c>
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4a29      	ldr	r2, [pc, #164]	; (8002334 <HAL_ADC_Start+0x19c>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d105      	bne.n	800229e <HAL_ADC_Start+0x106>
 8002292:	4b26      	ldr	r3, [pc, #152]	; (800232c <HAL_ADC_Start+0x194>)
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	f003 031f 	and.w	r3, r3, #31
 800229a:	2b00      	cmp	r3, #0
 800229c:	d00a      	beq.n	80022b4 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4a25      	ldr	r2, [pc, #148]	; (8002338 <HAL_ADC_Start+0x1a0>)
 80022a4:	4293      	cmp	r3, r2
 80022a6:	d136      	bne.n	8002316 <HAL_ADC_Start+0x17e>
 80022a8:	4b20      	ldr	r3, [pc, #128]	; (800232c <HAL_ADC_Start+0x194>)
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	f003 0310 	and.w	r3, r3, #16
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d130      	bne.n	8002316 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	689b      	ldr	r3, [r3, #8]
 80022ba:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d129      	bne.n	8002316 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	689a      	ldr	r2, [r3, #8]
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80022d0:	609a      	str	r2, [r3, #8]
 80022d2:	e020      	b.n	8002316 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4a15      	ldr	r2, [pc, #84]	; (8002330 <HAL_ADC_Start+0x198>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d11b      	bne.n	8002316 <HAL_ADC_Start+0x17e>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	689b      	ldr	r3, [r3, #8]
 80022e4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d114      	bne.n	8002316 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	689a      	ldr	r2, [r3, #8]
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80022fa:	609a      	str	r2, [r3, #8]
 80022fc:	e00b      	b.n	8002316 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002302:	f043 0210 	orr.w	r2, r3, #16
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800230e:	f043 0201 	orr.w	r2, r3, #1
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002316:	2300      	movs	r3, #0
}
 8002318:	4618      	mov	r0, r3
 800231a:	3714      	adds	r7, #20
 800231c:	46bd      	mov	sp, r7
 800231e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002322:	4770      	bx	lr
 8002324:	20000000 	.word	0x20000000
 8002328:	431bde83 	.word	0x431bde83
 800232c:	40012300 	.word	0x40012300
 8002330:	40012000 	.word	0x40012000
 8002334:	40012100 	.word	0x40012100
 8002338:	40012200 	.word	0x40012200

0800233c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800233c:	b480      	push	{r7}
 800233e:	b085      	sub	sp, #20
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
 8002344:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002346:	2300      	movs	r3, #0
 8002348:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002350:	2b01      	cmp	r3, #1
 8002352:	d101      	bne.n	8002358 <HAL_ADC_ConfigChannel+0x1c>
 8002354:	2302      	movs	r3, #2
 8002356:	e113      	b.n	8002580 <HAL_ADC_ConfigChannel+0x244>
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2201      	movs	r2, #1
 800235c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	2b09      	cmp	r3, #9
 8002366:	d925      	bls.n	80023b4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	68d9      	ldr	r1, [r3, #12]
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	b29b      	uxth	r3, r3
 8002374:	461a      	mov	r2, r3
 8002376:	4613      	mov	r3, r2
 8002378:	005b      	lsls	r3, r3, #1
 800237a:	4413      	add	r3, r2
 800237c:	3b1e      	subs	r3, #30
 800237e:	2207      	movs	r2, #7
 8002380:	fa02 f303 	lsl.w	r3, r2, r3
 8002384:	43da      	mvns	r2, r3
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	400a      	ands	r2, r1
 800238c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	68d9      	ldr	r1, [r3, #12]
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	689a      	ldr	r2, [r3, #8]
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	b29b      	uxth	r3, r3
 800239e:	4618      	mov	r0, r3
 80023a0:	4603      	mov	r3, r0
 80023a2:	005b      	lsls	r3, r3, #1
 80023a4:	4403      	add	r3, r0
 80023a6:	3b1e      	subs	r3, #30
 80023a8:	409a      	lsls	r2, r3
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	430a      	orrs	r2, r1
 80023b0:	60da      	str	r2, [r3, #12]
 80023b2:	e022      	b.n	80023fa <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	6919      	ldr	r1, [r3, #16]
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	b29b      	uxth	r3, r3
 80023c0:	461a      	mov	r2, r3
 80023c2:	4613      	mov	r3, r2
 80023c4:	005b      	lsls	r3, r3, #1
 80023c6:	4413      	add	r3, r2
 80023c8:	2207      	movs	r2, #7
 80023ca:	fa02 f303 	lsl.w	r3, r2, r3
 80023ce:	43da      	mvns	r2, r3
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	400a      	ands	r2, r1
 80023d6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	6919      	ldr	r1, [r3, #16]
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	689a      	ldr	r2, [r3, #8]
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	b29b      	uxth	r3, r3
 80023e8:	4618      	mov	r0, r3
 80023ea:	4603      	mov	r3, r0
 80023ec:	005b      	lsls	r3, r3, #1
 80023ee:	4403      	add	r3, r0
 80023f0:	409a      	lsls	r2, r3
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	430a      	orrs	r2, r1
 80023f8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	2b06      	cmp	r3, #6
 8002400:	d824      	bhi.n	800244c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	685a      	ldr	r2, [r3, #4]
 800240c:	4613      	mov	r3, r2
 800240e:	009b      	lsls	r3, r3, #2
 8002410:	4413      	add	r3, r2
 8002412:	3b05      	subs	r3, #5
 8002414:	221f      	movs	r2, #31
 8002416:	fa02 f303 	lsl.w	r3, r2, r3
 800241a:	43da      	mvns	r2, r3
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	400a      	ands	r2, r1
 8002422:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	b29b      	uxth	r3, r3
 8002430:	4618      	mov	r0, r3
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	685a      	ldr	r2, [r3, #4]
 8002436:	4613      	mov	r3, r2
 8002438:	009b      	lsls	r3, r3, #2
 800243a:	4413      	add	r3, r2
 800243c:	3b05      	subs	r3, #5
 800243e:	fa00 f203 	lsl.w	r2, r0, r3
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	430a      	orrs	r2, r1
 8002448:	635a      	str	r2, [r3, #52]	; 0x34
 800244a:	e04c      	b.n	80024e6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	2b0c      	cmp	r3, #12
 8002452:	d824      	bhi.n	800249e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	685a      	ldr	r2, [r3, #4]
 800245e:	4613      	mov	r3, r2
 8002460:	009b      	lsls	r3, r3, #2
 8002462:	4413      	add	r3, r2
 8002464:	3b23      	subs	r3, #35	; 0x23
 8002466:	221f      	movs	r2, #31
 8002468:	fa02 f303 	lsl.w	r3, r2, r3
 800246c:	43da      	mvns	r2, r3
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	400a      	ands	r2, r1
 8002474:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	b29b      	uxth	r3, r3
 8002482:	4618      	mov	r0, r3
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	685a      	ldr	r2, [r3, #4]
 8002488:	4613      	mov	r3, r2
 800248a:	009b      	lsls	r3, r3, #2
 800248c:	4413      	add	r3, r2
 800248e:	3b23      	subs	r3, #35	; 0x23
 8002490:	fa00 f203 	lsl.w	r2, r0, r3
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	430a      	orrs	r2, r1
 800249a:	631a      	str	r2, [r3, #48]	; 0x30
 800249c:	e023      	b.n	80024e6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	685a      	ldr	r2, [r3, #4]
 80024a8:	4613      	mov	r3, r2
 80024aa:	009b      	lsls	r3, r3, #2
 80024ac:	4413      	add	r3, r2
 80024ae:	3b41      	subs	r3, #65	; 0x41
 80024b0:	221f      	movs	r2, #31
 80024b2:	fa02 f303 	lsl.w	r3, r2, r3
 80024b6:	43da      	mvns	r2, r3
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	400a      	ands	r2, r1
 80024be:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	b29b      	uxth	r3, r3
 80024cc:	4618      	mov	r0, r3
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	685a      	ldr	r2, [r3, #4]
 80024d2:	4613      	mov	r3, r2
 80024d4:	009b      	lsls	r3, r3, #2
 80024d6:	4413      	add	r3, r2
 80024d8:	3b41      	subs	r3, #65	; 0x41
 80024da:	fa00 f203 	lsl.w	r2, r0, r3
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	430a      	orrs	r2, r1
 80024e4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80024e6:	4b29      	ldr	r3, [pc, #164]	; (800258c <HAL_ADC_ConfigChannel+0x250>)
 80024e8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4a28      	ldr	r2, [pc, #160]	; (8002590 <HAL_ADC_ConfigChannel+0x254>)
 80024f0:	4293      	cmp	r3, r2
 80024f2:	d10f      	bne.n	8002514 <HAL_ADC_ConfigChannel+0x1d8>
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	2b12      	cmp	r3, #18
 80024fa:	d10b      	bne.n	8002514 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4a1d      	ldr	r2, [pc, #116]	; (8002590 <HAL_ADC_ConfigChannel+0x254>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d12b      	bne.n	8002576 <HAL_ADC_ConfigChannel+0x23a>
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4a1c      	ldr	r2, [pc, #112]	; (8002594 <HAL_ADC_ConfigChannel+0x258>)
 8002524:	4293      	cmp	r3, r2
 8002526:	d003      	beq.n	8002530 <HAL_ADC_ConfigChannel+0x1f4>
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	2b11      	cmp	r3, #17
 800252e:	d122      	bne.n	8002576 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4a11      	ldr	r2, [pc, #68]	; (8002594 <HAL_ADC_ConfigChannel+0x258>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d111      	bne.n	8002576 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002552:	4b11      	ldr	r3, [pc, #68]	; (8002598 <HAL_ADC_ConfigChannel+0x25c>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4a11      	ldr	r2, [pc, #68]	; (800259c <HAL_ADC_ConfigChannel+0x260>)
 8002558:	fba2 2303 	umull	r2, r3, r2, r3
 800255c:	0c9a      	lsrs	r2, r3, #18
 800255e:	4613      	mov	r3, r2
 8002560:	009b      	lsls	r3, r3, #2
 8002562:	4413      	add	r3, r2
 8002564:	005b      	lsls	r3, r3, #1
 8002566:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002568:	e002      	b.n	8002570 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800256a:	68bb      	ldr	r3, [r7, #8]
 800256c:	3b01      	subs	r3, #1
 800256e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002570:	68bb      	ldr	r3, [r7, #8]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d1f9      	bne.n	800256a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2200      	movs	r2, #0
 800257a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800257e:	2300      	movs	r3, #0
}
 8002580:	4618      	mov	r0, r3
 8002582:	3714      	adds	r7, #20
 8002584:	46bd      	mov	sp, r7
 8002586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258a:	4770      	bx	lr
 800258c:	40012300 	.word	0x40012300
 8002590:	40012000 	.word	0x40012000
 8002594:	10000012 	.word	0x10000012
 8002598:	20000000 	.word	0x20000000
 800259c:	431bde83 	.word	0x431bde83

080025a0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80025a0:	b480      	push	{r7}
 80025a2:	b085      	sub	sp, #20
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80025a8:	4b79      	ldr	r3, [pc, #484]	; (8002790 <ADC_Init+0x1f0>)
 80025aa:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	685a      	ldr	r2, [r3, #4]
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	431a      	orrs	r2, r3
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	685a      	ldr	r2, [r3, #4]
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80025d4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	6859      	ldr	r1, [r3, #4]
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	691b      	ldr	r3, [r3, #16]
 80025e0:	021a      	lsls	r2, r3, #8
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	430a      	orrs	r2, r1
 80025e8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	685a      	ldr	r2, [r3, #4]
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80025f8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	6859      	ldr	r1, [r3, #4]
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	689a      	ldr	r2, [r3, #8]
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	430a      	orrs	r2, r1
 800260a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	689a      	ldr	r2, [r3, #8]
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800261a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	6899      	ldr	r1, [r3, #8]
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	68da      	ldr	r2, [r3, #12]
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	430a      	orrs	r2, r1
 800262c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002632:	4a58      	ldr	r2, [pc, #352]	; (8002794 <ADC_Init+0x1f4>)
 8002634:	4293      	cmp	r3, r2
 8002636:	d022      	beq.n	800267e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	689a      	ldr	r2, [r3, #8]
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002646:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	6899      	ldr	r1, [r3, #8]
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	430a      	orrs	r2, r1
 8002658:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	689a      	ldr	r2, [r3, #8]
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002668:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	6899      	ldr	r1, [r3, #8]
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	430a      	orrs	r2, r1
 800267a:	609a      	str	r2, [r3, #8]
 800267c:	e00f      	b.n	800269e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	689a      	ldr	r2, [r3, #8]
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800268c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	689a      	ldr	r2, [r3, #8]
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800269c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	689a      	ldr	r2, [r3, #8]
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f022 0202 	bic.w	r2, r2, #2
 80026ac:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	6899      	ldr	r1, [r3, #8]
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	7e1b      	ldrb	r3, [r3, #24]
 80026b8:	005a      	lsls	r2, r3, #1
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	430a      	orrs	r2, r1
 80026c0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d01b      	beq.n	8002704 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	685a      	ldr	r2, [r3, #4]
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80026da:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	685a      	ldr	r2, [r3, #4]
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80026ea:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	6859      	ldr	r1, [r3, #4]
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026f6:	3b01      	subs	r3, #1
 80026f8:	035a      	lsls	r2, r3, #13
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	430a      	orrs	r2, r1
 8002700:	605a      	str	r2, [r3, #4]
 8002702:	e007      	b.n	8002714 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	685a      	ldr	r2, [r3, #4]
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002712:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002722:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	69db      	ldr	r3, [r3, #28]
 800272e:	3b01      	subs	r3, #1
 8002730:	051a      	lsls	r2, r3, #20
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	430a      	orrs	r2, r1
 8002738:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	689a      	ldr	r2, [r3, #8]
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002748:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	6899      	ldr	r1, [r3, #8]
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002756:	025a      	lsls	r2, r3, #9
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	430a      	orrs	r2, r1
 800275e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	689a      	ldr	r2, [r3, #8]
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800276e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	6899      	ldr	r1, [r3, #8]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	695b      	ldr	r3, [r3, #20]
 800277a:	029a      	lsls	r2, r3, #10
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	430a      	orrs	r2, r1
 8002782:	609a      	str	r2, [r3, #8]
}
 8002784:	bf00      	nop
 8002786:	3714      	adds	r7, #20
 8002788:	46bd      	mov	sp, r7
 800278a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278e:	4770      	bx	lr
 8002790:	40012300 	.word	0x40012300
 8002794:	0f000001 	.word	0x0f000001

08002798 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002798:	b480      	push	{r7}
 800279a:	b085      	sub	sp, #20
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	f003 0307 	and.w	r3, r3, #7
 80027a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80027a8:	4b0c      	ldr	r3, [pc, #48]	; (80027dc <__NVIC_SetPriorityGrouping+0x44>)
 80027aa:	68db      	ldr	r3, [r3, #12]
 80027ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80027ae:	68ba      	ldr	r2, [r7, #8]
 80027b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80027b4:	4013      	ands	r3, r2
 80027b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80027bc:	68bb      	ldr	r3, [r7, #8]
 80027be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80027c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80027c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80027ca:	4a04      	ldr	r2, [pc, #16]	; (80027dc <__NVIC_SetPriorityGrouping+0x44>)
 80027cc:	68bb      	ldr	r3, [r7, #8]
 80027ce:	60d3      	str	r3, [r2, #12]
}
 80027d0:	bf00      	nop
 80027d2:	3714      	adds	r7, #20
 80027d4:	46bd      	mov	sp, r7
 80027d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027da:	4770      	bx	lr
 80027dc:	e000ed00 	.word	0xe000ed00

080027e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80027e0:	b480      	push	{r7}
 80027e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80027e4:	4b04      	ldr	r3, [pc, #16]	; (80027f8 <__NVIC_GetPriorityGrouping+0x18>)
 80027e6:	68db      	ldr	r3, [r3, #12]
 80027e8:	0a1b      	lsrs	r3, r3, #8
 80027ea:	f003 0307 	and.w	r3, r3, #7
}
 80027ee:	4618      	mov	r0, r3
 80027f0:	46bd      	mov	sp, r7
 80027f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f6:	4770      	bx	lr
 80027f8:	e000ed00 	.word	0xe000ed00

080027fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027fc:	b480      	push	{r7}
 80027fe:	b083      	sub	sp, #12
 8002800:	af00      	add	r7, sp, #0
 8002802:	4603      	mov	r3, r0
 8002804:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002806:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800280a:	2b00      	cmp	r3, #0
 800280c:	db0b      	blt.n	8002826 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800280e:	79fb      	ldrb	r3, [r7, #7]
 8002810:	f003 021f 	and.w	r2, r3, #31
 8002814:	4907      	ldr	r1, [pc, #28]	; (8002834 <__NVIC_EnableIRQ+0x38>)
 8002816:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800281a:	095b      	lsrs	r3, r3, #5
 800281c:	2001      	movs	r0, #1
 800281e:	fa00 f202 	lsl.w	r2, r0, r2
 8002822:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002826:	bf00      	nop
 8002828:	370c      	adds	r7, #12
 800282a:	46bd      	mov	sp, r7
 800282c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002830:	4770      	bx	lr
 8002832:	bf00      	nop
 8002834:	e000e100 	.word	0xe000e100

08002838 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002838:	b480      	push	{r7}
 800283a:	b083      	sub	sp, #12
 800283c:	af00      	add	r7, sp, #0
 800283e:	4603      	mov	r3, r0
 8002840:	6039      	str	r1, [r7, #0]
 8002842:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002844:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002848:	2b00      	cmp	r3, #0
 800284a:	db0a      	blt.n	8002862 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	b2da      	uxtb	r2, r3
 8002850:	490c      	ldr	r1, [pc, #48]	; (8002884 <__NVIC_SetPriority+0x4c>)
 8002852:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002856:	0112      	lsls	r2, r2, #4
 8002858:	b2d2      	uxtb	r2, r2
 800285a:	440b      	add	r3, r1
 800285c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002860:	e00a      	b.n	8002878 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	b2da      	uxtb	r2, r3
 8002866:	4908      	ldr	r1, [pc, #32]	; (8002888 <__NVIC_SetPriority+0x50>)
 8002868:	79fb      	ldrb	r3, [r7, #7]
 800286a:	f003 030f 	and.w	r3, r3, #15
 800286e:	3b04      	subs	r3, #4
 8002870:	0112      	lsls	r2, r2, #4
 8002872:	b2d2      	uxtb	r2, r2
 8002874:	440b      	add	r3, r1
 8002876:	761a      	strb	r2, [r3, #24]
}
 8002878:	bf00      	nop
 800287a:	370c      	adds	r7, #12
 800287c:	46bd      	mov	sp, r7
 800287e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002882:	4770      	bx	lr
 8002884:	e000e100 	.word	0xe000e100
 8002888:	e000ed00 	.word	0xe000ed00

0800288c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800288c:	b480      	push	{r7}
 800288e:	b089      	sub	sp, #36	; 0x24
 8002890:	af00      	add	r7, sp, #0
 8002892:	60f8      	str	r0, [r7, #12]
 8002894:	60b9      	str	r1, [r7, #8]
 8002896:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	f003 0307 	and.w	r3, r3, #7
 800289e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80028a0:	69fb      	ldr	r3, [r7, #28]
 80028a2:	f1c3 0307 	rsb	r3, r3, #7
 80028a6:	2b04      	cmp	r3, #4
 80028a8:	bf28      	it	cs
 80028aa:	2304      	movcs	r3, #4
 80028ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028ae:	69fb      	ldr	r3, [r7, #28]
 80028b0:	3304      	adds	r3, #4
 80028b2:	2b06      	cmp	r3, #6
 80028b4:	d902      	bls.n	80028bc <NVIC_EncodePriority+0x30>
 80028b6:	69fb      	ldr	r3, [r7, #28]
 80028b8:	3b03      	subs	r3, #3
 80028ba:	e000      	b.n	80028be <NVIC_EncodePriority+0x32>
 80028bc:	2300      	movs	r3, #0
 80028be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028c0:	f04f 32ff 	mov.w	r2, #4294967295
 80028c4:	69bb      	ldr	r3, [r7, #24]
 80028c6:	fa02 f303 	lsl.w	r3, r2, r3
 80028ca:	43da      	mvns	r2, r3
 80028cc:	68bb      	ldr	r3, [r7, #8]
 80028ce:	401a      	ands	r2, r3
 80028d0:	697b      	ldr	r3, [r7, #20]
 80028d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80028d4:	f04f 31ff 	mov.w	r1, #4294967295
 80028d8:	697b      	ldr	r3, [r7, #20]
 80028da:	fa01 f303 	lsl.w	r3, r1, r3
 80028de:	43d9      	mvns	r1, r3
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028e4:	4313      	orrs	r3, r2
         );
}
 80028e6:	4618      	mov	r0, r3
 80028e8:	3724      	adds	r7, #36	; 0x24
 80028ea:	46bd      	mov	sp, r7
 80028ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f0:	4770      	bx	lr
	...

080028f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b082      	sub	sp, #8
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	3b01      	subs	r3, #1
 8002900:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002904:	d301      	bcc.n	800290a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002906:	2301      	movs	r3, #1
 8002908:	e00f      	b.n	800292a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800290a:	4a0a      	ldr	r2, [pc, #40]	; (8002934 <SysTick_Config+0x40>)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	3b01      	subs	r3, #1
 8002910:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002912:	210f      	movs	r1, #15
 8002914:	f04f 30ff 	mov.w	r0, #4294967295
 8002918:	f7ff ff8e 	bl	8002838 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800291c:	4b05      	ldr	r3, [pc, #20]	; (8002934 <SysTick_Config+0x40>)
 800291e:	2200      	movs	r2, #0
 8002920:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002922:	4b04      	ldr	r3, [pc, #16]	; (8002934 <SysTick_Config+0x40>)
 8002924:	2207      	movs	r2, #7
 8002926:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002928:	2300      	movs	r3, #0
}
 800292a:	4618      	mov	r0, r3
 800292c:	3708      	adds	r7, #8
 800292e:	46bd      	mov	sp, r7
 8002930:	bd80      	pop	{r7, pc}
 8002932:	bf00      	nop
 8002934:	e000e010 	.word	0xe000e010

08002938 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b082      	sub	sp, #8
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002940:	6878      	ldr	r0, [r7, #4]
 8002942:	f7ff ff29 	bl	8002798 <__NVIC_SetPriorityGrouping>
}
 8002946:	bf00      	nop
 8002948:	3708      	adds	r7, #8
 800294a:	46bd      	mov	sp, r7
 800294c:	bd80      	pop	{r7, pc}

0800294e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800294e:	b580      	push	{r7, lr}
 8002950:	b086      	sub	sp, #24
 8002952:	af00      	add	r7, sp, #0
 8002954:	4603      	mov	r3, r0
 8002956:	60b9      	str	r1, [r7, #8]
 8002958:	607a      	str	r2, [r7, #4]
 800295a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800295c:	2300      	movs	r3, #0
 800295e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002960:	f7ff ff3e 	bl	80027e0 <__NVIC_GetPriorityGrouping>
 8002964:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002966:	687a      	ldr	r2, [r7, #4]
 8002968:	68b9      	ldr	r1, [r7, #8]
 800296a:	6978      	ldr	r0, [r7, #20]
 800296c:	f7ff ff8e 	bl	800288c <NVIC_EncodePriority>
 8002970:	4602      	mov	r2, r0
 8002972:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002976:	4611      	mov	r1, r2
 8002978:	4618      	mov	r0, r3
 800297a:	f7ff ff5d 	bl	8002838 <__NVIC_SetPriority>
}
 800297e:	bf00      	nop
 8002980:	3718      	adds	r7, #24
 8002982:	46bd      	mov	sp, r7
 8002984:	bd80      	pop	{r7, pc}

08002986 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002986:	b580      	push	{r7, lr}
 8002988:	b082      	sub	sp, #8
 800298a:	af00      	add	r7, sp, #0
 800298c:	4603      	mov	r3, r0
 800298e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002990:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002994:	4618      	mov	r0, r3
 8002996:	f7ff ff31 	bl	80027fc <__NVIC_EnableIRQ>
}
 800299a:	bf00      	nop
 800299c:	3708      	adds	r7, #8
 800299e:	46bd      	mov	sp, r7
 80029a0:	bd80      	pop	{r7, pc}

080029a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80029a2:	b580      	push	{r7, lr}
 80029a4:	b082      	sub	sp, #8
 80029a6:	af00      	add	r7, sp, #0
 80029a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80029aa:	6878      	ldr	r0, [r7, #4]
 80029ac:	f7ff ffa2 	bl	80028f4 <SysTick_Config>
 80029b0:	4603      	mov	r3, r0
}
 80029b2:	4618      	mov	r0, r3
 80029b4:	3708      	adds	r7, #8
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd80      	pop	{r7, pc}

080029ba <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80029ba:	b580      	push	{r7, lr}
 80029bc:	b082      	sub	sp, #8
 80029be:	af00      	add	r7, sp, #0
 80029c0:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d101      	bne.n	80029cc <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80029c8:	2301      	movs	r3, #1
 80029ca:	e014      	b.n	80029f6 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	791b      	ldrb	r3, [r3, #4]
 80029d0:	b2db      	uxtb	r3, r3
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d105      	bne.n	80029e2 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2200      	movs	r2, #0
 80029da:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80029dc:	6878      	ldr	r0, [r7, #4]
 80029de:	f7ff f84b 	bl	8001a78 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2202      	movs	r2, #2
 80029e6:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2200      	movs	r2, #0
 80029ec:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2201      	movs	r2, #1
 80029f2:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80029f4:	2300      	movs	r3, #0
}
 80029f6:	4618      	mov	r0, r3
 80029f8:	3708      	adds	r7, #8
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd80      	pop	{r7, pc}

080029fe <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80029fe:	b480      	push	{r7}
 8002a00:	b083      	sub	sp, #12
 8002a02:	af00      	add	r7, sp, #0
 8002a04:	6078      	str	r0, [r7, #4]
 8002a06:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	795b      	ldrb	r3, [r3, #5]
 8002a0c:	2b01      	cmp	r3, #1
 8002a0e:	d101      	bne.n	8002a14 <HAL_DAC_Start+0x16>
 8002a10:	2302      	movs	r3, #2
 8002a12:	e040      	b.n	8002a96 <HAL_DAC_Start+0x98>
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2201      	movs	r2, #1
 8002a18:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2202      	movs	r2, #2
 8002a1e:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	6819      	ldr	r1, [r3, #0]
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	f003 0310 	and.w	r3, r3, #16
 8002a2c:	2201      	movs	r2, #1
 8002a2e:	409a      	lsls	r2, r3
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	430a      	orrs	r2, r1
 8002a36:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d10f      	bne.n	8002a5e <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8002a48:	2b3c      	cmp	r3, #60	; 0x3c
 8002a4a:	d11d      	bne.n	8002a88 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	685a      	ldr	r2, [r3, #4]
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f042 0201 	orr.w	r2, r2, #1
 8002a5a:	605a      	str	r2, [r3, #4]
 8002a5c:	e014      	b.n	8002a88 <HAL_DAC_Start+0x8a>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	f003 0310 	and.w	r3, r3, #16
 8002a6e:	213c      	movs	r1, #60	; 0x3c
 8002a70:	fa01 f303 	lsl.w	r3, r1, r3
 8002a74:	429a      	cmp	r2, r3
 8002a76:	d107      	bne.n	8002a88 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	685a      	ldr	r2, [r3, #4]
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f042 0202 	orr.w	r2, r2, #2
 8002a86:	605a      	str	r2, [r3, #4]
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2201      	movs	r2, #1
 8002a8c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2200      	movs	r2, #0
 8002a92:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002a94:	2300      	movs	r3, #0
}
 8002a96:	4618      	mov	r0, r3
 8002a98:	370c      	adds	r7, #12
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa0:	4770      	bx	lr

08002aa2 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002aa2:	b480      	push	{r7}
 8002aa4:	b087      	sub	sp, #28
 8002aa6:	af00      	add	r7, sp, #0
 8002aa8:	60f8      	str	r0, [r7, #12]
 8002aaa:	60b9      	str	r1, [r7, #8]
 8002aac:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	795b      	ldrb	r3, [r3, #5]
 8002ab2:	2b01      	cmp	r3, #1
 8002ab4:	d101      	bne.n	8002aba <HAL_DAC_ConfigChannel+0x18>
 8002ab6:	2302      	movs	r3, #2
 8002ab8:	e03c      	b.n	8002b34 <HAL_DAC_ConfigChannel+0x92>
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	2201      	movs	r2, #1
 8002abe:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	2202      	movs	r2, #2
 8002ac4:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	f003 0310 	and.w	r3, r3, #16
 8002ad4:	f640 72fe 	movw	r2, #4094	; 0xffe
 8002ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8002adc:	43db      	mvns	r3, r3
 8002ade:	697a      	ldr	r2, [r7, #20]
 8002ae0:	4013      	ands	r3, r2
 8002ae2:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8002ae4:	68bb      	ldr	r3, [r7, #8]
 8002ae6:	681a      	ldr	r2, [r3, #0]
 8002ae8:	68bb      	ldr	r3, [r7, #8]
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	4313      	orrs	r3, r2
 8002aee:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	f003 0310 	and.w	r3, r3, #16
 8002af6:	693a      	ldr	r2, [r7, #16]
 8002af8:	fa02 f303 	lsl.w	r3, r2, r3
 8002afc:	697a      	ldr	r2, [r7, #20]
 8002afe:	4313      	orrs	r3, r2
 8002b00:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	697a      	ldr	r2, [r7, #20]
 8002b08:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	6819      	ldr	r1, [r3, #0]
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	f003 0310 	and.w	r3, r3, #16
 8002b16:	22c0      	movs	r2, #192	; 0xc0
 8002b18:	fa02 f303 	lsl.w	r3, r2, r3
 8002b1c:	43da      	mvns	r2, r3
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	400a      	ands	r2, r1
 8002b24:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	2201      	movs	r2, #1
 8002b2a:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	2200      	movs	r2, #0
 8002b30:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002b32:	2300      	movs	r3, #0
}
 8002b34:	4618      	mov	r0, r3
 8002b36:	371c      	adds	r7, #28
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3e:	4770      	bx	lr

08002b40 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002b40:	b480      	push	{r7}
 8002b42:	b083      	sub	sp, #12
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002b4e:	b2db      	uxtb	r3, r3
 8002b50:	2b02      	cmp	r3, #2
 8002b52:	d004      	beq.n	8002b5e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2280      	movs	r2, #128	; 0x80
 8002b58:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	e00c      	b.n	8002b78 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2205      	movs	r2, #5
 8002b62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	681a      	ldr	r2, [r3, #0]
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f022 0201 	bic.w	r2, r2, #1
 8002b74:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002b76:	2300      	movs	r3, #0
}
 8002b78:	4618      	mov	r0, r3
 8002b7a:	370c      	adds	r7, #12
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b82:	4770      	bx	lr

08002b84 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002b84:	b480      	push	{r7}
 8002b86:	b083      	sub	sp, #12
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002b92:	b2db      	uxtb	r3, r3
}
 8002b94:	4618      	mov	r0, r3
 8002b96:	370c      	adds	r7, #12
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9e:	4770      	bx	lr

08002ba0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	b089      	sub	sp, #36	; 0x24
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
 8002ba8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002baa:	2300      	movs	r3, #0
 8002bac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	61fb      	str	r3, [r7, #28]
 8002bba:	e165      	b.n	8002e88 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002bbc:	2201      	movs	r2, #1
 8002bbe:	69fb      	ldr	r3, [r7, #28]
 8002bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	697a      	ldr	r2, [r7, #20]
 8002bcc:	4013      	ands	r3, r2
 8002bce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002bd0:	693a      	ldr	r2, [r7, #16]
 8002bd2:	697b      	ldr	r3, [r7, #20]
 8002bd4:	429a      	cmp	r2, r3
 8002bd6:	f040 8154 	bne.w	8002e82 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	f003 0303 	and.w	r3, r3, #3
 8002be2:	2b01      	cmp	r3, #1
 8002be4:	d005      	beq.n	8002bf2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002bee:	2b02      	cmp	r3, #2
 8002bf0:	d130      	bne.n	8002c54 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	689b      	ldr	r3, [r3, #8]
 8002bf6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002bf8:	69fb      	ldr	r3, [r7, #28]
 8002bfa:	005b      	lsls	r3, r3, #1
 8002bfc:	2203      	movs	r2, #3
 8002bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8002c02:	43db      	mvns	r3, r3
 8002c04:	69ba      	ldr	r2, [r7, #24]
 8002c06:	4013      	ands	r3, r2
 8002c08:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	68da      	ldr	r2, [r3, #12]
 8002c0e:	69fb      	ldr	r3, [r7, #28]
 8002c10:	005b      	lsls	r3, r3, #1
 8002c12:	fa02 f303 	lsl.w	r3, r2, r3
 8002c16:	69ba      	ldr	r2, [r7, #24]
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	69ba      	ldr	r2, [r7, #24]
 8002c20:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002c28:	2201      	movs	r2, #1
 8002c2a:	69fb      	ldr	r3, [r7, #28]
 8002c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c30:	43db      	mvns	r3, r3
 8002c32:	69ba      	ldr	r2, [r7, #24]
 8002c34:	4013      	ands	r3, r2
 8002c36:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	091b      	lsrs	r3, r3, #4
 8002c3e:	f003 0201 	and.w	r2, r3, #1
 8002c42:	69fb      	ldr	r3, [r7, #28]
 8002c44:	fa02 f303 	lsl.w	r3, r2, r3
 8002c48:	69ba      	ldr	r2, [r7, #24]
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	69ba      	ldr	r2, [r7, #24]
 8002c52:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	f003 0303 	and.w	r3, r3, #3
 8002c5c:	2b03      	cmp	r3, #3
 8002c5e:	d017      	beq.n	8002c90 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	68db      	ldr	r3, [r3, #12]
 8002c64:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002c66:	69fb      	ldr	r3, [r7, #28]
 8002c68:	005b      	lsls	r3, r3, #1
 8002c6a:	2203      	movs	r2, #3
 8002c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c70:	43db      	mvns	r3, r3
 8002c72:	69ba      	ldr	r2, [r7, #24]
 8002c74:	4013      	ands	r3, r2
 8002c76:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	689a      	ldr	r2, [r3, #8]
 8002c7c:	69fb      	ldr	r3, [r7, #28]
 8002c7e:	005b      	lsls	r3, r3, #1
 8002c80:	fa02 f303 	lsl.w	r3, r2, r3
 8002c84:	69ba      	ldr	r2, [r7, #24]
 8002c86:	4313      	orrs	r3, r2
 8002c88:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	69ba      	ldr	r2, [r7, #24]
 8002c8e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	f003 0303 	and.w	r3, r3, #3
 8002c98:	2b02      	cmp	r3, #2
 8002c9a:	d123      	bne.n	8002ce4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002c9c:	69fb      	ldr	r3, [r7, #28]
 8002c9e:	08da      	lsrs	r2, r3, #3
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	3208      	adds	r2, #8
 8002ca4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ca8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002caa:	69fb      	ldr	r3, [r7, #28]
 8002cac:	f003 0307 	and.w	r3, r3, #7
 8002cb0:	009b      	lsls	r3, r3, #2
 8002cb2:	220f      	movs	r2, #15
 8002cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb8:	43db      	mvns	r3, r3
 8002cba:	69ba      	ldr	r2, [r7, #24]
 8002cbc:	4013      	ands	r3, r2
 8002cbe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	691a      	ldr	r2, [r3, #16]
 8002cc4:	69fb      	ldr	r3, [r7, #28]
 8002cc6:	f003 0307 	and.w	r3, r3, #7
 8002cca:	009b      	lsls	r3, r3, #2
 8002ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd0:	69ba      	ldr	r2, [r7, #24]
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002cd6:	69fb      	ldr	r3, [r7, #28]
 8002cd8:	08da      	lsrs	r2, r3, #3
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	3208      	adds	r2, #8
 8002cde:	69b9      	ldr	r1, [r7, #24]
 8002ce0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002cea:	69fb      	ldr	r3, [r7, #28]
 8002cec:	005b      	lsls	r3, r3, #1
 8002cee:	2203      	movs	r2, #3
 8002cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf4:	43db      	mvns	r3, r3
 8002cf6:	69ba      	ldr	r2, [r7, #24]
 8002cf8:	4013      	ands	r3, r2
 8002cfa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	f003 0203 	and.w	r2, r3, #3
 8002d04:	69fb      	ldr	r3, [r7, #28]
 8002d06:	005b      	lsls	r3, r3, #1
 8002d08:	fa02 f303 	lsl.w	r3, r2, r3
 8002d0c:	69ba      	ldr	r2, [r7, #24]
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	69ba      	ldr	r2, [r7, #24]
 8002d16:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	f000 80ae 	beq.w	8002e82 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d26:	2300      	movs	r3, #0
 8002d28:	60fb      	str	r3, [r7, #12]
 8002d2a:	4b5d      	ldr	r3, [pc, #372]	; (8002ea0 <HAL_GPIO_Init+0x300>)
 8002d2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d2e:	4a5c      	ldr	r2, [pc, #368]	; (8002ea0 <HAL_GPIO_Init+0x300>)
 8002d30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d34:	6453      	str	r3, [r2, #68]	; 0x44
 8002d36:	4b5a      	ldr	r3, [pc, #360]	; (8002ea0 <HAL_GPIO_Init+0x300>)
 8002d38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d3e:	60fb      	str	r3, [r7, #12]
 8002d40:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002d42:	4a58      	ldr	r2, [pc, #352]	; (8002ea4 <HAL_GPIO_Init+0x304>)
 8002d44:	69fb      	ldr	r3, [r7, #28]
 8002d46:	089b      	lsrs	r3, r3, #2
 8002d48:	3302      	adds	r3, #2
 8002d4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002d50:	69fb      	ldr	r3, [r7, #28]
 8002d52:	f003 0303 	and.w	r3, r3, #3
 8002d56:	009b      	lsls	r3, r3, #2
 8002d58:	220f      	movs	r2, #15
 8002d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d5e:	43db      	mvns	r3, r3
 8002d60:	69ba      	ldr	r2, [r7, #24]
 8002d62:	4013      	ands	r3, r2
 8002d64:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	4a4f      	ldr	r2, [pc, #316]	; (8002ea8 <HAL_GPIO_Init+0x308>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d025      	beq.n	8002dba <HAL_GPIO_Init+0x21a>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	4a4e      	ldr	r2, [pc, #312]	; (8002eac <HAL_GPIO_Init+0x30c>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d01f      	beq.n	8002db6 <HAL_GPIO_Init+0x216>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	4a4d      	ldr	r2, [pc, #308]	; (8002eb0 <HAL_GPIO_Init+0x310>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d019      	beq.n	8002db2 <HAL_GPIO_Init+0x212>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	4a4c      	ldr	r2, [pc, #304]	; (8002eb4 <HAL_GPIO_Init+0x314>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d013      	beq.n	8002dae <HAL_GPIO_Init+0x20e>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	4a4b      	ldr	r2, [pc, #300]	; (8002eb8 <HAL_GPIO_Init+0x318>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d00d      	beq.n	8002daa <HAL_GPIO_Init+0x20a>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	4a4a      	ldr	r2, [pc, #296]	; (8002ebc <HAL_GPIO_Init+0x31c>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d007      	beq.n	8002da6 <HAL_GPIO_Init+0x206>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	4a49      	ldr	r2, [pc, #292]	; (8002ec0 <HAL_GPIO_Init+0x320>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d101      	bne.n	8002da2 <HAL_GPIO_Init+0x202>
 8002d9e:	2306      	movs	r3, #6
 8002da0:	e00c      	b.n	8002dbc <HAL_GPIO_Init+0x21c>
 8002da2:	2307      	movs	r3, #7
 8002da4:	e00a      	b.n	8002dbc <HAL_GPIO_Init+0x21c>
 8002da6:	2305      	movs	r3, #5
 8002da8:	e008      	b.n	8002dbc <HAL_GPIO_Init+0x21c>
 8002daa:	2304      	movs	r3, #4
 8002dac:	e006      	b.n	8002dbc <HAL_GPIO_Init+0x21c>
 8002dae:	2303      	movs	r3, #3
 8002db0:	e004      	b.n	8002dbc <HAL_GPIO_Init+0x21c>
 8002db2:	2302      	movs	r3, #2
 8002db4:	e002      	b.n	8002dbc <HAL_GPIO_Init+0x21c>
 8002db6:	2301      	movs	r3, #1
 8002db8:	e000      	b.n	8002dbc <HAL_GPIO_Init+0x21c>
 8002dba:	2300      	movs	r3, #0
 8002dbc:	69fa      	ldr	r2, [r7, #28]
 8002dbe:	f002 0203 	and.w	r2, r2, #3
 8002dc2:	0092      	lsls	r2, r2, #2
 8002dc4:	4093      	lsls	r3, r2
 8002dc6:	69ba      	ldr	r2, [r7, #24]
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002dcc:	4935      	ldr	r1, [pc, #212]	; (8002ea4 <HAL_GPIO_Init+0x304>)
 8002dce:	69fb      	ldr	r3, [r7, #28]
 8002dd0:	089b      	lsrs	r3, r3, #2
 8002dd2:	3302      	adds	r3, #2
 8002dd4:	69ba      	ldr	r2, [r7, #24]
 8002dd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002dda:	4b3a      	ldr	r3, [pc, #232]	; (8002ec4 <HAL_GPIO_Init+0x324>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002de0:	693b      	ldr	r3, [r7, #16]
 8002de2:	43db      	mvns	r3, r3
 8002de4:	69ba      	ldr	r2, [r7, #24]
 8002de6:	4013      	ands	r3, r2
 8002de8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d003      	beq.n	8002dfe <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002df6:	69ba      	ldr	r2, [r7, #24]
 8002df8:	693b      	ldr	r3, [r7, #16]
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002dfe:	4a31      	ldr	r2, [pc, #196]	; (8002ec4 <HAL_GPIO_Init+0x324>)
 8002e00:	69bb      	ldr	r3, [r7, #24]
 8002e02:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002e04:	4b2f      	ldr	r3, [pc, #188]	; (8002ec4 <HAL_GPIO_Init+0x324>)
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e0a:	693b      	ldr	r3, [r7, #16]
 8002e0c:	43db      	mvns	r3, r3
 8002e0e:	69ba      	ldr	r2, [r7, #24]
 8002e10:	4013      	ands	r3, r2
 8002e12:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d003      	beq.n	8002e28 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002e20:	69ba      	ldr	r2, [r7, #24]
 8002e22:	693b      	ldr	r3, [r7, #16]
 8002e24:	4313      	orrs	r3, r2
 8002e26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002e28:	4a26      	ldr	r2, [pc, #152]	; (8002ec4 <HAL_GPIO_Init+0x324>)
 8002e2a:	69bb      	ldr	r3, [r7, #24]
 8002e2c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002e2e:	4b25      	ldr	r3, [pc, #148]	; (8002ec4 <HAL_GPIO_Init+0x324>)
 8002e30:	689b      	ldr	r3, [r3, #8]
 8002e32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e34:	693b      	ldr	r3, [r7, #16]
 8002e36:	43db      	mvns	r3, r3
 8002e38:	69ba      	ldr	r2, [r7, #24]
 8002e3a:	4013      	ands	r3, r2
 8002e3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d003      	beq.n	8002e52 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002e4a:	69ba      	ldr	r2, [r7, #24]
 8002e4c:	693b      	ldr	r3, [r7, #16]
 8002e4e:	4313      	orrs	r3, r2
 8002e50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002e52:	4a1c      	ldr	r2, [pc, #112]	; (8002ec4 <HAL_GPIO_Init+0x324>)
 8002e54:	69bb      	ldr	r3, [r7, #24]
 8002e56:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002e58:	4b1a      	ldr	r3, [pc, #104]	; (8002ec4 <HAL_GPIO_Init+0x324>)
 8002e5a:	68db      	ldr	r3, [r3, #12]
 8002e5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e5e:	693b      	ldr	r3, [r7, #16]
 8002e60:	43db      	mvns	r3, r3
 8002e62:	69ba      	ldr	r2, [r7, #24]
 8002e64:	4013      	ands	r3, r2
 8002e66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d003      	beq.n	8002e7c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002e74:	69ba      	ldr	r2, [r7, #24]
 8002e76:	693b      	ldr	r3, [r7, #16]
 8002e78:	4313      	orrs	r3, r2
 8002e7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002e7c:	4a11      	ldr	r2, [pc, #68]	; (8002ec4 <HAL_GPIO_Init+0x324>)
 8002e7e:	69bb      	ldr	r3, [r7, #24]
 8002e80:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e82:	69fb      	ldr	r3, [r7, #28]
 8002e84:	3301      	adds	r3, #1
 8002e86:	61fb      	str	r3, [r7, #28]
 8002e88:	69fb      	ldr	r3, [r7, #28]
 8002e8a:	2b0f      	cmp	r3, #15
 8002e8c:	f67f ae96 	bls.w	8002bbc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002e90:	bf00      	nop
 8002e92:	bf00      	nop
 8002e94:	3724      	adds	r7, #36	; 0x24
 8002e96:	46bd      	mov	sp, r7
 8002e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9c:	4770      	bx	lr
 8002e9e:	bf00      	nop
 8002ea0:	40023800 	.word	0x40023800
 8002ea4:	40013800 	.word	0x40013800
 8002ea8:	40020000 	.word	0x40020000
 8002eac:	40020400 	.word	0x40020400
 8002eb0:	40020800 	.word	0x40020800
 8002eb4:	40020c00 	.word	0x40020c00
 8002eb8:	40021000 	.word	0x40021000
 8002ebc:	40021400 	.word	0x40021400
 8002ec0:	40021800 	.word	0x40021800
 8002ec4:	40013c00 	.word	0x40013c00

08002ec8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b084      	sub	sp, #16
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d101      	bne.n	8002eda <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	e12b      	b.n	8003132 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ee0:	b2db      	uxtb	r3, r3
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d106      	bne.n	8002ef4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2200      	movs	r2, #0
 8002eea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002eee:	6878      	ldr	r0, [r7, #4]
 8002ef0:	f7fe fe06 	bl	8001b00 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2224      	movs	r2, #36	; 0x24
 8002ef8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	681a      	ldr	r2, [r3, #0]
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f022 0201 	bic.w	r2, r2, #1
 8002f0a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	681a      	ldr	r2, [r3, #0]
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002f1a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	681a      	ldr	r2, [r3, #0]
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002f2a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002f2c:	f002 f87c 	bl	8005028 <HAL_RCC_GetPCLK1Freq>
 8002f30:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	4a81      	ldr	r2, [pc, #516]	; (800313c <HAL_I2C_Init+0x274>)
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d807      	bhi.n	8002f4c <HAL_I2C_Init+0x84>
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	4a80      	ldr	r2, [pc, #512]	; (8003140 <HAL_I2C_Init+0x278>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	bf94      	ite	ls
 8002f44:	2301      	movls	r3, #1
 8002f46:	2300      	movhi	r3, #0
 8002f48:	b2db      	uxtb	r3, r3
 8002f4a:	e006      	b.n	8002f5a <HAL_I2C_Init+0x92>
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	4a7d      	ldr	r2, [pc, #500]	; (8003144 <HAL_I2C_Init+0x27c>)
 8002f50:	4293      	cmp	r3, r2
 8002f52:	bf94      	ite	ls
 8002f54:	2301      	movls	r3, #1
 8002f56:	2300      	movhi	r3, #0
 8002f58:	b2db      	uxtb	r3, r3
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d001      	beq.n	8002f62 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	e0e7      	b.n	8003132 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	4a78      	ldr	r2, [pc, #480]	; (8003148 <HAL_I2C_Init+0x280>)
 8002f66:	fba2 2303 	umull	r2, r3, r2, r3
 8002f6a:	0c9b      	lsrs	r3, r3, #18
 8002f6c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	68ba      	ldr	r2, [r7, #8]
 8002f7e:	430a      	orrs	r2, r1
 8002f80:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	6a1b      	ldr	r3, [r3, #32]
 8002f88:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	4a6a      	ldr	r2, [pc, #424]	; (800313c <HAL_I2C_Init+0x274>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d802      	bhi.n	8002f9c <HAL_I2C_Init+0xd4>
 8002f96:	68bb      	ldr	r3, [r7, #8]
 8002f98:	3301      	adds	r3, #1
 8002f9a:	e009      	b.n	8002fb0 <HAL_I2C_Init+0xe8>
 8002f9c:	68bb      	ldr	r3, [r7, #8]
 8002f9e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002fa2:	fb02 f303 	mul.w	r3, r2, r3
 8002fa6:	4a69      	ldr	r2, [pc, #420]	; (800314c <HAL_I2C_Init+0x284>)
 8002fa8:	fba2 2303 	umull	r2, r3, r2, r3
 8002fac:	099b      	lsrs	r3, r3, #6
 8002fae:	3301      	adds	r3, #1
 8002fb0:	687a      	ldr	r2, [r7, #4]
 8002fb2:	6812      	ldr	r2, [r2, #0]
 8002fb4:	430b      	orrs	r3, r1
 8002fb6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	69db      	ldr	r3, [r3, #28]
 8002fbe:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002fc2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	495c      	ldr	r1, [pc, #368]	; (800313c <HAL_I2C_Init+0x274>)
 8002fcc:	428b      	cmp	r3, r1
 8002fce:	d819      	bhi.n	8003004 <HAL_I2C_Init+0x13c>
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	1e59      	subs	r1, r3, #1
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	005b      	lsls	r3, r3, #1
 8002fda:	fbb1 f3f3 	udiv	r3, r1, r3
 8002fde:	1c59      	adds	r1, r3, #1
 8002fe0:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002fe4:	400b      	ands	r3, r1
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d00a      	beq.n	8003000 <HAL_I2C_Init+0x138>
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	1e59      	subs	r1, r3, #1
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	005b      	lsls	r3, r3, #1
 8002ff4:	fbb1 f3f3 	udiv	r3, r1, r3
 8002ff8:	3301      	adds	r3, #1
 8002ffa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ffe:	e051      	b.n	80030a4 <HAL_I2C_Init+0x1dc>
 8003000:	2304      	movs	r3, #4
 8003002:	e04f      	b.n	80030a4 <HAL_I2C_Init+0x1dc>
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	689b      	ldr	r3, [r3, #8]
 8003008:	2b00      	cmp	r3, #0
 800300a:	d111      	bne.n	8003030 <HAL_I2C_Init+0x168>
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	1e58      	subs	r0, r3, #1
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6859      	ldr	r1, [r3, #4]
 8003014:	460b      	mov	r3, r1
 8003016:	005b      	lsls	r3, r3, #1
 8003018:	440b      	add	r3, r1
 800301a:	fbb0 f3f3 	udiv	r3, r0, r3
 800301e:	3301      	adds	r3, #1
 8003020:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003024:	2b00      	cmp	r3, #0
 8003026:	bf0c      	ite	eq
 8003028:	2301      	moveq	r3, #1
 800302a:	2300      	movne	r3, #0
 800302c:	b2db      	uxtb	r3, r3
 800302e:	e012      	b.n	8003056 <HAL_I2C_Init+0x18e>
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	1e58      	subs	r0, r3, #1
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6859      	ldr	r1, [r3, #4]
 8003038:	460b      	mov	r3, r1
 800303a:	009b      	lsls	r3, r3, #2
 800303c:	440b      	add	r3, r1
 800303e:	0099      	lsls	r1, r3, #2
 8003040:	440b      	add	r3, r1
 8003042:	fbb0 f3f3 	udiv	r3, r0, r3
 8003046:	3301      	adds	r3, #1
 8003048:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800304c:	2b00      	cmp	r3, #0
 800304e:	bf0c      	ite	eq
 8003050:	2301      	moveq	r3, #1
 8003052:	2300      	movne	r3, #0
 8003054:	b2db      	uxtb	r3, r3
 8003056:	2b00      	cmp	r3, #0
 8003058:	d001      	beq.n	800305e <HAL_I2C_Init+0x196>
 800305a:	2301      	movs	r3, #1
 800305c:	e022      	b.n	80030a4 <HAL_I2C_Init+0x1dc>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	689b      	ldr	r3, [r3, #8]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d10e      	bne.n	8003084 <HAL_I2C_Init+0x1bc>
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	1e58      	subs	r0, r3, #1
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6859      	ldr	r1, [r3, #4]
 800306e:	460b      	mov	r3, r1
 8003070:	005b      	lsls	r3, r3, #1
 8003072:	440b      	add	r3, r1
 8003074:	fbb0 f3f3 	udiv	r3, r0, r3
 8003078:	3301      	adds	r3, #1
 800307a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800307e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003082:	e00f      	b.n	80030a4 <HAL_I2C_Init+0x1dc>
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	1e58      	subs	r0, r3, #1
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6859      	ldr	r1, [r3, #4]
 800308c:	460b      	mov	r3, r1
 800308e:	009b      	lsls	r3, r3, #2
 8003090:	440b      	add	r3, r1
 8003092:	0099      	lsls	r1, r3, #2
 8003094:	440b      	add	r3, r1
 8003096:	fbb0 f3f3 	udiv	r3, r0, r3
 800309a:	3301      	adds	r3, #1
 800309c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030a0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80030a4:	6879      	ldr	r1, [r7, #4]
 80030a6:	6809      	ldr	r1, [r1, #0]
 80030a8:	4313      	orrs	r3, r2
 80030aa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	69da      	ldr	r2, [r3, #28]
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6a1b      	ldr	r3, [r3, #32]
 80030be:	431a      	orrs	r2, r3
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	430a      	orrs	r2, r1
 80030c6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	689b      	ldr	r3, [r3, #8]
 80030ce:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80030d2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80030d6:	687a      	ldr	r2, [r7, #4]
 80030d8:	6911      	ldr	r1, [r2, #16]
 80030da:	687a      	ldr	r2, [r7, #4]
 80030dc:	68d2      	ldr	r2, [r2, #12]
 80030de:	4311      	orrs	r1, r2
 80030e0:	687a      	ldr	r2, [r7, #4]
 80030e2:	6812      	ldr	r2, [r2, #0]
 80030e4:	430b      	orrs	r3, r1
 80030e6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	68db      	ldr	r3, [r3, #12]
 80030ee:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	695a      	ldr	r2, [r3, #20]
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	699b      	ldr	r3, [r3, #24]
 80030fa:	431a      	orrs	r2, r3
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	430a      	orrs	r2, r1
 8003102:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	681a      	ldr	r2, [r3, #0]
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f042 0201 	orr.w	r2, r2, #1
 8003112:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2200      	movs	r2, #0
 8003118:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2220      	movs	r2, #32
 800311e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2200      	movs	r2, #0
 8003126:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2200      	movs	r2, #0
 800312c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003130:	2300      	movs	r3, #0
}
 8003132:	4618      	mov	r0, r3
 8003134:	3710      	adds	r7, #16
 8003136:	46bd      	mov	sp, r7
 8003138:	bd80      	pop	{r7, pc}
 800313a:	bf00      	nop
 800313c:	000186a0 	.word	0x000186a0
 8003140:	001e847f 	.word	0x001e847f
 8003144:	003d08ff 	.word	0x003d08ff
 8003148:	431bde83 	.word	0x431bde83
 800314c:	10624dd3 	.word	0x10624dd3

08003150 <HAL_I2C_Slave_Seq_Transmit_IT>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Transmit_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 8003150:	b480      	push	{r7}
 8003152:	b087      	sub	sp, #28
 8003154:	af00      	add	r7, sp, #0
 8003156:	60f8      	str	r0, [r7, #12]
 8003158:	60b9      	str	r1, [r7, #8]
 800315a:	603b      	str	r3, [r7, #0]
 800315c:	4613      	mov	r3, r2
 800315e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003166:	b2db      	uxtb	r3, r3
 8003168:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800316c:	2b28      	cmp	r3, #40	; 0x28
 800316e:	d15b      	bne.n	8003228 <HAL_I2C_Slave_Seq_Transmit_IT+0xd8>
  {
    if ((pData == NULL) || (Size == 0U))
 8003170:	68bb      	ldr	r3, [r7, #8]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d002      	beq.n	800317c <HAL_I2C_Slave_Seq_Transmit_IT+0x2c>
 8003176:	88fb      	ldrh	r3, [r7, #6]
 8003178:	2b00      	cmp	r3, #0
 800317a:	d101      	bne.n	8003180 <HAL_I2C_Slave_Seq_Transmit_IT+0x30>
    {
      return  HAL_ERROR;
 800317c:	2301      	movs	r3, #1
 800317e:	e054      	b.n	800322a <HAL_I2C_Slave_Seq_Transmit_IT+0xda>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003186:	2b01      	cmp	r3, #1
 8003188:	d101      	bne.n	800318e <HAL_I2C_Slave_Seq_Transmit_IT+0x3e>
 800318a:	2302      	movs	r3, #2
 800318c:	e04d      	b.n	800322a <HAL_I2C_Slave_Seq_Transmit_IT+0xda>
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	2201      	movs	r2, #1
 8003192:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f003 0301 	and.w	r3, r3, #1
 80031a0:	2b01      	cmp	r3, #1
 80031a2:	d007      	beq.n	80031b4 <HAL_I2C_Slave_Seq_Transmit_IT+0x64>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	681a      	ldr	r2, [r3, #0]
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f042 0201 	orr.w	r2, r2, #1
 80031b2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	681a      	ldr	r2, [r3, #0]
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80031c2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX_LISTEN;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	2229      	movs	r2, #41	; 0x29
 80031c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	2220      	movs	r2, #32
 80031d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	2200      	movs	r2, #0
 80031d8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	68ba      	ldr	r2, [r7, #8]
 80031de:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	88fa      	ldrh	r2, [r7, #6]
 80031e4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031ea:	b29a      	uxth	r2, r3
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	683a      	ldr	r2, [r7, #0]
 80031f4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031f6:	2300      	movs	r3, #0
 80031f8:	617b      	str	r3, [r7, #20]
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	695b      	ldr	r3, [r3, #20]
 8003200:	617b      	str	r3, [r7, #20]
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	699b      	ldr	r3, [r3, #24]
 8003208:	617b      	str	r3, [r7, #20]
 800320a:	697b      	ldr	r3, [r7, #20]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	2200      	movs	r2, #0
 8003210:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	685a      	ldr	r2, [r3, #4]
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8003222:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8003224:	2300      	movs	r3, #0
 8003226:	e000      	b.n	800322a <HAL_I2C_Slave_Seq_Transmit_IT+0xda>
  }
  else
  {
    return HAL_BUSY;
 8003228:	2302      	movs	r3, #2
  }
}
 800322a:	4618      	mov	r0, r3
 800322c:	371c      	adds	r7, #28
 800322e:	46bd      	mov	sp, r7
 8003230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003234:	4770      	bx	lr

08003236 <HAL_I2C_Slave_Seq_Receive_IT>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 8003236:	b480      	push	{r7}
 8003238:	b087      	sub	sp, #28
 800323a:	af00      	add	r7, sp, #0
 800323c:	60f8      	str	r0, [r7, #12]
 800323e:	60b9      	str	r1, [r7, #8]
 8003240:	603b      	str	r3, [r7, #0]
 8003242:	4613      	mov	r3, r2
 8003244:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800324c:	b2db      	uxtb	r3, r3
 800324e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003252:	2b28      	cmp	r3, #40	; 0x28
 8003254:	d15b      	bne.n	800330e <HAL_I2C_Slave_Seq_Receive_IT+0xd8>
  {
    if ((pData == NULL) || (Size == 0U))
 8003256:	68bb      	ldr	r3, [r7, #8]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d002      	beq.n	8003262 <HAL_I2C_Slave_Seq_Receive_IT+0x2c>
 800325c:	88fb      	ldrh	r3, [r7, #6]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d101      	bne.n	8003266 <HAL_I2C_Slave_Seq_Receive_IT+0x30>
    {
      return  HAL_ERROR;
 8003262:	2301      	movs	r3, #1
 8003264:	e054      	b.n	8003310 <HAL_I2C_Slave_Seq_Receive_IT+0xda>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800326c:	2b01      	cmp	r3, #1
 800326e:	d101      	bne.n	8003274 <HAL_I2C_Slave_Seq_Receive_IT+0x3e>
 8003270:	2302      	movs	r3, #2
 8003272:	e04d      	b.n	8003310 <HAL_I2C_Slave_Seq_Receive_IT+0xda>
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	2201      	movs	r2, #1
 8003278:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f003 0301 	and.w	r3, r3, #1
 8003286:	2b01      	cmp	r3, #1
 8003288:	d007      	beq.n	800329a <HAL_I2C_Slave_Seq_Receive_IT+0x64>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	681a      	ldr	r2, [r3, #0]
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f042 0201 	orr.w	r2, r2, #1
 8003298:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	681a      	ldr	r2, [r3, #0]
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80032a8:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX_LISTEN;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	222a      	movs	r2, #42	; 0x2a
 80032ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	2220      	movs	r2, #32
 80032b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	2200      	movs	r2, #0
 80032be:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	68ba      	ldr	r2, [r7, #8]
 80032c4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	88fa      	ldrh	r2, [r7, #6]
 80032ca:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032d0:	b29a      	uxth	r2, r3
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	683a      	ldr	r2, [r7, #0]
 80032da:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032dc:	2300      	movs	r3, #0
 80032de:	617b      	str	r3, [r7, #20]
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	695b      	ldr	r3, [r3, #20]
 80032e6:	617b      	str	r3, [r7, #20]
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	699b      	ldr	r3, [r3, #24]
 80032ee:	617b      	str	r3, [r7, #20]
 80032f0:	697b      	ldr	r3, [r7, #20]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	2200      	movs	r2, #0
 80032f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	685a      	ldr	r2, [r3, #4]
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8003308:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 800330a:	2300      	movs	r3, #0
 800330c:	e000      	b.n	8003310 <HAL_I2C_Slave_Seq_Receive_IT+0xda>
  }
  else
  {
    return HAL_BUSY;
 800330e:	2302      	movs	r3, #2
  }
}
 8003310:	4618      	mov	r0, r3
 8003312:	371c      	adds	r7, #28
 8003314:	46bd      	mov	sp, r7
 8003316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331a:	4770      	bx	lr

0800331c <HAL_I2C_EnableListen_IT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_EnableListen_IT(I2C_HandleTypeDef *hi2c)
{
 800331c:	b480      	push	{r7}
 800331e:	b083      	sub	sp, #12
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800332a:	b2db      	uxtb	r3, r3
 800332c:	2b20      	cmp	r3, #32
 800332e:	d124      	bne.n	800337a <HAL_I2C_EnableListen_IT+0x5e>
  {
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2228      	movs	r2, #40	; 0x28
 8003334:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f003 0301 	and.w	r3, r3, #1
 8003342:	2b01      	cmp	r3, #1
 8003344:	d007      	beq.n	8003356 <HAL_I2C_EnableListen_IT+0x3a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	681a      	ldr	r2, [r3, #0]
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f042 0201 	orr.w	r2, r2, #1
 8003354:	601a      	str	r2, [r3, #0]
    }

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	681a      	ldr	r2, [r3, #0]
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003364:	601a      	str	r2, [r3, #0]

    /* Enable EVT and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	685a      	ldr	r2, [r3, #4]
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8003374:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8003376:	2300      	movs	r3, #0
 8003378:	e000      	b.n	800337c <HAL_I2C_EnableListen_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 800337a:	2302      	movs	r3, #2
  }
}
 800337c:	4618      	mov	r0, r3
 800337e:	370c      	adds	r7, #12
 8003380:	46bd      	mov	sp, r7
 8003382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003386:	4770      	bx	lr

08003388 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b088      	sub	sp, #32
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8003390:	2300      	movs	r3, #0
 8003392:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	685b      	ldr	r3, [r3, #4]
 800339a:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033a0:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80033a8:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033b0:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80033b2:	7bfb      	ldrb	r3, [r7, #15]
 80033b4:	2b10      	cmp	r3, #16
 80033b6:	d003      	beq.n	80033c0 <HAL_I2C_EV_IRQHandler+0x38>
 80033b8:	7bfb      	ldrb	r3, [r7, #15]
 80033ba:	2b40      	cmp	r3, #64	; 0x40
 80033bc:	f040 80c1 	bne.w	8003542 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	699b      	ldr	r3, [r3, #24]
 80033c6:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	695b      	ldr	r3, [r3, #20]
 80033ce:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80033d0:	69fb      	ldr	r3, [r7, #28]
 80033d2:	f003 0301 	and.w	r3, r3, #1
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d10d      	bne.n	80033f6 <HAL_I2C_EV_IRQHandler+0x6e>
 80033da:	693b      	ldr	r3, [r7, #16]
 80033dc:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80033e0:	d003      	beq.n	80033ea <HAL_I2C_EV_IRQHandler+0x62>
 80033e2:	693b      	ldr	r3, [r7, #16]
 80033e4:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80033e8:	d101      	bne.n	80033ee <HAL_I2C_EV_IRQHandler+0x66>
 80033ea:	2301      	movs	r3, #1
 80033ec:	e000      	b.n	80033f0 <HAL_I2C_EV_IRQHandler+0x68>
 80033ee:	2300      	movs	r3, #0
 80033f0:	2b01      	cmp	r3, #1
 80033f2:	f000 8132 	beq.w	800365a <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80033f6:	69fb      	ldr	r3, [r7, #28]
 80033f8:	f003 0301 	and.w	r3, r3, #1
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d00c      	beq.n	800341a <HAL_I2C_EV_IRQHandler+0x92>
 8003400:	697b      	ldr	r3, [r7, #20]
 8003402:	0a5b      	lsrs	r3, r3, #9
 8003404:	f003 0301 	and.w	r3, r3, #1
 8003408:	2b00      	cmp	r3, #0
 800340a:	d006      	beq.n	800341a <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 800340c:	6878      	ldr	r0, [r7, #4]
 800340e:	f001 fc45 	bl	8004c9c <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8003412:	6878      	ldr	r0, [r7, #4]
 8003414:	f000 fd4d 	bl	8003eb2 <I2C_Master_SB>
 8003418:	e092      	b.n	8003540 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800341a:	69fb      	ldr	r3, [r7, #28]
 800341c:	08db      	lsrs	r3, r3, #3
 800341e:	f003 0301 	and.w	r3, r3, #1
 8003422:	2b00      	cmp	r3, #0
 8003424:	d009      	beq.n	800343a <HAL_I2C_EV_IRQHandler+0xb2>
 8003426:	697b      	ldr	r3, [r7, #20]
 8003428:	0a5b      	lsrs	r3, r3, #9
 800342a:	f003 0301 	and.w	r3, r3, #1
 800342e:	2b00      	cmp	r3, #0
 8003430:	d003      	beq.n	800343a <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8003432:	6878      	ldr	r0, [r7, #4]
 8003434:	f000 fdc3 	bl	8003fbe <I2C_Master_ADD10>
 8003438:	e082      	b.n	8003540 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800343a:	69fb      	ldr	r3, [r7, #28]
 800343c:	085b      	lsrs	r3, r3, #1
 800343e:	f003 0301 	and.w	r3, r3, #1
 8003442:	2b00      	cmp	r3, #0
 8003444:	d009      	beq.n	800345a <HAL_I2C_EV_IRQHandler+0xd2>
 8003446:	697b      	ldr	r3, [r7, #20]
 8003448:	0a5b      	lsrs	r3, r3, #9
 800344a:	f003 0301 	and.w	r3, r3, #1
 800344e:	2b00      	cmp	r3, #0
 8003450:	d003      	beq.n	800345a <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8003452:	6878      	ldr	r0, [r7, #4]
 8003454:	f000 fddd 	bl	8004012 <I2C_Master_ADDR>
 8003458:	e072      	b.n	8003540 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800345a:	69bb      	ldr	r3, [r7, #24]
 800345c:	089b      	lsrs	r3, r3, #2
 800345e:	f003 0301 	and.w	r3, r3, #1
 8003462:	2b00      	cmp	r3, #0
 8003464:	d03b      	beq.n	80034de <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003470:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003474:	f000 80f3 	beq.w	800365e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003478:	69fb      	ldr	r3, [r7, #28]
 800347a:	09db      	lsrs	r3, r3, #7
 800347c:	f003 0301 	and.w	r3, r3, #1
 8003480:	2b00      	cmp	r3, #0
 8003482:	d00f      	beq.n	80034a4 <HAL_I2C_EV_IRQHandler+0x11c>
 8003484:	697b      	ldr	r3, [r7, #20]
 8003486:	0a9b      	lsrs	r3, r3, #10
 8003488:	f003 0301 	and.w	r3, r3, #1
 800348c:	2b00      	cmp	r3, #0
 800348e:	d009      	beq.n	80034a4 <HAL_I2C_EV_IRQHandler+0x11c>
 8003490:	69fb      	ldr	r3, [r7, #28]
 8003492:	089b      	lsrs	r3, r3, #2
 8003494:	f003 0301 	and.w	r3, r3, #1
 8003498:	2b00      	cmp	r3, #0
 800349a:	d103      	bne.n	80034a4 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 800349c:	6878      	ldr	r0, [r7, #4]
 800349e:	f000 f9c7 	bl	8003830 <I2C_MasterTransmit_TXE>
 80034a2:	e04d      	b.n	8003540 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80034a4:	69fb      	ldr	r3, [r7, #28]
 80034a6:	089b      	lsrs	r3, r3, #2
 80034a8:	f003 0301 	and.w	r3, r3, #1
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	f000 80d6 	beq.w	800365e <HAL_I2C_EV_IRQHandler+0x2d6>
 80034b2:	697b      	ldr	r3, [r7, #20]
 80034b4:	0a5b      	lsrs	r3, r3, #9
 80034b6:	f003 0301 	and.w	r3, r3, #1
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	f000 80cf 	beq.w	800365e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80034c0:	7bbb      	ldrb	r3, [r7, #14]
 80034c2:	2b21      	cmp	r3, #33	; 0x21
 80034c4:	d103      	bne.n	80034ce <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80034c6:	6878      	ldr	r0, [r7, #4]
 80034c8:	f000 fa4e 	bl	8003968 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80034cc:	e0c7      	b.n	800365e <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80034ce:	7bfb      	ldrb	r3, [r7, #15]
 80034d0:	2b40      	cmp	r3, #64	; 0x40
 80034d2:	f040 80c4 	bne.w	800365e <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80034d6:	6878      	ldr	r0, [r7, #4]
 80034d8:	f000 fabc 	bl	8003a54 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80034dc:	e0bf      	b.n	800365e <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80034e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80034ec:	f000 80b7 	beq.w	800365e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80034f0:	69fb      	ldr	r3, [r7, #28]
 80034f2:	099b      	lsrs	r3, r3, #6
 80034f4:	f003 0301 	and.w	r3, r3, #1
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d00f      	beq.n	800351c <HAL_I2C_EV_IRQHandler+0x194>
 80034fc:	697b      	ldr	r3, [r7, #20]
 80034fe:	0a9b      	lsrs	r3, r3, #10
 8003500:	f003 0301 	and.w	r3, r3, #1
 8003504:	2b00      	cmp	r3, #0
 8003506:	d009      	beq.n	800351c <HAL_I2C_EV_IRQHandler+0x194>
 8003508:	69fb      	ldr	r3, [r7, #28]
 800350a:	089b      	lsrs	r3, r3, #2
 800350c:	f003 0301 	and.w	r3, r3, #1
 8003510:	2b00      	cmp	r3, #0
 8003512:	d103      	bne.n	800351c <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8003514:	6878      	ldr	r0, [r7, #4]
 8003516:	f000 fb31 	bl	8003b7c <I2C_MasterReceive_RXNE>
 800351a:	e011      	b.n	8003540 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800351c:	69fb      	ldr	r3, [r7, #28]
 800351e:	089b      	lsrs	r3, r3, #2
 8003520:	f003 0301 	and.w	r3, r3, #1
 8003524:	2b00      	cmp	r3, #0
 8003526:	f000 809a 	beq.w	800365e <HAL_I2C_EV_IRQHandler+0x2d6>
 800352a:	697b      	ldr	r3, [r7, #20]
 800352c:	0a5b      	lsrs	r3, r3, #9
 800352e:	f003 0301 	and.w	r3, r3, #1
 8003532:	2b00      	cmp	r3, #0
 8003534:	f000 8093 	beq.w	800365e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8003538:	6878      	ldr	r0, [r7, #4]
 800353a:	f000 fbd0 	bl	8003cde <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800353e:	e08e      	b.n	800365e <HAL_I2C_EV_IRQHandler+0x2d6>
 8003540:	e08d      	b.n	800365e <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003546:	2b00      	cmp	r3, #0
 8003548:	d004      	beq.n	8003554 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	695b      	ldr	r3, [r3, #20]
 8003550:	61fb      	str	r3, [r7, #28]
 8003552:	e007      	b.n	8003564 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	699b      	ldr	r3, [r3, #24]
 800355a:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	695b      	ldr	r3, [r3, #20]
 8003562:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003564:	69fb      	ldr	r3, [r7, #28]
 8003566:	085b      	lsrs	r3, r3, #1
 8003568:	f003 0301 	and.w	r3, r3, #1
 800356c:	2b00      	cmp	r3, #0
 800356e:	d012      	beq.n	8003596 <HAL_I2C_EV_IRQHandler+0x20e>
 8003570:	697b      	ldr	r3, [r7, #20]
 8003572:	0a5b      	lsrs	r3, r3, #9
 8003574:	f003 0301 	and.w	r3, r3, #1
 8003578:	2b00      	cmp	r3, #0
 800357a:	d00c      	beq.n	8003596 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003580:	2b00      	cmp	r3, #0
 8003582:	d003      	beq.n	800358c <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	699b      	ldr	r3, [r3, #24]
 800358a:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 800358c:	69b9      	ldr	r1, [r7, #24]
 800358e:	6878      	ldr	r0, [r7, #4]
 8003590:	f000 ff8e 	bl	80044b0 <I2C_Slave_ADDR>
 8003594:	e066      	b.n	8003664 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003596:	69fb      	ldr	r3, [r7, #28]
 8003598:	091b      	lsrs	r3, r3, #4
 800359a:	f003 0301 	and.w	r3, r3, #1
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d009      	beq.n	80035b6 <HAL_I2C_EV_IRQHandler+0x22e>
 80035a2:	697b      	ldr	r3, [r7, #20]
 80035a4:	0a5b      	lsrs	r3, r3, #9
 80035a6:	f003 0301 	and.w	r3, r3, #1
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d003      	beq.n	80035b6 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 80035ae:	6878      	ldr	r0, [r7, #4]
 80035b0:	f000 ffc8 	bl	8004544 <I2C_Slave_STOPF>
 80035b4:	e056      	b.n	8003664 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80035b6:	7bbb      	ldrb	r3, [r7, #14]
 80035b8:	2b21      	cmp	r3, #33	; 0x21
 80035ba:	d002      	beq.n	80035c2 <HAL_I2C_EV_IRQHandler+0x23a>
 80035bc:	7bbb      	ldrb	r3, [r7, #14]
 80035be:	2b29      	cmp	r3, #41	; 0x29
 80035c0:	d125      	bne.n	800360e <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80035c2:	69fb      	ldr	r3, [r7, #28]
 80035c4:	09db      	lsrs	r3, r3, #7
 80035c6:	f003 0301 	and.w	r3, r3, #1
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d00f      	beq.n	80035ee <HAL_I2C_EV_IRQHandler+0x266>
 80035ce:	697b      	ldr	r3, [r7, #20]
 80035d0:	0a9b      	lsrs	r3, r3, #10
 80035d2:	f003 0301 	and.w	r3, r3, #1
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d009      	beq.n	80035ee <HAL_I2C_EV_IRQHandler+0x266>
 80035da:	69fb      	ldr	r3, [r7, #28]
 80035dc:	089b      	lsrs	r3, r3, #2
 80035de:	f003 0301 	and.w	r3, r3, #1
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d103      	bne.n	80035ee <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80035e6:	6878      	ldr	r0, [r7, #4]
 80035e8:	f000 fea4 	bl	8004334 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80035ec:	e039      	b.n	8003662 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80035ee:	69fb      	ldr	r3, [r7, #28]
 80035f0:	089b      	lsrs	r3, r3, #2
 80035f2:	f003 0301 	and.w	r3, r3, #1
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d033      	beq.n	8003662 <HAL_I2C_EV_IRQHandler+0x2da>
 80035fa:	697b      	ldr	r3, [r7, #20]
 80035fc:	0a5b      	lsrs	r3, r3, #9
 80035fe:	f003 0301 	and.w	r3, r3, #1
 8003602:	2b00      	cmp	r3, #0
 8003604:	d02d      	beq.n	8003662 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8003606:	6878      	ldr	r0, [r7, #4]
 8003608:	f000 fed1 	bl	80043ae <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800360c:	e029      	b.n	8003662 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800360e:	69fb      	ldr	r3, [r7, #28]
 8003610:	099b      	lsrs	r3, r3, #6
 8003612:	f003 0301 	and.w	r3, r3, #1
 8003616:	2b00      	cmp	r3, #0
 8003618:	d00f      	beq.n	800363a <HAL_I2C_EV_IRQHandler+0x2b2>
 800361a:	697b      	ldr	r3, [r7, #20]
 800361c:	0a9b      	lsrs	r3, r3, #10
 800361e:	f003 0301 	and.w	r3, r3, #1
 8003622:	2b00      	cmp	r3, #0
 8003624:	d009      	beq.n	800363a <HAL_I2C_EV_IRQHandler+0x2b2>
 8003626:	69fb      	ldr	r3, [r7, #28]
 8003628:	089b      	lsrs	r3, r3, #2
 800362a:	f003 0301 	and.w	r3, r3, #1
 800362e:	2b00      	cmp	r3, #0
 8003630:	d103      	bne.n	800363a <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8003632:	6878      	ldr	r0, [r7, #4]
 8003634:	f000 fedc 	bl	80043f0 <I2C_SlaveReceive_RXNE>
 8003638:	e014      	b.n	8003664 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800363a:	69fb      	ldr	r3, [r7, #28]
 800363c:	089b      	lsrs	r3, r3, #2
 800363e:	f003 0301 	and.w	r3, r3, #1
 8003642:	2b00      	cmp	r3, #0
 8003644:	d00e      	beq.n	8003664 <HAL_I2C_EV_IRQHandler+0x2dc>
 8003646:	697b      	ldr	r3, [r7, #20]
 8003648:	0a5b      	lsrs	r3, r3, #9
 800364a:	f003 0301 	and.w	r3, r3, #1
 800364e:	2b00      	cmp	r3, #0
 8003650:	d008      	beq.n	8003664 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8003652:	6878      	ldr	r0, [r7, #4]
 8003654:	f000 ff0a 	bl	800446c <I2C_SlaveReceive_BTF>
 8003658:	e004      	b.n	8003664 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 800365a:	bf00      	nop
 800365c:	e002      	b.n	8003664 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800365e:	bf00      	nop
 8003660:	e000      	b.n	8003664 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003662:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8003664:	3720      	adds	r7, #32
 8003666:	46bd      	mov	sp, r7
 8003668:	bd80      	pop	{r7, pc}

0800366a <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800366a:	b580      	push	{r7, lr}
 800366c:	b08a      	sub	sp, #40	; 0x28
 800366e:	af00      	add	r7, sp, #0
 8003670:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	695b      	ldr	r3, [r3, #20]
 8003678:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	685b      	ldr	r3, [r3, #4]
 8003680:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8003682:	2300      	movs	r3, #0
 8003684:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800368c:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800368e:	6a3b      	ldr	r3, [r7, #32]
 8003690:	0a1b      	lsrs	r3, r3, #8
 8003692:	f003 0301 	and.w	r3, r3, #1
 8003696:	2b00      	cmp	r3, #0
 8003698:	d00e      	beq.n	80036b8 <HAL_I2C_ER_IRQHandler+0x4e>
 800369a:	69fb      	ldr	r3, [r7, #28]
 800369c:	0a1b      	lsrs	r3, r3, #8
 800369e:	f003 0301 	and.w	r3, r3, #1
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d008      	beq.n	80036b8 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 80036a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036a8:	f043 0301 	orr.w	r3, r3, #1
 80036ac:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80036b6:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80036b8:	6a3b      	ldr	r3, [r7, #32]
 80036ba:	0a5b      	lsrs	r3, r3, #9
 80036bc:	f003 0301 	and.w	r3, r3, #1
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d00e      	beq.n	80036e2 <HAL_I2C_ER_IRQHandler+0x78>
 80036c4:	69fb      	ldr	r3, [r7, #28]
 80036c6:	0a1b      	lsrs	r3, r3, #8
 80036c8:	f003 0301 	and.w	r3, r3, #1
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d008      	beq.n	80036e2 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 80036d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036d2:	f043 0302 	orr.w	r3, r3, #2
 80036d6:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f46f 7200 	mvn.w	r2, #512	; 0x200
 80036e0:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80036e2:	6a3b      	ldr	r3, [r7, #32]
 80036e4:	0a9b      	lsrs	r3, r3, #10
 80036e6:	f003 0301 	and.w	r3, r3, #1
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d03f      	beq.n	800376e <HAL_I2C_ER_IRQHandler+0x104>
 80036ee:	69fb      	ldr	r3, [r7, #28]
 80036f0:	0a1b      	lsrs	r3, r3, #8
 80036f2:	f003 0301 	and.w	r3, r3, #1
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d039      	beq.n	800376e <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 80036fa:	7efb      	ldrb	r3, [r7, #27]
 80036fc:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003702:	b29b      	uxth	r3, r3
 8003704:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800370c:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003712:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8003714:	7ebb      	ldrb	r3, [r7, #26]
 8003716:	2b20      	cmp	r3, #32
 8003718:	d112      	bne.n	8003740 <HAL_I2C_ER_IRQHandler+0xd6>
 800371a:	697b      	ldr	r3, [r7, #20]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d10f      	bne.n	8003740 <HAL_I2C_ER_IRQHandler+0xd6>
 8003720:	7cfb      	ldrb	r3, [r7, #19]
 8003722:	2b21      	cmp	r3, #33	; 0x21
 8003724:	d008      	beq.n	8003738 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8003726:	7cfb      	ldrb	r3, [r7, #19]
 8003728:	2b29      	cmp	r3, #41	; 0x29
 800372a:	d005      	beq.n	8003738 <HAL_I2C_ER_IRQHandler+0xce>
 800372c:	7cfb      	ldrb	r3, [r7, #19]
 800372e:	2b28      	cmp	r3, #40	; 0x28
 8003730:	d106      	bne.n	8003740 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	2b21      	cmp	r3, #33	; 0x21
 8003736:	d103      	bne.n	8003740 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8003738:	6878      	ldr	r0, [r7, #4]
 800373a:	f001 f833 	bl	80047a4 <I2C_Slave_AF>
 800373e:	e016      	b.n	800376e <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003748:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 800374a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800374c:	f043 0304 	orr.w	r3, r3, #4
 8003750:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003752:	7efb      	ldrb	r3, [r7, #27]
 8003754:	2b10      	cmp	r3, #16
 8003756:	d002      	beq.n	800375e <HAL_I2C_ER_IRQHandler+0xf4>
 8003758:	7efb      	ldrb	r3, [r7, #27]
 800375a:	2b40      	cmp	r3, #64	; 0x40
 800375c:	d107      	bne.n	800376e <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	681a      	ldr	r2, [r3, #0]
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800376c:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800376e:	6a3b      	ldr	r3, [r7, #32]
 8003770:	0adb      	lsrs	r3, r3, #11
 8003772:	f003 0301 	and.w	r3, r3, #1
 8003776:	2b00      	cmp	r3, #0
 8003778:	d00e      	beq.n	8003798 <HAL_I2C_ER_IRQHandler+0x12e>
 800377a:	69fb      	ldr	r3, [r7, #28]
 800377c:	0a1b      	lsrs	r3, r3, #8
 800377e:	f003 0301 	and.w	r3, r3, #1
 8003782:	2b00      	cmp	r3, #0
 8003784:	d008      	beq.n	8003798 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8003786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003788:	f043 0308 	orr.w	r3, r3, #8
 800378c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8003796:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8003798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800379a:	2b00      	cmp	r3, #0
 800379c:	d008      	beq.n	80037b0 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80037a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037a4:	431a      	orrs	r2, r3
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 80037aa:	6878      	ldr	r0, [r7, #4]
 80037ac:	f001 f86a 	bl	8004884 <I2C_ITError>
  }
}
 80037b0:	bf00      	nop
 80037b2:	3728      	adds	r7, #40	; 0x28
 80037b4:	46bd      	mov	sp, r7
 80037b6:	bd80      	pop	{r7, pc}

080037b8 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80037b8:	b480      	push	{r7}
 80037ba:	b083      	sub	sp, #12
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80037c0:	bf00      	nop
 80037c2:	370c      	adds	r7, #12
 80037c4:	46bd      	mov	sp, r7
 80037c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ca:	4770      	bx	lr

080037cc <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80037cc:	b480      	push	{r7}
 80037ce:	b083      	sub	sp, #12
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80037d4:	bf00      	nop
 80037d6:	370c      	adds	r7, #12
 80037d8:	46bd      	mov	sp, r7
 80037da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037de:	4770      	bx	lr

080037e0 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80037e0:	b480      	push	{r7}
 80037e2:	b083      	sub	sp, #12
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80037e8:	bf00      	nop
 80037ea:	370c      	adds	r7, #12
 80037ec:	46bd      	mov	sp, r7
 80037ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f2:	4770      	bx	lr

080037f4 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80037f4:	b480      	push	{r7}
 80037f6:	b083      	sub	sp, #12
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80037fc:	bf00      	nop
 80037fe:	370c      	adds	r7, #12
 8003800:	46bd      	mov	sp, r7
 8003802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003806:	4770      	bx	lr

08003808 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003808:	b480      	push	{r7}
 800380a:	b083      	sub	sp, #12
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003810:	bf00      	nop
 8003812:	370c      	adds	r7, #12
 8003814:	46bd      	mov	sp, r7
 8003816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381a:	4770      	bx	lr

0800381c <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800381c:	b480      	push	{r7}
 800381e:	b083      	sub	sp, #12
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003824:	bf00      	nop
 8003826:	370c      	adds	r7, #12
 8003828:	46bd      	mov	sp, r7
 800382a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382e:	4770      	bx	lr

08003830 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b084      	sub	sp, #16
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800383e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003846:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800384c:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003852:	2b00      	cmp	r3, #0
 8003854:	d150      	bne.n	80038f8 <I2C_MasterTransmit_TXE+0xc8>
 8003856:	7bfb      	ldrb	r3, [r7, #15]
 8003858:	2b21      	cmp	r3, #33	; 0x21
 800385a:	d14d      	bne.n	80038f8 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800385c:	68bb      	ldr	r3, [r7, #8]
 800385e:	2b08      	cmp	r3, #8
 8003860:	d01d      	beq.n	800389e <I2C_MasterTransmit_TXE+0x6e>
 8003862:	68bb      	ldr	r3, [r7, #8]
 8003864:	2b20      	cmp	r3, #32
 8003866:	d01a      	beq.n	800389e <I2C_MasterTransmit_TXE+0x6e>
 8003868:	68bb      	ldr	r3, [r7, #8]
 800386a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800386e:	d016      	beq.n	800389e <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	685a      	ldr	r2, [r3, #4]
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800387e:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2211      	movs	r2, #17
 8003884:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2200      	movs	r2, #0
 800388a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2220      	movs	r2, #32
 8003892:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8003896:	6878      	ldr	r0, [r7, #4]
 8003898:	f7ff ff8e 	bl	80037b8 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800389c:	e060      	b.n	8003960 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	685a      	ldr	r2, [r3, #4]
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80038ac:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	681a      	ldr	r2, [r3, #0]
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038bc:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2200      	movs	r2, #0
 80038c2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2220      	movs	r2, #32
 80038c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80038d2:	b2db      	uxtb	r3, r3
 80038d4:	2b40      	cmp	r3, #64	; 0x40
 80038d6:	d107      	bne.n	80038e8 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2200      	movs	r2, #0
 80038dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80038e0:	6878      	ldr	r0, [r7, #4]
 80038e2:	f7ff ff7d 	bl	80037e0 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80038e6:	e03b      	b.n	8003960 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2200      	movs	r2, #0
 80038ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80038f0:	6878      	ldr	r0, [r7, #4]
 80038f2:	f7ff ff61 	bl	80037b8 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80038f6:	e033      	b.n	8003960 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80038f8:	7bfb      	ldrb	r3, [r7, #15]
 80038fa:	2b21      	cmp	r3, #33	; 0x21
 80038fc:	d005      	beq.n	800390a <I2C_MasterTransmit_TXE+0xda>
 80038fe:	7bbb      	ldrb	r3, [r7, #14]
 8003900:	2b40      	cmp	r3, #64	; 0x40
 8003902:	d12d      	bne.n	8003960 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8003904:	7bfb      	ldrb	r3, [r7, #15]
 8003906:	2b22      	cmp	r3, #34	; 0x22
 8003908:	d12a      	bne.n	8003960 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800390e:	b29b      	uxth	r3, r3
 8003910:	2b00      	cmp	r3, #0
 8003912:	d108      	bne.n	8003926 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	685a      	ldr	r2, [r3, #4]
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003922:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8003924:	e01c      	b.n	8003960 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800392c:	b2db      	uxtb	r3, r3
 800392e:	2b40      	cmp	r3, #64	; 0x40
 8003930:	d103      	bne.n	800393a <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003932:	6878      	ldr	r0, [r7, #4]
 8003934:	f000 f88e 	bl	8003a54 <I2C_MemoryTransmit_TXE_BTF>
}
 8003938:	e012      	b.n	8003960 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800393e:	781a      	ldrb	r2, [r3, #0]
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800394a:	1c5a      	adds	r2, r3, #1
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003954:	b29b      	uxth	r3, r3
 8003956:	3b01      	subs	r3, #1
 8003958:	b29a      	uxth	r2, r3
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800395e:	e7ff      	b.n	8003960 <I2C_MasterTransmit_TXE+0x130>
 8003960:	bf00      	nop
 8003962:	3710      	adds	r7, #16
 8003964:	46bd      	mov	sp, r7
 8003966:	bd80      	pop	{r7, pc}

08003968 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b084      	sub	sp, #16
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003974:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800397c:	b2db      	uxtb	r3, r3
 800397e:	2b21      	cmp	r3, #33	; 0x21
 8003980:	d164      	bne.n	8003a4c <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003986:	b29b      	uxth	r3, r3
 8003988:	2b00      	cmp	r3, #0
 800398a:	d012      	beq.n	80039b2 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003990:	781a      	ldrb	r2, [r3, #0]
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800399c:	1c5a      	adds	r2, r3, #1
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039a6:	b29b      	uxth	r3, r3
 80039a8:	3b01      	subs	r3, #1
 80039aa:	b29a      	uxth	r2, r3
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80039b0:	e04c      	b.n	8003a4c <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	2b08      	cmp	r3, #8
 80039b6:	d01d      	beq.n	80039f4 <I2C_MasterTransmit_BTF+0x8c>
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	2b20      	cmp	r3, #32
 80039bc:	d01a      	beq.n	80039f4 <I2C_MasterTransmit_BTF+0x8c>
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80039c4:	d016      	beq.n	80039f4 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	685a      	ldr	r2, [r3, #4]
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80039d4:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2211      	movs	r2, #17
 80039da:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2200      	movs	r2, #0
 80039e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2220      	movs	r2, #32
 80039e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80039ec:	6878      	ldr	r0, [r7, #4]
 80039ee:	f7ff fee3 	bl	80037b8 <HAL_I2C_MasterTxCpltCallback>
}
 80039f2:	e02b      	b.n	8003a4c <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	685a      	ldr	r2, [r3, #4]
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003a02:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	681a      	ldr	r2, [r3, #0]
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a12:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2200      	movs	r2, #0
 8003a18:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2220      	movs	r2, #32
 8003a1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003a28:	b2db      	uxtb	r3, r3
 8003a2a:	2b40      	cmp	r3, #64	; 0x40
 8003a2c:	d107      	bne.n	8003a3e <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2200      	movs	r2, #0
 8003a32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8003a36:	6878      	ldr	r0, [r7, #4]
 8003a38:	f7ff fed2 	bl	80037e0 <HAL_I2C_MemTxCpltCallback>
}
 8003a3c:	e006      	b.n	8003a4c <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2200      	movs	r2, #0
 8003a42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8003a46:	6878      	ldr	r0, [r7, #4]
 8003a48:	f7ff feb6 	bl	80037b8 <HAL_I2C_MasterTxCpltCallback>
}
 8003a4c:	bf00      	nop
 8003a4e:	3710      	adds	r7, #16
 8003a50:	46bd      	mov	sp, r7
 8003a52:	bd80      	pop	{r7, pc}

08003a54 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b084      	sub	sp, #16
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a62:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d11d      	bne.n	8003aa8 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a70:	2b01      	cmp	r3, #1
 8003a72:	d10b      	bne.n	8003a8c <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a78:	b2da      	uxtb	r2, r3
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a84:	1c9a      	adds	r2, r3, #2
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8003a8a:	e073      	b.n	8003b74 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a90:	b29b      	uxth	r3, r3
 8003a92:	121b      	asrs	r3, r3, #8
 8003a94:	b2da      	uxtb	r2, r3
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003aa0:	1c5a      	adds	r2, r3, #1
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003aa6:	e065      	b.n	8003b74 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003aac:	2b01      	cmp	r3, #1
 8003aae:	d10b      	bne.n	8003ac8 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ab4:	b2da      	uxtb	r2, r3
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ac0:	1c5a      	adds	r2, r3, #1
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003ac6:	e055      	b.n	8003b74 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003acc:	2b02      	cmp	r3, #2
 8003ace:	d151      	bne.n	8003b74 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8003ad0:	7bfb      	ldrb	r3, [r7, #15]
 8003ad2:	2b22      	cmp	r3, #34	; 0x22
 8003ad4:	d10d      	bne.n	8003af2 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	681a      	ldr	r2, [r3, #0]
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ae4:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003aea:	1c5a      	adds	r2, r3, #1
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003af0:	e040      	b.n	8003b74 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003af6:	b29b      	uxth	r3, r3
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d015      	beq.n	8003b28 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8003afc:	7bfb      	ldrb	r3, [r7, #15]
 8003afe:	2b21      	cmp	r3, #33	; 0x21
 8003b00:	d112      	bne.n	8003b28 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b06:	781a      	ldrb	r2, [r3, #0]
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b12:	1c5a      	adds	r2, r3, #1
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b1c:	b29b      	uxth	r3, r3
 8003b1e:	3b01      	subs	r3, #1
 8003b20:	b29a      	uxth	r2, r3
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003b26:	e025      	b.n	8003b74 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b2c:	b29b      	uxth	r3, r3
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d120      	bne.n	8003b74 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8003b32:	7bfb      	ldrb	r3, [r7, #15]
 8003b34:	2b21      	cmp	r3, #33	; 0x21
 8003b36:	d11d      	bne.n	8003b74 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	685a      	ldr	r2, [r3, #4]
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003b46:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	681a      	ldr	r2, [r3, #0]
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b56:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2220      	movs	r2, #32
 8003b62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2200      	movs	r2, #0
 8003b6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8003b6e:	6878      	ldr	r0, [r7, #4]
 8003b70:	f7ff fe36 	bl	80037e0 <HAL_I2C_MemTxCpltCallback>
}
 8003b74:	bf00      	nop
 8003b76:	3710      	adds	r7, #16
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	bd80      	pop	{r7, pc}

08003b7c <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b084      	sub	sp, #16
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b8a:	b2db      	uxtb	r3, r3
 8003b8c:	2b22      	cmp	r3, #34	; 0x22
 8003b8e:	f040 80a2 	bne.w	8003cd6 <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b96:	b29b      	uxth	r3, r3
 8003b98:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	2b03      	cmp	r3, #3
 8003b9e:	d921      	bls.n	8003be4 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	691a      	ldr	r2, [r3, #16]
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003baa:	b2d2      	uxtb	r2, r2
 8003bac:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bb2:	1c5a      	adds	r2, r3, #1
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bbc:	b29b      	uxth	r3, r3
 8003bbe:	3b01      	subs	r3, #1
 8003bc0:	b29a      	uxth	r2, r3
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bca:	b29b      	uxth	r3, r3
 8003bcc:	2b03      	cmp	r3, #3
 8003bce:	f040 8082 	bne.w	8003cd6 <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	685a      	ldr	r2, [r3, #4]
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003be0:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8003be2:	e078      	b.n	8003cd6 <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003be8:	2b02      	cmp	r3, #2
 8003bea:	d074      	beq.n	8003cd6 <I2C_MasterReceive_RXNE+0x15a>
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	2b01      	cmp	r3, #1
 8003bf0:	d002      	beq.n	8003bf8 <I2C_MasterReceive_RXNE+0x7c>
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d16e      	bne.n	8003cd6 <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003bf8:	6878      	ldr	r0, [r7, #4]
 8003bfa:	f001 f81d 	bl	8004c38 <I2C_WaitOnSTOPRequestThroughIT>
 8003bfe:	4603      	mov	r3, r0
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d142      	bne.n	8003c8a <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	681a      	ldr	r2, [r3, #0]
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c12:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	685a      	ldr	r2, [r3, #4]
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003c22:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	691a      	ldr	r2, [r3, #16]
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c2e:	b2d2      	uxtb	r2, r2
 8003c30:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c36:	1c5a      	adds	r2, r3, #1
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c40:	b29b      	uxth	r3, r3
 8003c42:	3b01      	subs	r3, #1
 8003c44:	b29a      	uxth	r2, r3
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2220      	movs	r2, #32
 8003c4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003c58:	b2db      	uxtb	r3, r3
 8003c5a:	2b40      	cmp	r3, #64	; 0x40
 8003c5c:	d10a      	bne.n	8003c74 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2200      	movs	r2, #0
 8003c62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2200      	movs	r2, #0
 8003c6a:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8003c6c:	6878      	ldr	r0, [r7, #4]
 8003c6e:	f7ff fdc1 	bl	80037f4 <HAL_I2C_MemRxCpltCallback>
}
 8003c72:	e030      	b.n	8003cd6 <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2200      	movs	r2, #0
 8003c78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2212      	movs	r2, #18
 8003c80:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8003c82:	6878      	ldr	r0, [r7, #4]
 8003c84:	f7ff fda2 	bl	80037cc <HAL_I2C_MasterRxCpltCallback>
}
 8003c88:	e025      	b.n	8003cd6 <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	685a      	ldr	r2, [r3, #4]
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003c98:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	691a      	ldr	r2, [r3, #16]
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ca4:	b2d2      	uxtb	r2, r2
 8003ca6:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cac:	1c5a      	adds	r2, r3, #1
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cb6:	b29b      	uxth	r3, r3
 8003cb8:	3b01      	subs	r3, #1
 8003cba:	b29a      	uxth	r2, r3
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2220      	movs	r2, #32
 8003cc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2200      	movs	r2, #0
 8003ccc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8003cd0:	6878      	ldr	r0, [r7, #4]
 8003cd2:	f7ff fd99 	bl	8003808 <HAL_I2C_ErrorCallback>
}
 8003cd6:	bf00      	nop
 8003cd8:	3710      	adds	r7, #16
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	bd80      	pop	{r7, pc}

08003cde <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003cde:	b580      	push	{r7, lr}
 8003ce0:	b084      	sub	sp, #16
 8003ce2:	af00      	add	r7, sp, #0
 8003ce4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cea:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cf0:	b29b      	uxth	r3, r3
 8003cf2:	2b04      	cmp	r3, #4
 8003cf4:	d11b      	bne.n	8003d2e <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	685a      	ldr	r2, [r3, #4]
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d04:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	691a      	ldr	r2, [r3, #16]
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d10:	b2d2      	uxtb	r2, r2
 8003d12:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d18:	1c5a      	adds	r2, r3, #1
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d22:	b29b      	uxth	r3, r3
 8003d24:	3b01      	subs	r3, #1
 8003d26:	b29a      	uxth	r2, r3
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8003d2c:	e0bd      	b.n	8003eaa <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d32:	b29b      	uxth	r3, r3
 8003d34:	2b03      	cmp	r3, #3
 8003d36:	d129      	bne.n	8003d8c <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	685a      	ldr	r2, [r3, #4]
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d46:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	2b04      	cmp	r3, #4
 8003d4c:	d00a      	beq.n	8003d64 <I2C_MasterReceive_BTF+0x86>
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	2b02      	cmp	r3, #2
 8003d52:	d007      	beq.n	8003d64 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	681a      	ldr	r2, [r3, #0]
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d62:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	691a      	ldr	r2, [r3, #16]
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d6e:	b2d2      	uxtb	r2, r2
 8003d70:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d76:	1c5a      	adds	r2, r3, #1
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d80:	b29b      	uxth	r3, r3
 8003d82:	3b01      	subs	r3, #1
 8003d84:	b29a      	uxth	r2, r3
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003d8a:	e08e      	b.n	8003eaa <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d90:	b29b      	uxth	r3, r3
 8003d92:	2b02      	cmp	r3, #2
 8003d94:	d176      	bne.n	8003e84 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	2b01      	cmp	r3, #1
 8003d9a:	d002      	beq.n	8003da2 <I2C_MasterReceive_BTF+0xc4>
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	2b10      	cmp	r3, #16
 8003da0:	d108      	bne.n	8003db4 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	681a      	ldr	r2, [r3, #0]
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003db0:	601a      	str	r2, [r3, #0]
 8003db2:	e019      	b.n	8003de8 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	2b04      	cmp	r3, #4
 8003db8:	d002      	beq.n	8003dc0 <I2C_MasterReceive_BTF+0xe2>
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	2b02      	cmp	r3, #2
 8003dbe:	d108      	bne.n	8003dd2 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	681a      	ldr	r2, [r3, #0]
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003dce:	601a      	str	r2, [r3, #0]
 8003dd0:	e00a      	b.n	8003de8 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	2b10      	cmp	r3, #16
 8003dd6:	d007      	beq.n	8003de8 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	681a      	ldr	r2, [r3, #0]
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003de6:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	691a      	ldr	r2, [r3, #16]
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003df2:	b2d2      	uxtb	r2, r2
 8003df4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dfa:	1c5a      	adds	r2, r3, #1
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e04:	b29b      	uxth	r3, r3
 8003e06:	3b01      	subs	r3, #1
 8003e08:	b29a      	uxth	r2, r3
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	691a      	ldr	r2, [r3, #16]
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e18:	b2d2      	uxtb	r2, r2
 8003e1a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e20:	1c5a      	adds	r2, r3, #1
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e2a:	b29b      	uxth	r3, r3
 8003e2c:	3b01      	subs	r3, #1
 8003e2e:	b29a      	uxth	r2, r3
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	685a      	ldr	r2, [r3, #4]
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003e42:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2220      	movs	r2, #32
 8003e48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003e52:	b2db      	uxtb	r3, r3
 8003e54:	2b40      	cmp	r3, #64	; 0x40
 8003e56:	d10a      	bne.n	8003e6e <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2200      	movs	r2, #0
 8003e64:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003e66:	6878      	ldr	r0, [r7, #4]
 8003e68:	f7ff fcc4 	bl	80037f4 <HAL_I2C_MemRxCpltCallback>
}
 8003e6c:	e01d      	b.n	8003eaa <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2200      	movs	r2, #0
 8003e72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2212      	movs	r2, #18
 8003e7a:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003e7c:	6878      	ldr	r0, [r7, #4]
 8003e7e:	f7ff fca5 	bl	80037cc <HAL_I2C_MasterRxCpltCallback>
}
 8003e82:	e012      	b.n	8003eaa <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	691a      	ldr	r2, [r3, #16]
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e8e:	b2d2      	uxtb	r2, r2
 8003e90:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e96:	1c5a      	adds	r2, r3, #1
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ea0:	b29b      	uxth	r3, r3
 8003ea2:	3b01      	subs	r3, #1
 8003ea4:	b29a      	uxth	r2, r3
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003eaa:	bf00      	nop
 8003eac:	3710      	adds	r7, #16
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	bd80      	pop	{r7, pc}

08003eb2 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8003eb2:	b480      	push	{r7}
 8003eb4:	b083      	sub	sp, #12
 8003eb6:	af00      	add	r7, sp, #0
 8003eb8:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003ec0:	b2db      	uxtb	r3, r3
 8003ec2:	2b40      	cmp	r3, #64	; 0x40
 8003ec4:	d117      	bne.n	8003ef6 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d109      	bne.n	8003ee2 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ed2:	b2db      	uxtb	r3, r3
 8003ed4:	461a      	mov	r2, r3
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003ede:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8003ee0:	e067      	b.n	8003fb2 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ee6:	b2db      	uxtb	r3, r3
 8003ee8:	f043 0301 	orr.w	r3, r3, #1
 8003eec:	b2da      	uxtb	r2, r3
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	611a      	str	r2, [r3, #16]
}
 8003ef4:	e05d      	b.n	8003fb2 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	691b      	ldr	r3, [r3, #16]
 8003efa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003efe:	d133      	bne.n	8003f68 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f06:	b2db      	uxtb	r3, r3
 8003f08:	2b21      	cmp	r3, #33	; 0x21
 8003f0a:	d109      	bne.n	8003f20 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f10:	b2db      	uxtb	r3, r3
 8003f12:	461a      	mov	r2, r3
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003f1c:	611a      	str	r2, [r3, #16]
 8003f1e:	e008      	b.n	8003f32 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f24:	b2db      	uxtb	r3, r3
 8003f26:	f043 0301 	orr.w	r3, r3, #1
 8003f2a:	b2da      	uxtb	r2, r3
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d004      	beq.n	8003f44 <I2C_Master_SB+0x92>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d108      	bne.n	8003f56 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d032      	beq.n	8003fb2 <I2C_Master_SB+0x100>
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d02d      	beq.n	8003fb2 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	685a      	ldr	r2, [r3, #4]
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003f64:	605a      	str	r2, [r3, #4]
}
 8003f66:	e024      	b.n	8003fb2 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d10e      	bne.n	8003f8e <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f74:	b29b      	uxth	r3, r3
 8003f76:	11db      	asrs	r3, r3, #7
 8003f78:	b2db      	uxtb	r3, r3
 8003f7a:	f003 0306 	and.w	r3, r3, #6
 8003f7e:	b2db      	uxtb	r3, r3
 8003f80:	f063 030f 	orn	r3, r3, #15
 8003f84:	b2da      	uxtb	r2, r3
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	611a      	str	r2, [r3, #16]
}
 8003f8c:	e011      	b.n	8003fb2 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f92:	2b01      	cmp	r3, #1
 8003f94:	d10d      	bne.n	8003fb2 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f9a:	b29b      	uxth	r3, r3
 8003f9c:	11db      	asrs	r3, r3, #7
 8003f9e:	b2db      	uxtb	r3, r3
 8003fa0:	f003 0306 	and.w	r3, r3, #6
 8003fa4:	b2db      	uxtb	r3, r3
 8003fa6:	f063 030e 	orn	r3, r3, #14
 8003faa:	b2da      	uxtb	r2, r3
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	611a      	str	r2, [r3, #16]
}
 8003fb2:	bf00      	nop
 8003fb4:	370c      	adds	r7, #12
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbc:	4770      	bx	lr

08003fbe <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8003fbe:	b480      	push	{r7}
 8003fc0:	b083      	sub	sp, #12
 8003fc2:	af00      	add	r7, sp, #0
 8003fc4:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fca:	b2da      	uxtb	r2, r3
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d004      	beq.n	8003fe4 <I2C_Master_ADD10+0x26>
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d108      	bne.n	8003ff6 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d00c      	beq.n	8004006 <I2C_Master_ADD10+0x48>
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ff0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d007      	beq.n	8004006 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	685a      	ldr	r2, [r3, #4]
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004004:	605a      	str	r2, [r3, #4]
  }
}
 8004006:	bf00      	nop
 8004008:	370c      	adds	r7, #12
 800400a:	46bd      	mov	sp, r7
 800400c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004010:	4770      	bx	lr

08004012 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8004012:	b480      	push	{r7}
 8004014:	b091      	sub	sp, #68	; 0x44
 8004016:	af00      	add	r7, sp, #0
 8004018:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004020:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004028:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800402e:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004036:	b2db      	uxtb	r3, r3
 8004038:	2b22      	cmp	r3, #34	; 0x22
 800403a:	f040 8169 	bne.w	8004310 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004042:	2b00      	cmp	r3, #0
 8004044:	d10f      	bne.n	8004066 <I2C_Master_ADDR+0x54>
 8004046:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800404a:	2b40      	cmp	r3, #64	; 0x40
 800404c:	d10b      	bne.n	8004066 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800404e:	2300      	movs	r3, #0
 8004050:	633b      	str	r3, [r7, #48]	; 0x30
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	695b      	ldr	r3, [r3, #20]
 8004058:	633b      	str	r3, [r7, #48]	; 0x30
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	699b      	ldr	r3, [r3, #24]
 8004060:	633b      	str	r3, [r7, #48]	; 0x30
 8004062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004064:	e160      	b.n	8004328 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800406a:	2b00      	cmp	r3, #0
 800406c:	d11d      	bne.n	80040aa <I2C_Master_ADDR+0x98>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	691b      	ldr	r3, [r3, #16]
 8004072:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004076:	d118      	bne.n	80040aa <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004078:	2300      	movs	r3, #0
 800407a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	695b      	ldr	r3, [r3, #20]
 8004082:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	699b      	ldr	r3, [r3, #24]
 800408a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800408c:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	681a      	ldr	r2, [r3, #0]
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800409c:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040a2:	1c5a      	adds	r2, r3, #1
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	651a      	str	r2, [r3, #80]	; 0x50
 80040a8:	e13e      	b.n	8004328 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040ae:	b29b      	uxth	r3, r3
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d113      	bne.n	80040dc <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040b4:	2300      	movs	r3, #0
 80040b6:	62bb      	str	r3, [r7, #40]	; 0x28
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	695b      	ldr	r3, [r3, #20]
 80040be:	62bb      	str	r3, [r7, #40]	; 0x28
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	699b      	ldr	r3, [r3, #24]
 80040c6:	62bb      	str	r3, [r7, #40]	; 0x28
 80040c8:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	681a      	ldr	r2, [r3, #0]
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040d8:	601a      	str	r2, [r3, #0]
 80040da:	e115      	b.n	8004308 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040e0:	b29b      	uxth	r3, r3
 80040e2:	2b01      	cmp	r3, #1
 80040e4:	f040 808a 	bne.w	80041fc <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80040e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040ea:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80040ee:	d137      	bne.n	8004160 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	681a      	ldr	r2, [r3, #0]
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040fe:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	685b      	ldr	r3, [r3, #4]
 8004106:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800410a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800410e:	d113      	bne.n	8004138 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	681a      	ldr	r2, [r3, #0]
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800411e:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004120:	2300      	movs	r3, #0
 8004122:	627b      	str	r3, [r7, #36]	; 0x24
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	695b      	ldr	r3, [r3, #20]
 800412a:	627b      	str	r3, [r7, #36]	; 0x24
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	699b      	ldr	r3, [r3, #24]
 8004132:	627b      	str	r3, [r7, #36]	; 0x24
 8004134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004136:	e0e7      	b.n	8004308 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004138:	2300      	movs	r3, #0
 800413a:	623b      	str	r3, [r7, #32]
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	695b      	ldr	r3, [r3, #20]
 8004142:	623b      	str	r3, [r7, #32]
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	699b      	ldr	r3, [r3, #24]
 800414a:	623b      	str	r3, [r7, #32]
 800414c:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	681a      	ldr	r2, [r3, #0]
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800415c:	601a      	str	r2, [r3, #0]
 800415e:	e0d3      	b.n	8004308 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8004160:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004162:	2b08      	cmp	r3, #8
 8004164:	d02e      	beq.n	80041c4 <I2C_Master_ADDR+0x1b2>
 8004166:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004168:	2b20      	cmp	r3, #32
 800416a:	d02b      	beq.n	80041c4 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 800416c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800416e:	2b12      	cmp	r3, #18
 8004170:	d102      	bne.n	8004178 <I2C_Master_ADDR+0x166>
 8004172:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004174:	2b01      	cmp	r3, #1
 8004176:	d125      	bne.n	80041c4 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004178:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800417a:	2b04      	cmp	r3, #4
 800417c:	d00e      	beq.n	800419c <I2C_Master_ADDR+0x18a>
 800417e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004180:	2b02      	cmp	r3, #2
 8004182:	d00b      	beq.n	800419c <I2C_Master_ADDR+0x18a>
 8004184:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004186:	2b10      	cmp	r3, #16
 8004188:	d008      	beq.n	800419c <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	681a      	ldr	r2, [r3, #0]
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004198:	601a      	str	r2, [r3, #0]
 800419a:	e007      	b.n	80041ac <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	681a      	ldr	r2, [r3, #0]
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80041aa:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041ac:	2300      	movs	r3, #0
 80041ae:	61fb      	str	r3, [r7, #28]
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	695b      	ldr	r3, [r3, #20]
 80041b6:	61fb      	str	r3, [r7, #28]
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	699b      	ldr	r3, [r3, #24]
 80041be:	61fb      	str	r3, [r7, #28]
 80041c0:	69fb      	ldr	r3, [r7, #28]
 80041c2:	e0a1      	b.n	8004308 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	681a      	ldr	r2, [r3, #0]
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041d2:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041d4:	2300      	movs	r3, #0
 80041d6:	61bb      	str	r3, [r7, #24]
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	695b      	ldr	r3, [r3, #20]
 80041de:	61bb      	str	r3, [r7, #24]
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	699b      	ldr	r3, [r3, #24]
 80041e6:	61bb      	str	r3, [r7, #24]
 80041e8:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	681a      	ldr	r2, [r3, #0]
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041f8:	601a      	str	r2, [r3, #0]
 80041fa:	e085      	b.n	8004308 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004200:	b29b      	uxth	r3, r3
 8004202:	2b02      	cmp	r3, #2
 8004204:	d14d      	bne.n	80042a2 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004206:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004208:	2b04      	cmp	r3, #4
 800420a:	d016      	beq.n	800423a <I2C_Master_ADDR+0x228>
 800420c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800420e:	2b02      	cmp	r3, #2
 8004210:	d013      	beq.n	800423a <I2C_Master_ADDR+0x228>
 8004212:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004214:	2b10      	cmp	r3, #16
 8004216:	d010      	beq.n	800423a <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	681a      	ldr	r2, [r3, #0]
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004226:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	681a      	ldr	r2, [r3, #0]
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004236:	601a      	str	r2, [r3, #0]
 8004238:	e007      	b.n	800424a <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	681a      	ldr	r2, [r3, #0]
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004248:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	685b      	ldr	r3, [r3, #4]
 8004250:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004254:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004258:	d117      	bne.n	800428a <I2C_Master_ADDR+0x278>
 800425a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800425c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004260:	d00b      	beq.n	800427a <I2C_Master_ADDR+0x268>
 8004262:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004264:	2b01      	cmp	r3, #1
 8004266:	d008      	beq.n	800427a <I2C_Master_ADDR+0x268>
 8004268:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800426a:	2b08      	cmp	r3, #8
 800426c:	d005      	beq.n	800427a <I2C_Master_ADDR+0x268>
 800426e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004270:	2b10      	cmp	r3, #16
 8004272:	d002      	beq.n	800427a <I2C_Master_ADDR+0x268>
 8004274:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004276:	2b20      	cmp	r3, #32
 8004278:	d107      	bne.n	800428a <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	685a      	ldr	r2, [r3, #4]
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004288:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800428a:	2300      	movs	r3, #0
 800428c:	617b      	str	r3, [r7, #20]
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	695b      	ldr	r3, [r3, #20]
 8004294:	617b      	str	r3, [r7, #20]
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	699b      	ldr	r3, [r3, #24]
 800429c:	617b      	str	r3, [r7, #20]
 800429e:	697b      	ldr	r3, [r7, #20]
 80042a0:	e032      	b.n	8004308 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	681a      	ldr	r2, [r3, #0]
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80042b0:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	685b      	ldr	r3, [r3, #4]
 80042b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80042bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80042c0:	d117      	bne.n	80042f2 <I2C_Master_ADDR+0x2e0>
 80042c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042c4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80042c8:	d00b      	beq.n	80042e2 <I2C_Master_ADDR+0x2d0>
 80042ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042cc:	2b01      	cmp	r3, #1
 80042ce:	d008      	beq.n	80042e2 <I2C_Master_ADDR+0x2d0>
 80042d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042d2:	2b08      	cmp	r3, #8
 80042d4:	d005      	beq.n	80042e2 <I2C_Master_ADDR+0x2d0>
 80042d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042d8:	2b10      	cmp	r3, #16
 80042da:	d002      	beq.n	80042e2 <I2C_Master_ADDR+0x2d0>
 80042dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042de:	2b20      	cmp	r3, #32
 80042e0:	d107      	bne.n	80042f2 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	685a      	ldr	r2, [r3, #4]
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80042f0:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80042f2:	2300      	movs	r3, #0
 80042f4:	613b      	str	r3, [r7, #16]
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	695b      	ldr	r3, [r3, #20]
 80042fc:	613b      	str	r3, [r7, #16]
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	699b      	ldr	r3, [r3, #24]
 8004304:	613b      	str	r3, [r7, #16]
 8004306:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2200      	movs	r2, #0
 800430c:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800430e:	e00b      	b.n	8004328 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004310:	2300      	movs	r3, #0
 8004312:	60fb      	str	r3, [r7, #12]
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	695b      	ldr	r3, [r3, #20]
 800431a:	60fb      	str	r3, [r7, #12]
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	699b      	ldr	r3, [r3, #24]
 8004322:	60fb      	str	r3, [r7, #12]
 8004324:	68fb      	ldr	r3, [r7, #12]
}
 8004326:	e7ff      	b.n	8004328 <I2C_Master_ADDR+0x316>
 8004328:	bf00      	nop
 800432a:	3744      	adds	r7, #68	; 0x44
 800432c:	46bd      	mov	sp, r7
 800432e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004332:	4770      	bx	lr

08004334 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b084      	sub	sp, #16
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004342:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004348:	b29b      	uxth	r3, r3
 800434a:	2b00      	cmp	r3, #0
 800434c:	d02b      	beq.n	80043a6 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004352:	781a      	ldrb	r2, [r3, #0]
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800435e:	1c5a      	adds	r2, r3, #1
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004368:	b29b      	uxth	r3, r3
 800436a:	3b01      	subs	r3, #1
 800436c:	b29a      	uxth	r2, r3
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004376:	b29b      	uxth	r3, r3
 8004378:	2b00      	cmp	r3, #0
 800437a:	d114      	bne.n	80043a6 <I2C_SlaveTransmit_TXE+0x72>
 800437c:	7bfb      	ldrb	r3, [r7, #15]
 800437e:	2b29      	cmp	r3, #41	; 0x29
 8004380:	d111      	bne.n	80043a6 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	685a      	ldr	r2, [r3, #4]
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004390:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2221      	movs	r2, #33	; 0x21
 8004396:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2228      	movs	r2, #40	; 0x28
 800439c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80043a0:	6878      	ldr	r0, [r7, #4]
 80043a2:	f7fd fa67 	bl	8001874 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80043a6:	bf00      	nop
 80043a8:	3710      	adds	r7, #16
 80043aa:	46bd      	mov	sp, r7
 80043ac:	bd80      	pop	{r7, pc}

080043ae <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80043ae:	b480      	push	{r7}
 80043b0:	b083      	sub	sp, #12
 80043b2:	af00      	add	r7, sp, #0
 80043b4:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043ba:	b29b      	uxth	r3, r3
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d011      	beq.n	80043e4 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043c4:	781a      	ldrb	r2, [r3, #0]
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043d0:	1c5a      	adds	r2, r3, #1
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043da:	b29b      	uxth	r3, r3
 80043dc:	3b01      	subs	r3, #1
 80043de:	b29a      	uxth	r2, r3
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80043e4:	bf00      	nop
 80043e6:	370c      	adds	r7, #12
 80043e8:	46bd      	mov	sp, r7
 80043ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ee:	4770      	bx	lr

080043f0 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b084      	sub	sp, #16
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043fe:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004404:	b29b      	uxth	r3, r3
 8004406:	2b00      	cmp	r3, #0
 8004408:	d02c      	beq.n	8004464 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	691a      	ldr	r2, [r3, #16]
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004414:	b2d2      	uxtb	r2, r2
 8004416:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800441c:	1c5a      	adds	r2, r3, #1
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004426:	b29b      	uxth	r3, r3
 8004428:	3b01      	subs	r3, #1
 800442a:	b29a      	uxth	r2, r3
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004434:	b29b      	uxth	r3, r3
 8004436:	2b00      	cmp	r3, #0
 8004438:	d114      	bne.n	8004464 <I2C_SlaveReceive_RXNE+0x74>
 800443a:	7bfb      	ldrb	r3, [r7, #15]
 800443c:	2b2a      	cmp	r3, #42	; 0x2a
 800443e:	d111      	bne.n	8004464 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	685a      	ldr	r2, [r3, #4]
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800444e:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2222      	movs	r2, #34	; 0x22
 8004454:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2228      	movs	r2, #40	; 0x28
 800445a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800445e:	6878      	ldr	r0, [r7, #4]
 8004460:	f7fd fa12 	bl	8001888 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004464:	bf00      	nop
 8004466:	3710      	adds	r7, #16
 8004468:	46bd      	mov	sp, r7
 800446a:	bd80      	pop	{r7, pc}

0800446c <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800446c:	b480      	push	{r7}
 800446e:	b083      	sub	sp, #12
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004478:	b29b      	uxth	r3, r3
 800447a:	2b00      	cmp	r3, #0
 800447c:	d012      	beq.n	80044a4 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	691a      	ldr	r2, [r3, #16]
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004488:	b2d2      	uxtb	r2, r2
 800448a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004490:	1c5a      	adds	r2, r3, #1
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800449a:	b29b      	uxth	r3, r3
 800449c:	3b01      	subs	r3, #1
 800449e:	b29a      	uxth	r2, r3
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80044a4:	bf00      	nop
 80044a6:	370c      	adds	r7, #12
 80044a8:	46bd      	mov	sp, r7
 80044aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ae:	4770      	bx	lr

080044b0 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b084      	sub	sp, #16
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
 80044b8:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80044ba:	2300      	movs	r3, #0
 80044bc:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044c4:	b2db      	uxtb	r3, r3
 80044c6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80044ca:	2b28      	cmp	r3, #40	; 0x28
 80044cc:	d127      	bne.n	800451e <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	685a      	ldr	r2, [r3, #4]
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80044dc:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	089b      	lsrs	r3, r3, #2
 80044e2:	f003 0301 	and.w	r3, r3, #1
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d101      	bne.n	80044ee <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80044ea:	2301      	movs	r3, #1
 80044ec:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	09db      	lsrs	r3, r3, #7
 80044f2:	f003 0301 	and.w	r3, r3, #1
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d103      	bne.n	8004502 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	68db      	ldr	r3, [r3, #12]
 80044fe:	81bb      	strh	r3, [r7, #12]
 8004500:	e002      	b.n	8004508 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	699b      	ldr	r3, [r3, #24]
 8004506:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2200      	movs	r2, #0
 800450c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8004510:	89ba      	ldrh	r2, [r7, #12]
 8004512:	7bfb      	ldrb	r3, [r7, #15]
 8004514:	4619      	mov	r1, r3
 8004516:	6878      	ldr	r0, [r7, #4]
 8004518:	f7fd f98a 	bl	8001830 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800451c:	e00e      	b.n	800453c <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800451e:	2300      	movs	r3, #0
 8004520:	60bb      	str	r3, [r7, #8]
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	695b      	ldr	r3, [r3, #20]
 8004528:	60bb      	str	r3, [r7, #8]
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	699b      	ldr	r3, [r3, #24]
 8004530:	60bb      	str	r3, [r7, #8]
 8004532:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2200      	movs	r2, #0
 8004538:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 800453c:	bf00      	nop
 800453e:	3710      	adds	r7, #16
 8004540:	46bd      	mov	sp, r7
 8004542:	bd80      	pop	{r7, pc}

08004544 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8004544:	b580      	push	{r7, lr}
 8004546:	b084      	sub	sp, #16
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004552:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	685a      	ldr	r2, [r3, #4]
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004562:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8004564:	2300      	movs	r3, #0
 8004566:	60bb      	str	r3, [r7, #8]
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	695b      	ldr	r3, [r3, #20]
 800456e:	60bb      	str	r3, [r7, #8]
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	681a      	ldr	r2, [r3, #0]
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f042 0201 	orr.w	r2, r2, #1
 800457e:	601a      	str	r2, [r3, #0]
 8004580:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	681a      	ldr	r2, [r3, #0]
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004590:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	685b      	ldr	r3, [r3, #4]
 8004598:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800459c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80045a0:	d172      	bne.n	8004688 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80045a2:	7bfb      	ldrb	r3, [r7, #15]
 80045a4:	2b22      	cmp	r3, #34	; 0x22
 80045a6:	d002      	beq.n	80045ae <I2C_Slave_STOPF+0x6a>
 80045a8:	7bfb      	ldrb	r3, [r7, #15]
 80045aa:	2b2a      	cmp	r3, #42	; 0x2a
 80045ac:	d135      	bne.n	800461a <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	685b      	ldr	r3, [r3, #4]
 80045b6:	b29a      	uxth	r2, r3
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045c0:	b29b      	uxth	r3, r3
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d005      	beq.n	80045d2 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ca:	f043 0204 	orr.w	r2, r3, #4
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	685a      	ldr	r2, [r3, #4]
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80045e0:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045e6:	4618      	mov	r0, r3
 80045e8:	f7fe facc 	bl	8002b84 <HAL_DMA_GetState>
 80045ec:	4603      	mov	r3, r0
 80045ee:	2b01      	cmp	r3, #1
 80045f0:	d049      	beq.n	8004686 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045f6:	4a69      	ldr	r2, [pc, #420]	; (800479c <I2C_Slave_STOPF+0x258>)
 80045f8:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045fe:	4618      	mov	r0, r3
 8004600:	f7fe fa9e 	bl	8002b40 <HAL_DMA_Abort_IT>
 8004604:	4603      	mov	r3, r0
 8004606:	2b00      	cmp	r3, #0
 8004608:	d03d      	beq.n	8004686 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800460e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004610:	687a      	ldr	r2, [r7, #4]
 8004612:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004614:	4610      	mov	r0, r2
 8004616:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004618:	e035      	b.n	8004686 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	685b      	ldr	r3, [r3, #4]
 8004622:	b29a      	uxth	r2, r3
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800462c:	b29b      	uxth	r3, r3
 800462e:	2b00      	cmp	r3, #0
 8004630:	d005      	beq.n	800463e <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004636:	f043 0204 	orr.w	r2, r3, #4
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	685a      	ldr	r2, [r3, #4]
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800464c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004652:	4618      	mov	r0, r3
 8004654:	f7fe fa96 	bl	8002b84 <HAL_DMA_GetState>
 8004658:	4603      	mov	r3, r0
 800465a:	2b01      	cmp	r3, #1
 800465c:	d014      	beq.n	8004688 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004662:	4a4e      	ldr	r2, [pc, #312]	; (800479c <I2C_Slave_STOPF+0x258>)
 8004664:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800466a:	4618      	mov	r0, r3
 800466c:	f7fe fa68 	bl	8002b40 <HAL_DMA_Abort_IT>
 8004670:	4603      	mov	r3, r0
 8004672:	2b00      	cmp	r3, #0
 8004674:	d008      	beq.n	8004688 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800467a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800467c:	687a      	ldr	r2, [r7, #4]
 800467e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004680:	4610      	mov	r0, r2
 8004682:	4798      	blx	r3
 8004684:	e000      	b.n	8004688 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004686:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800468c:	b29b      	uxth	r3, r3
 800468e:	2b00      	cmp	r3, #0
 8004690:	d03e      	beq.n	8004710 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	695b      	ldr	r3, [r3, #20]
 8004698:	f003 0304 	and.w	r3, r3, #4
 800469c:	2b04      	cmp	r3, #4
 800469e:	d112      	bne.n	80046c6 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	691a      	ldr	r2, [r3, #16]
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046aa:	b2d2      	uxtb	r2, r2
 80046ac:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046b2:	1c5a      	adds	r2, r3, #1
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046bc:	b29b      	uxth	r3, r3
 80046be:	3b01      	subs	r3, #1
 80046c0:	b29a      	uxth	r2, r3
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	695b      	ldr	r3, [r3, #20]
 80046cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046d0:	2b40      	cmp	r3, #64	; 0x40
 80046d2:	d112      	bne.n	80046fa <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	691a      	ldr	r2, [r3, #16]
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046de:	b2d2      	uxtb	r2, r2
 80046e0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046e6:	1c5a      	adds	r2, r3, #1
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046f0:	b29b      	uxth	r3, r3
 80046f2:	3b01      	subs	r3, #1
 80046f4:	b29a      	uxth	r2, r3
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046fe:	b29b      	uxth	r3, r3
 8004700:	2b00      	cmp	r3, #0
 8004702:	d005      	beq.n	8004710 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004708:	f043 0204 	orr.w	r2, r3, #4
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004714:	2b00      	cmp	r3, #0
 8004716:	d003      	beq.n	8004720 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8004718:	6878      	ldr	r0, [r7, #4]
 800471a:	f000 f8b3 	bl	8004884 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800471e:	e039      	b.n	8004794 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004720:	7bfb      	ldrb	r3, [r7, #15]
 8004722:	2b2a      	cmp	r3, #42	; 0x2a
 8004724:	d109      	bne.n	800473a <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2200      	movs	r2, #0
 800472a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2228      	movs	r2, #40	; 0x28
 8004730:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004734:	6878      	ldr	r0, [r7, #4]
 8004736:	f7fd f8a7 	bl	8001888 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004740:	b2db      	uxtb	r3, r3
 8004742:	2b28      	cmp	r3, #40	; 0x28
 8004744:	d111      	bne.n	800476a <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	4a15      	ldr	r2, [pc, #84]	; (80047a0 <I2C_Slave_STOPF+0x25c>)
 800474a:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2200      	movs	r2, #0
 8004750:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	2220      	movs	r2, #32
 8004756:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	2200      	movs	r2, #0
 800475e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8004762:	6878      	ldr	r0, [r7, #4]
 8004764:	f7fd f856 	bl	8001814 <HAL_I2C_ListenCpltCallback>
}
 8004768:	e014      	b.n	8004794 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800476e:	2b22      	cmp	r3, #34	; 0x22
 8004770:	d002      	beq.n	8004778 <I2C_Slave_STOPF+0x234>
 8004772:	7bfb      	ldrb	r3, [r7, #15]
 8004774:	2b22      	cmp	r3, #34	; 0x22
 8004776:	d10d      	bne.n	8004794 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2200      	movs	r2, #0
 800477c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	2220      	movs	r2, #32
 8004782:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	2200      	movs	r2, #0
 800478a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800478e:	6878      	ldr	r0, [r7, #4]
 8004790:	f7fd f87a 	bl	8001888 <HAL_I2C_SlaveRxCpltCallback>
}
 8004794:	bf00      	nop
 8004796:	3710      	adds	r7, #16
 8004798:	46bd      	mov	sp, r7
 800479a:	bd80      	pop	{r7, pc}
 800479c:	08004ae9 	.word	0x08004ae9
 80047a0:	ffff0000 	.word	0xffff0000

080047a4 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b084      	sub	sp, #16
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047b2:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047b8:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80047ba:	68bb      	ldr	r3, [r7, #8]
 80047bc:	2b08      	cmp	r3, #8
 80047be:	d002      	beq.n	80047c6 <I2C_Slave_AF+0x22>
 80047c0:	68bb      	ldr	r3, [r7, #8]
 80047c2:	2b20      	cmp	r3, #32
 80047c4:	d129      	bne.n	800481a <I2C_Slave_AF+0x76>
 80047c6:	7bfb      	ldrb	r3, [r7, #15]
 80047c8:	2b28      	cmp	r3, #40	; 0x28
 80047ca:	d126      	bne.n	800481a <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	4a2c      	ldr	r2, [pc, #176]	; (8004880 <I2C_Slave_AF+0xdc>)
 80047d0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	685a      	ldr	r2, [r3, #4]
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80047e0:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80047ea:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	681a      	ldr	r2, [r3, #0]
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80047fa:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2200      	movs	r2, #0
 8004800:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	2220      	movs	r2, #32
 8004806:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	2200      	movs	r2, #0
 800480e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004812:	6878      	ldr	r0, [r7, #4]
 8004814:	f7fc fffe 	bl	8001814 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8004818:	e02e      	b.n	8004878 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800481a:	7bfb      	ldrb	r3, [r7, #15]
 800481c:	2b21      	cmp	r3, #33	; 0x21
 800481e:	d126      	bne.n	800486e <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	4a17      	ldr	r2, [pc, #92]	; (8004880 <I2C_Slave_AF+0xdc>)
 8004824:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	2221      	movs	r2, #33	; 0x21
 800482a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2220      	movs	r2, #32
 8004830:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2200      	movs	r2, #0
 8004838:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	685a      	ldr	r2, [r3, #4]
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800484a:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004854:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	681a      	ldr	r2, [r3, #0]
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004864:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004866:	6878      	ldr	r0, [r7, #4]
 8004868:	f7fd f804 	bl	8001874 <HAL_I2C_SlaveTxCpltCallback>
}
 800486c:	e004      	b.n	8004878 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004876:	615a      	str	r2, [r3, #20]
}
 8004878:	bf00      	nop
 800487a:	3710      	adds	r7, #16
 800487c:	46bd      	mov	sp, r7
 800487e:	bd80      	pop	{r7, pc}
 8004880:	ffff0000 	.word	0xffff0000

08004884 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8004884:	b580      	push	{r7, lr}
 8004886:	b084      	sub	sp, #16
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004892:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800489a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800489c:	7bbb      	ldrb	r3, [r7, #14]
 800489e:	2b10      	cmp	r3, #16
 80048a0:	d002      	beq.n	80048a8 <I2C_ITError+0x24>
 80048a2:	7bbb      	ldrb	r3, [r7, #14]
 80048a4:	2b40      	cmp	r3, #64	; 0x40
 80048a6:	d10a      	bne.n	80048be <I2C_ITError+0x3a>
 80048a8:	7bfb      	ldrb	r3, [r7, #15]
 80048aa:	2b22      	cmp	r3, #34	; 0x22
 80048ac:	d107      	bne.n	80048be <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	681a      	ldr	r2, [r3, #0]
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80048bc:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80048be:	7bfb      	ldrb	r3, [r7, #15]
 80048c0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80048c4:	2b28      	cmp	r3, #40	; 0x28
 80048c6:	d107      	bne.n	80048d8 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2200      	movs	r2, #0
 80048cc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	2228      	movs	r2, #40	; 0x28
 80048d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80048d6:	e015      	b.n	8004904 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	685b      	ldr	r3, [r3, #4]
 80048de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80048e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80048e6:	d00a      	beq.n	80048fe <I2C_ITError+0x7a>
 80048e8:	7bfb      	ldrb	r3, [r7, #15]
 80048ea:	2b60      	cmp	r3, #96	; 0x60
 80048ec:	d007      	beq.n	80048fe <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2220      	movs	r2, #32
 80048f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2200      	movs	r2, #0
 80048fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2200      	movs	r2, #0
 8004902:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	685b      	ldr	r3, [r3, #4]
 800490a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800490e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004912:	d162      	bne.n	80049da <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	685a      	ldr	r2, [r3, #4]
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004922:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004928:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800492c:	b2db      	uxtb	r3, r3
 800492e:	2b01      	cmp	r3, #1
 8004930:	d020      	beq.n	8004974 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004936:	4a6a      	ldr	r2, [pc, #424]	; (8004ae0 <I2C_ITError+0x25c>)
 8004938:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800493e:	4618      	mov	r0, r3
 8004940:	f7fe f8fe 	bl	8002b40 <HAL_DMA_Abort_IT>
 8004944:	4603      	mov	r3, r0
 8004946:	2b00      	cmp	r3, #0
 8004948:	f000 8089 	beq.w	8004a5e <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	681a      	ldr	r2, [r3, #0]
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f022 0201 	bic.w	r2, r2, #1
 800495a:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2220      	movs	r2, #32
 8004960:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004968:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800496a:	687a      	ldr	r2, [r7, #4]
 800496c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800496e:	4610      	mov	r0, r2
 8004970:	4798      	blx	r3
 8004972:	e074      	b.n	8004a5e <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004978:	4a59      	ldr	r2, [pc, #356]	; (8004ae0 <I2C_ITError+0x25c>)
 800497a:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004980:	4618      	mov	r0, r3
 8004982:	f7fe f8dd 	bl	8002b40 <HAL_DMA_Abort_IT>
 8004986:	4603      	mov	r3, r0
 8004988:	2b00      	cmp	r3, #0
 800498a:	d068      	beq.n	8004a5e <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	695b      	ldr	r3, [r3, #20]
 8004992:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004996:	2b40      	cmp	r3, #64	; 0x40
 8004998:	d10b      	bne.n	80049b2 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	691a      	ldr	r2, [r3, #16]
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049a4:	b2d2      	uxtb	r2, r2
 80049a6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ac:	1c5a      	adds	r2, r3, #1
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	681a      	ldr	r2, [r3, #0]
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f022 0201 	bic.w	r2, r2, #1
 80049c0:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2220      	movs	r2, #32
 80049c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049d0:	687a      	ldr	r2, [r7, #4]
 80049d2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80049d4:	4610      	mov	r0, r2
 80049d6:	4798      	blx	r3
 80049d8:	e041      	b.n	8004a5e <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049e0:	b2db      	uxtb	r3, r3
 80049e2:	2b60      	cmp	r3, #96	; 0x60
 80049e4:	d125      	bne.n	8004a32 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2220      	movs	r2, #32
 80049ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	2200      	movs	r2, #0
 80049f2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	695b      	ldr	r3, [r3, #20]
 80049fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049fe:	2b40      	cmp	r3, #64	; 0x40
 8004a00:	d10b      	bne.n	8004a1a <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	691a      	ldr	r2, [r3, #16]
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a0c:	b2d2      	uxtb	r2, r2
 8004a0e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a14:	1c5a      	adds	r2, r3, #1
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	681a      	ldr	r2, [r3, #0]
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f022 0201 	bic.w	r2, r2, #1
 8004a28:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004a2a:	6878      	ldr	r0, [r7, #4]
 8004a2c:	f7fe fef6 	bl	800381c <HAL_I2C_AbortCpltCallback>
 8004a30:	e015      	b.n	8004a5e <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	695b      	ldr	r3, [r3, #20]
 8004a38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a3c:	2b40      	cmp	r3, #64	; 0x40
 8004a3e:	d10b      	bne.n	8004a58 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	691a      	ldr	r2, [r3, #16]
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a4a:	b2d2      	uxtb	r2, r2
 8004a4c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a52:	1c5a      	adds	r2, r3, #1
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8004a58:	6878      	ldr	r0, [r7, #4]
 8004a5a:	f7fe fed5 	bl	8003808 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a62:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004a64:	68bb      	ldr	r3, [r7, #8]
 8004a66:	f003 0301 	and.w	r3, r3, #1
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d10e      	bne.n	8004a8c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004a6e:	68bb      	ldr	r3, [r7, #8]
 8004a70:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d109      	bne.n	8004a8c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004a78:	68bb      	ldr	r3, [r7, #8]
 8004a7a:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d104      	bne.n	8004a8c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8004a82:	68bb      	ldr	r3, [r7, #8]
 8004a84:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d007      	beq.n	8004a9c <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	685a      	ldr	r2, [r3, #4]
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004a9a:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004aa2:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aa8:	f003 0304 	and.w	r3, r3, #4
 8004aac:	2b04      	cmp	r3, #4
 8004aae:	d113      	bne.n	8004ad8 <I2C_ITError+0x254>
 8004ab0:	7bfb      	ldrb	r3, [r7, #15]
 8004ab2:	2b28      	cmp	r3, #40	; 0x28
 8004ab4:	d110      	bne.n	8004ad8 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	4a0a      	ldr	r2, [pc, #40]	; (8004ae4 <I2C_ITError+0x260>)
 8004aba:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2200      	movs	r2, #0
 8004ac0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	2220      	movs	r2, #32
 8004ac6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2200      	movs	r2, #0
 8004ace:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004ad2:	6878      	ldr	r0, [r7, #4]
 8004ad4:	f7fc fe9e 	bl	8001814 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004ad8:	bf00      	nop
 8004ada:	3710      	adds	r7, #16
 8004adc:	46bd      	mov	sp, r7
 8004ade:	bd80      	pop	{r7, pc}
 8004ae0:	08004ae9 	.word	0x08004ae9
 8004ae4:	ffff0000 	.word	0xffff0000

08004ae8 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b086      	sub	sp, #24
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004af0:	2300      	movs	r3, #0
 8004af2:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004af8:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004afa:	697b      	ldr	r3, [r7, #20]
 8004afc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b00:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004b02:	4b4b      	ldr	r3, [pc, #300]	; (8004c30 <I2C_DMAAbort+0x148>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	08db      	lsrs	r3, r3, #3
 8004b08:	4a4a      	ldr	r2, [pc, #296]	; (8004c34 <I2C_DMAAbort+0x14c>)
 8004b0a:	fba2 2303 	umull	r2, r3, r2, r3
 8004b0e:	0a1a      	lsrs	r2, r3, #8
 8004b10:	4613      	mov	r3, r2
 8004b12:	009b      	lsls	r3, r3, #2
 8004b14:	4413      	add	r3, r2
 8004b16:	00da      	lsls	r2, r3, #3
 8004b18:	1ad3      	subs	r3, r2, r3
 8004b1a:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d106      	bne.n	8004b30 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004b22:	697b      	ldr	r3, [r7, #20]
 8004b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b26:	f043 0220 	orr.w	r2, r3, #32
 8004b2a:	697b      	ldr	r3, [r7, #20]
 8004b2c:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8004b2e:	e00a      	b.n	8004b46 <I2C_DMAAbort+0x5e>
    }
    count--;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	3b01      	subs	r3, #1
 8004b34:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004b36:	697b      	ldr	r3, [r7, #20]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b44:	d0ea      	beq.n	8004b1c <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004b46:	697b      	ldr	r3, [r7, #20]
 8004b48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d003      	beq.n	8004b56 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004b4e:	697b      	ldr	r3, [r7, #20]
 8004b50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b52:	2200      	movs	r2, #0
 8004b54:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8004b56:	697b      	ldr	r3, [r7, #20]
 8004b58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d003      	beq.n	8004b66 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004b5e:	697b      	ldr	r3, [r7, #20]
 8004b60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b62:	2200      	movs	r2, #0
 8004b64:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b66:	697b      	ldr	r3, [r7, #20]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	681a      	ldr	r2, [r3, #0]
 8004b6c:	697b      	ldr	r3, [r7, #20]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b74:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8004b76:	697b      	ldr	r3, [r7, #20]
 8004b78:	2200      	movs	r2, #0
 8004b7a:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8004b7c:	697b      	ldr	r3, [r7, #20]
 8004b7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d003      	beq.n	8004b8c <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004b84:	697b      	ldr	r3, [r7, #20]
 8004b86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b88:	2200      	movs	r2, #0
 8004b8a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8004b8c:	697b      	ldr	r3, [r7, #20]
 8004b8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d003      	beq.n	8004b9c <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004b94:	697b      	ldr	r3, [r7, #20]
 8004b96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b98:	2200      	movs	r2, #0
 8004b9a:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8004b9c:	697b      	ldr	r3, [r7, #20]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	681a      	ldr	r2, [r3, #0]
 8004ba2:	697b      	ldr	r3, [r7, #20]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f022 0201 	bic.w	r2, r2, #1
 8004baa:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004bac:	697b      	ldr	r3, [r7, #20]
 8004bae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bb2:	b2db      	uxtb	r3, r3
 8004bb4:	2b60      	cmp	r3, #96	; 0x60
 8004bb6:	d10e      	bne.n	8004bd6 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004bb8:	697b      	ldr	r3, [r7, #20]
 8004bba:	2220      	movs	r2, #32
 8004bbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004bc0:	697b      	ldr	r3, [r7, #20]
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004bc8:	697b      	ldr	r3, [r7, #20]
 8004bca:	2200      	movs	r2, #0
 8004bcc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004bce:	6978      	ldr	r0, [r7, #20]
 8004bd0:	f7fe fe24 	bl	800381c <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004bd4:	e027      	b.n	8004c26 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004bd6:	7cfb      	ldrb	r3, [r7, #19]
 8004bd8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004bdc:	2b28      	cmp	r3, #40	; 0x28
 8004bde:	d117      	bne.n	8004c10 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8004be0:	697b      	ldr	r3, [r7, #20]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	681a      	ldr	r2, [r3, #0]
 8004be6:	697b      	ldr	r3, [r7, #20]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f042 0201 	orr.w	r2, r2, #1
 8004bee:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004bf0:	697b      	ldr	r3, [r7, #20]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	681a      	ldr	r2, [r3, #0]
 8004bf6:	697b      	ldr	r3, [r7, #20]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004bfe:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004c00:	697b      	ldr	r3, [r7, #20]
 8004c02:	2200      	movs	r2, #0
 8004c04:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004c06:	697b      	ldr	r3, [r7, #20]
 8004c08:	2228      	movs	r2, #40	; 0x28
 8004c0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004c0e:	e007      	b.n	8004c20 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8004c10:	697b      	ldr	r3, [r7, #20]
 8004c12:	2220      	movs	r2, #32
 8004c14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c18:	697b      	ldr	r3, [r7, #20]
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8004c20:	6978      	ldr	r0, [r7, #20]
 8004c22:	f7fe fdf1 	bl	8003808 <HAL_I2C_ErrorCallback>
}
 8004c26:	bf00      	nop
 8004c28:	3718      	adds	r7, #24
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	bd80      	pop	{r7, pc}
 8004c2e:	bf00      	nop
 8004c30:	20000000 	.word	0x20000000
 8004c34:	14f8b589 	.word	0x14f8b589

08004c38 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8004c38:	b480      	push	{r7}
 8004c3a:	b085      	sub	sp, #20
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004c40:	2300      	movs	r3, #0
 8004c42:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8004c44:	4b13      	ldr	r3, [pc, #76]	; (8004c94 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	08db      	lsrs	r3, r3, #3
 8004c4a:	4a13      	ldr	r2, [pc, #76]	; (8004c98 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8004c4c:	fba2 2303 	umull	r2, r3, r2, r3
 8004c50:	0a1a      	lsrs	r2, r3, #8
 8004c52:	4613      	mov	r3, r2
 8004c54:	009b      	lsls	r3, r3, #2
 8004c56:	4413      	add	r3, r2
 8004c58:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	3b01      	subs	r3, #1
 8004c5e:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d107      	bne.n	8004c76 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c6a:	f043 0220 	orr.w	r2, r3, #32
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004c72:	2301      	movs	r3, #1
 8004c74:	e008      	b.n	8004c88 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004c80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c84:	d0e9      	beq.n	8004c5a <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8004c86:	2300      	movs	r3, #0
}
 8004c88:	4618      	mov	r0, r3
 8004c8a:	3714      	adds	r7, #20
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c92:	4770      	bx	lr
 8004c94:	20000000 	.word	0x20000000
 8004c98:	14f8b589 	.word	0x14f8b589

08004c9c <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8004c9c:	b480      	push	{r7}
 8004c9e:	b083      	sub	sp, #12
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ca8:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004cac:	d103      	bne.n	8004cb6 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	2201      	movs	r2, #1
 8004cb2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8004cb4:	e007      	b.n	8004cc6 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cba:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004cbe:	d102      	bne.n	8004cc6 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2208      	movs	r2, #8
 8004cc4:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004cc6:	bf00      	nop
 8004cc8:	370c      	adds	r7, #12
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd0:	4770      	bx	lr
	...

08004cd4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	b082      	sub	sp, #8
 8004cd8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8004cda:	2300      	movs	r3, #0
 8004cdc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004cde:	2300      	movs	r3, #0
 8004ce0:	603b      	str	r3, [r7, #0]
 8004ce2:	4b20      	ldr	r3, [pc, #128]	; (8004d64 <HAL_PWREx_EnableOverDrive+0x90>)
 8004ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ce6:	4a1f      	ldr	r2, [pc, #124]	; (8004d64 <HAL_PWREx_EnableOverDrive+0x90>)
 8004ce8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004cec:	6413      	str	r3, [r2, #64]	; 0x40
 8004cee:	4b1d      	ldr	r3, [pc, #116]	; (8004d64 <HAL_PWREx_EnableOverDrive+0x90>)
 8004cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cf2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cf6:	603b      	str	r3, [r7, #0]
 8004cf8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004cfa:	4b1b      	ldr	r3, [pc, #108]	; (8004d68 <HAL_PWREx_EnableOverDrive+0x94>)
 8004cfc:	2201      	movs	r2, #1
 8004cfe:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004d00:	f7fd f9fa 	bl	80020f8 <HAL_GetTick>
 8004d04:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004d06:	e009      	b.n	8004d1c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004d08:	f7fd f9f6 	bl	80020f8 <HAL_GetTick>
 8004d0c:	4602      	mov	r2, r0
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	1ad3      	subs	r3, r2, r3
 8004d12:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004d16:	d901      	bls.n	8004d1c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8004d18:	2303      	movs	r3, #3
 8004d1a:	e01f      	b.n	8004d5c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004d1c:	4b13      	ldr	r3, [pc, #76]	; (8004d6c <HAL_PWREx_EnableOverDrive+0x98>)
 8004d1e:	685b      	ldr	r3, [r3, #4]
 8004d20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d28:	d1ee      	bne.n	8004d08 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004d2a:	4b11      	ldr	r3, [pc, #68]	; (8004d70 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004d2c:	2201      	movs	r2, #1
 8004d2e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004d30:	f7fd f9e2 	bl	80020f8 <HAL_GetTick>
 8004d34:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004d36:	e009      	b.n	8004d4c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004d38:	f7fd f9de 	bl	80020f8 <HAL_GetTick>
 8004d3c:	4602      	mov	r2, r0
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	1ad3      	subs	r3, r2, r3
 8004d42:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004d46:	d901      	bls.n	8004d4c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8004d48:	2303      	movs	r3, #3
 8004d4a:	e007      	b.n	8004d5c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004d4c:	4b07      	ldr	r3, [pc, #28]	; (8004d6c <HAL_PWREx_EnableOverDrive+0x98>)
 8004d4e:	685b      	ldr	r3, [r3, #4]
 8004d50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d54:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004d58:	d1ee      	bne.n	8004d38 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8004d5a:	2300      	movs	r3, #0
}
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	3708      	adds	r7, #8
 8004d60:	46bd      	mov	sp, r7
 8004d62:	bd80      	pop	{r7, pc}
 8004d64:	40023800 	.word	0x40023800
 8004d68:	420e0040 	.word	0x420e0040
 8004d6c:	40007000 	.word	0x40007000
 8004d70:	420e0044 	.word	0x420e0044

08004d74 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004d74:	b580      	push	{r7, lr}
 8004d76:	b084      	sub	sp, #16
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
 8004d7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d101      	bne.n	8004d88 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004d84:	2301      	movs	r3, #1
 8004d86:	e0cc      	b.n	8004f22 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004d88:	4b68      	ldr	r3, [pc, #416]	; (8004f2c <HAL_RCC_ClockConfig+0x1b8>)
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f003 030f 	and.w	r3, r3, #15
 8004d90:	683a      	ldr	r2, [r7, #0]
 8004d92:	429a      	cmp	r2, r3
 8004d94:	d90c      	bls.n	8004db0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d96:	4b65      	ldr	r3, [pc, #404]	; (8004f2c <HAL_RCC_ClockConfig+0x1b8>)
 8004d98:	683a      	ldr	r2, [r7, #0]
 8004d9a:	b2d2      	uxtb	r2, r2
 8004d9c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d9e:	4b63      	ldr	r3, [pc, #396]	; (8004f2c <HAL_RCC_ClockConfig+0x1b8>)
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f003 030f 	and.w	r3, r3, #15
 8004da6:	683a      	ldr	r2, [r7, #0]
 8004da8:	429a      	cmp	r2, r3
 8004daa:	d001      	beq.n	8004db0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004dac:	2301      	movs	r3, #1
 8004dae:	e0b8      	b.n	8004f22 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f003 0302 	and.w	r3, r3, #2
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d020      	beq.n	8004dfe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f003 0304 	and.w	r3, r3, #4
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d005      	beq.n	8004dd4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004dc8:	4b59      	ldr	r3, [pc, #356]	; (8004f30 <HAL_RCC_ClockConfig+0x1bc>)
 8004dca:	689b      	ldr	r3, [r3, #8]
 8004dcc:	4a58      	ldr	r2, [pc, #352]	; (8004f30 <HAL_RCC_ClockConfig+0x1bc>)
 8004dce:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004dd2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f003 0308 	and.w	r3, r3, #8
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d005      	beq.n	8004dec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004de0:	4b53      	ldr	r3, [pc, #332]	; (8004f30 <HAL_RCC_ClockConfig+0x1bc>)
 8004de2:	689b      	ldr	r3, [r3, #8]
 8004de4:	4a52      	ldr	r2, [pc, #328]	; (8004f30 <HAL_RCC_ClockConfig+0x1bc>)
 8004de6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004dea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004dec:	4b50      	ldr	r3, [pc, #320]	; (8004f30 <HAL_RCC_ClockConfig+0x1bc>)
 8004dee:	689b      	ldr	r3, [r3, #8]
 8004df0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	689b      	ldr	r3, [r3, #8]
 8004df8:	494d      	ldr	r1, [pc, #308]	; (8004f30 <HAL_RCC_ClockConfig+0x1bc>)
 8004dfa:	4313      	orrs	r3, r2
 8004dfc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f003 0301 	and.w	r3, r3, #1
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d044      	beq.n	8004e94 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	685b      	ldr	r3, [r3, #4]
 8004e0e:	2b01      	cmp	r3, #1
 8004e10:	d107      	bne.n	8004e22 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e12:	4b47      	ldr	r3, [pc, #284]	; (8004f30 <HAL_RCC_ClockConfig+0x1bc>)
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d119      	bne.n	8004e52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e1e:	2301      	movs	r3, #1
 8004e20:	e07f      	b.n	8004f22 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	685b      	ldr	r3, [r3, #4]
 8004e26:	2b02      	cmp	r3, #2
 8004e28:	d003      	beq.n	8004e32 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004e2e:	2b03      	cmp	r3, #3
 8004e30:	d107      	bne.n	8004e42 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e32:	4b3f      	ldr	r3, [pc, #252]	; (8004f30 <HAL_RCC_ClockConfig+0x1bc>)
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d109      	bne.n	8004e52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e3e:	2301      	movs	r3, #1
 8004e40:	e06f      	b.n	8004f22 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e42:	4b3b      	ldr	r3, [pc, #236]	; (8004f30 <HAL_RCC_ClockConfig+0x1bc>)
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f003 0302 	and.w	r3, r3, #2
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d101      	bne.n	8004e52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e4e:	2301      	movs	r3, #1
 8004e50:	e067      	b.n	8004f22 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004e52:	4b37      	ldr	r3, [pc, #220]	; (8004f30 <HAL_RCC_ClockConfig+0x1bc>)
 8004e54:	689b      	ldr	r3, [r3, #8]
 8004e56:	f023 0203 	bic.w	r2, r3, #3
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	685b      	ldr	r3, [r3, #4]
 8004e5e:	4934      	ldr	r1, [pc, #208]	; (8004f30 <HAL_RCC_ClockConfig+0x1bc>)
 8004e60:	4313      	orrs	r3, r2
 8004e62:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004e64:	f7fd f948 	bl	80020f8 <HAL_GetTick>
 8004e68:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e6a:	e00a      	b.n	8004e82 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e6c:	f7fd f944 	bl	80020f8 <HAL_GetTick>
 8004e70:	4602      	mov	r2, r0
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	1ad3      	subs	r3, r2, r3
 8004e76:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	d901      	bls.n	8004e82 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004e7e:	2303      	movs	r3, #3
 8004e80:	e04f      	b.n	8004f22 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e82:	4b2b      	ldr	r3, [pc, #172]	; (8004f30 <HAL_RCC_ClockConfig+0x1bc>)
 8004e84:	689b      	ldr	r3, [r3, #8]
 8004e86:	f003 020c 	and.w	r2, r3, #12
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	685b      	ldr	r3, [r3, #4]
 8004e8e:	009b      	lsls	r3, r3, #2
 8004e90:	429a      	cmp	r2, r3
 8004e92:	d1eb      	bne.n	8004e6c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004e94:	4b25      	ldr	r3, [pc, #148]	; (8004f2c <HAL_RCC_ClockConfig+0x1b8>)
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f003 030f 	and.w	r3, r3, #15
 8004e9c:	683a      	ldr	r2, [r7, #0]
 8004e9e:	429a      	cmp	r2, r3
 8004ea0:	d20c      	bcs.n	8004ebc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ea2:	4b22      	ldr	r3, [pc, #136]	; (8004f2c <HAL_RCC_ClockConfig+0x1b8>)
 8004ea4:	683a      	ldr	r2, [r7, #0]
 8004ea6:	b2d2      	uxtb	r2, r2
 8004ea8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004eaa:	4b20      	ldr	r3, [pc, #128]	; (8004f2c <HAL_RCC_ClockConfig+0x1b8>)
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f003 030f 	and.w	r3, r3, #15
 8004eb2:	683a      	ldr	r2, [r7, #0]
 8004eb4:	429a      	cmp	r2, r3
 8004eb6:	d001      	beq.n	8004ebc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004eb8:	2301      	movs	r3, #1
 8004eba:	e032      	b.n	8004f22 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f003 0304 	and.w	r3, r3, #4
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d008      	beq.n	8004eda <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ec8:	4b19      	ldr	r3, [pc, #100]	; (8004f30 <HAL_RCC_ClockConfig+0x1bc>)
 8004eca:	689b      	ldr	r3, [r3, #8]
 8004ecc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	68db      	ldr	r3, [r3, #12]
 8004ed4:	4916      	ldr	r1, [pc, #88]	; (8004f30 <HAL_RCC_ClockConfig+0x1bc>)
 8004ed6:	4313      	orrs	r3, r2
 8004ed8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f003 0308 	and.w	r3, r3, #8
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d009      	beq.n	8004efa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004ee6:	4b12      	ldr	r3, [pc, #72]	; (8004f30 <HAL_RCC_ClockConfig+0x1bc>)
 8004ee8:	689b      	ldr	r3, [r3, #8]
 8004eea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	691b      	ldr	r3, [r3, #16]
 8004ef2:	00db      	lsls	r3, r3, #3
 8004ef4:	490e      	ldr	r1, [pc, #56]	; (8004f30 <HAL_RCC_ClockConfig+0x1bc>)
 8004ef6:	4313      	orrs	r3, r2
 8004ef8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004efa:	f000 f8bd 	bl	8005078 <HAL_RCC_GetSysClockFreq>
 8004efe:	4602      	mov	r2, r0
 8004f00:	4b0b      	ldr	r3, [pc, #44]	; (8004f30 <HAL_RCC_ClockConfig+0x1bc>)
 8004f02:	689b      	ldr	r3, [r3, #8]
 8004f04:	091b      	lsrs	r3, r3, #4
 8004f06:	f003 030f 	and.w	r3, r3, #15
 8004f0a:	490a      	ldr	r1, [pc, #40]	; (8004f34 <HAL_RCC_ClockConfig+0x1c0>)
 8004f0c:	5ccb      	ldrb	r3, [r1, r3]
 8004f0e:	fa22 f303 	lsr.w	r3, r2, r3
 8004f12:	4a09      	ldr	r2, [pc, #36]	; (8004f38 <HAL_RCC_ClockConfig+0x1c4>)
 8004f14:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004f16:	4b09      	ldr	r3, [pc, #36]	; (8004f3c <HAL_RCC_ClockConfig+0x1c8>)
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	f7fd f8a8 	bl	8002070 <HAL_InitTick>

  return HAL_OK;
 8004f20:	2300      	movs	r3, #0
}
 8004f22:	4618      	mov	r0, r3
 8004f24:	3710      	adds	r7, #16
 8004f26:	46bd      	mov	sp, r7
 8004f28:	bd80      	pop	{r7, pc}
 8004f2a:	bf00      	nop
 8004f2c:	40023c00 	.word	0x40023c00
 8004f30:	40023800 	.word	0x40023800
 8004f34:	08009bb4 	.word	0x08009bb4
 8004f38:	20000000 	.word	0x20000000
 8004f3c:	20000004 	.word	0x20000004

08004f40 <HAL_RCC_MCOConfig>:
  * @note  For STM32F410Rx devices to output I2SCLK clock on MCO2 you should have
  *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b08c      	sub	sp, #48	; 0x30
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	60f8      	str	r0, [r7, #12]
 8004f48:	60b9      	str	r1, [r7, #8]
 8004f4a:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d129      	bne.n	8004fa6 <HAL_RCC_MCOConfig+0x66>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    __MCO1_CLK_ENABLE();
 8004f52:	2300      	movs	r3, #0
 8004f54:	61bb      	str	r3, [r7, #24]
 8004f56:	4b2b      	ldr	r3, [pc, #172]	; (8005004 <HAL_RCC_MCOConfig+0xc4>)
 8004f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f5a:	4a2a      	ldr	r2, [pc, #168]	; (8005004 <HAL_RCC_MCOConfig+0xc4>)
 8004f5c:	f043 0301 	orr.w	r3, r3, #1
 8004f60:	6313      	str	r3, [r2, #48]	; 0x30
 8004f62:	4b28      	ldr	r3, [pc, #160]	; (8005004 <HAL_RCC_MCOConfig+0xc4>)
 8004f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f66:	f003 0301 	and.w	r3, r3, #1
 8004f6a:	61bb      	str	r3, [r7, #24]
 8004f6c:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8004f6e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004f72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f74:	2302      	movs	r3, #2
 8004f76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004f78:	2303      	movs	r3, #3
 8004f7a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8004f80:	2300      	movs	r3, #0
 8004f82:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8004f84:	f107 031c 	add.w	r3, r7, #28
 8004f88:	4619      	mov	r1, r3
 8004f8a:	481f      	ldr	r0, [pc, #124]	; (8005008 <HAL_RCC_MCOConfig+0xc8>)
 8004f8c:	f7fd fe08 	bl	8002ba0 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8004f90:	4b1c      	ldr	r3, [pc, #112]	; (8005004 <HAL_RCC_MCOConfig+0xc4>)
 8004f92:	689b      	ldr	r3, [r3, #8]
 8004f94:	f023 62ec 	bic.w	r2, r3, #123731968	; 0x7600000
 8004f98:	68b9      	ldr	r1, [r7, #8]
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	430b      	orrs	r3, r1
 8004f9e:	4919      	ldr	r1, [pc, #100]	; (8005004 <HAL_RCC_MCOConfig+0xc4>)
 8004fa0:	4313      	orrs	r3, r2
 8004fa2:	608b      	str	r3, [r1, #8]
#if defined(RCC_CFGR_MCO2EN)
    __HAL_RCC_MCO2_ENABLE();
#endif /* RCC_CFGR_MCO2EN */
  }
#endif /* RCC_CFGR_MCO2 */
}
 8004fa4:	e029      	b.n	8004ffa <HAL_RCC_MCOConfig+0xba>
    __MCO2_CLK_ENABLE();
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	617b      	str	r3, [r7, #20]
 8004faa:	4b16      	ldr	r3, [pc, #88]	; (8005004 <HAL_RCC_MCOConfig+0xc4>)
 8004fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fae:	4a15      	ldr	r2, [pc, #84]	; (8005004 <HAL_RCC_MCOConfig+0xc4>)
 8004fb0:	f043 0304 	orr.w	r3, r3, #4
 8004fb4:	6313      	str	r3, [r2, #48]	; 0x30
 8004fb6:	4b13      	ldr	r3, [pc, #76]	; (8005004 <HAL_RCC_MCOConfig+0xc4>)
 8004fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fba:	f003 0304 	and.w	r3, r3, #4
 8004fbe:	617b      	str	r3, [r7, #20]
 8004fc0:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8004fc2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004fc6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004fc8:	2302      	movs	r3, #2
 8004fca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004fcc:	2303      	movs	r3, #3
 8004fce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fd0:	2300      	movs	r3, #0
 8004fd2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8004fd8:	f107 031c 	add.w	r3, r7, #28
 8004fdc:	4619      	mov	r1, r3
 8004fde:	480b      	ldr	r0, [pc, #44]	; (800500c <HAL_RCC_MCOConfig+0xcc>)
 8004fe0:	f7fd fdde 	bl	8002ba0 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3U)));
 8004fe4:	4b07      	ldr	r3, [pc, #28]	; (8005004 <HAL_RCC_MCOConfig+0xc4>)
 8004fe6:	689b      	ldr	r3, [r3, #8]
 8004fe8:	f023 4278 	bic.w	r2, r3, #4160749568	; 0xf8000000
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	00d9      	lsls	r1, r3, #3
 8004ff0:	68bb      	ldr	r3, [r7, #8]
 8004ff2:	430b      	orrs	r3, r1
 8004ff4:	4903      	ldr	r1, [pc, #12]	; (8005004 <HAL_RCC_MCOConfig+0xc4>)
 8004ff6:	4313      	orrs	r3, r2
 8004ff8:	608b      	str	r3, [r1, #8]
}
 8004ffa:	bf00      	nop
 8004ffc:	3730      	adds	r7, #48	; 0x30
 8004ffe:	46bd      	mov	sp, r7
 8005000:	bd80      	pop	{r7, pc}
 8005002:	bf00      	nop
 8005004:	40023800 	.word	0x40023800
 8005008:	40020000 	.word	0x40020000
 800500c:	40020800 	.word	0x40020800

08005010 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005010:	b480      	push	{r7}
 8005012:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005014:	4b03      	ldr	r3, [pc, #12]	; (8005024 <HAL_RCC_GetHCLKFreq+0x14>)
 8005016:	681b      	ldr	r3, [r3, #0]
}
 8005018:	4618      	mov	r0, r3
 800501a:	46bd      	mov	sp, r7
 800501c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005020:	4770      	bx	lr
 8005022:	bf00      	nop
 8005024:	20000000 	.word	0x20000000

08005028 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005028:	b580      	push	{r7, lr}
 800502a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800502c:	f7ff fff0 	bl	8005010 <HAL_RCC_GetHCLKFreq>
 8005030:	4602      	mov	r2, r0
 8005032:	4b05      	ldr	r3, [pc, #20]	; (8005048 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005034:	689b      	ldr	r3, [r3, #8]
 8005036:	0a9b      	lsrs	r3, r3, #10
 8005038:	f003 0307 	and.w	r3, r3, #7
 800503c:	4903      	ldr	r1, [pc, #12]	; (800504c <HAL_RCC_GetPCLK1Freq+0x24>)
 800503e:	5ccb      	ldrb	r3, [r1, r3]
 8005040:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005044:	4618      	mov	r0, r3
 8005046:	bd80      	pop	{r7, pc}
 8005048:	40023800 	.word	0x40023800
 800504c:	08009bc4 	.word	0x08009bc4

08005050 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005050:	b580      	push	{r7, lr}
 8005052:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005054:	f7ff ffdc 	bl	8005010 <HAL_RCC_GetHCLKFreq>
 8005058:	4602      	mov	r2, r0
 800505a:	4b05      	ldr	r3, [pc, #20]	; (8005070 <HAL_RCC_GetPCLK2Freq+0x20>)
 800505c:	689b      	ldr	r3, [r3, #8]
 800505e:	0b5b      	lsrs	r3, r3, #13
 8005060:	f003 0307 	and.w	r3, r3, #7
 8005064:	4903      	ldr	r1, [pc, #12]	; (8005074 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005066:	5ccb      	ldrb	r3, [r1, r3]
 8005068:	fa22 f303 	lsr.w	r3, r2, r3
}
 800506c:	4618      	mov	r0, r3
 800506e:	bd80      	pop	{r7, pc}
 8005070:	40023800 	.word	0x40023800
 8005074:	08009bc4 	.word	0x08009bc4

08005078 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005078:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800507c:	b0a6      	sub	sp, #152	; 0x98
 800507e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005080:	2300      	movs	r3, #0
 8005082:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t pllvco = 0U;
 8005086:	2300      	movs	r3, #0
 8005088:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t pllp = 0U;
 800508c:	2300      	movs	r3, #0
 800508e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t pllr = 0U;
 8005092:	2300      	movs	r3, #0
 8005094:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t sysclockfreq = 0U;
 8005098:	2300      	movs	r3, #0
 800509a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800509e:	4bc8      	ldr	r3, [pc, #800]	; (80053c0 <HAL_RCC_GetSysClockFreq+0x348>)
 80050a0:	689b      	ldr	r3, [r3, #8]
 80050a2:	f003 030c 	and.w	r3, r3, #12
 80050a6:	2b0c      	cmp	r3, #12
 80050a8:	f200 817e 	bhi.w	80053a8 <HAL_RCC_GetSysClockFreq+0x330>
 80050ac:	a201      	add	r2, pc, #4	; (adr r2, 80050b4 <HAL_RCC_GetSysClockFreq+0x3c>)
 80050ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050b2:	bf00      	nop
 80050b4:	080050e9 	.word	0x080050e9
 80050b8:	080053a9 	.word	0x080053a9
 80050bc:	080053a9 	.word	0x080053a9
 80050c0:	080053a9 	.word	0x080053a9
 80050c4:	080050f1 	.word	0x080050f1
 80050c8:	080053a9 	.word	0x080053a9
 80050cc:	080053a9 	.word	0x080053a9
 80050d0:	080053a9 	.word	0x080053a9
 80050d4:	080050f9 	.word	0x080050f9
 80050d8:	080053a9 	.word	0x080053a9
 80050dc:	080053a9 	.word	0x080053a9
 80050e0:	080053a9 	.word	0x080053a9
 80050e4:	08005263 	.word	0x08005263
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80050e8:	4bb6      	ldr	r3, [pc, #728]	; (80053c4 <HAL_RCC_GetSysClockFreq+0x34c>)
 80050ea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
       break;
 80050ee:	e15f      	b.n	80053b0 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80050f0:	4bb5      	ldr	r3, [pc, #724]	; (80053c8 <HAL_RCC_GetSysClockFreq+0x350>)
 80050f2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 80050f6:	e15b      	b.n	80053b0 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80050f8:	4bb1      	ldr	r3, [pc, #708]	; (80053c0 <HAL_RCC_GetSysClockFreq+0x348>)
 80050fa:	685b      	ldr	r3, [r3, #4]
 80050fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005100:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005104:	4bae      	ldr	r3, [pc, #696]	; (80053c0 <HAL_RCC_GetSysClockFreq+0x348>)
 8005106:	685b      	ldr	r3, [r3, #4]
 8005108:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800510c:	2b00      	cmp	r3, #0
 800510e:	d031      	beq.n	8005174 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005110:	4bab      	ldr	r3, [pc, #684]	; (80053c0 <HAL_RCC_GetSysClockFreq+0x348>)
 8005112:	685b      	ldr	r3, [r3, #4]
 8005114:	099b      	lsrs	r3, r3, #6
 8005116:	2200      	movs	r2, #0
 8005118:	66bb      	str	r3, [r7, #104]	; 0x68
 800511a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800511c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800511e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005122:	663b      	str	r3, [r7, #96]	; 0x60
 8005124:	2300      	movs	r3, #0
 8005126:	667b      	str	r3, [r7, #100]	; 0x64
 8005128:	4ba7      	ldr	r3, [pc, #668]	; (80053c8 <HAL_RCC_GetSysClockFreq+0x350>)
 800512a:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 800512e:	462a      	mov	r2, r5
 8005130:	fb03 f202 	mul.w	r2, r3, r2
 8005134:	2300      	movs	r3, #0
 8005136:	4621      	mov	r1, r4
 8005138:	fb01 f303 	mul.w	r3, r1, r3
 800513c:	4413      	add	r3, r2
 800513e:	4aa2      	ldr	r2, [pc, #648]	; (80053c8 <HAL_RCC_GetSysClockFreq+0x350>)
 8005140:	4621      	mov	r1, r4
 8005142:	fba1 1202 	umull	r1, r2, r1, r2
 8005146:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005148:	460a      	mov	r2, r1
 800514a:	67ba      	str	r2, [r7, #120]	; 0x78
 800514c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800514e:	4413      	add	r3, r2
 8005150:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005152:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005156:	2200      	movs	r2, #0
 8005158:	65bb      	str	r3, [r7, #88]	; 0x58
 800515a:	65fa      	str	r2, [r7, #92]	; 0x5c
 800515c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005160:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8005164:	f7fb fd40 	bl	8000be8 <__aeabi_uldivmod>
 8005168:	4602      	mov	r2, r0
 800516a:	460b      	mov	r3, r1
 800516c:	4613      	mov	r3, r2
 800516e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005172:	e064      	b.n	800523e <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005174:	4b92      	ldr	r3, [pc, #584]	; (80053c0 <HAL_RCC_GetSysClockFreq+0x348>)
 8005176:	685b      	ldr	r3, [r3, #4]
 8005178:	099b      	lsrs	r3, r3, #6
 800517a:	2200      	movs	r2, #0
 800517c:	653b      	str	r3, [r7, #80]	; 0x50
 800517e:	657a      	str	r2, [r7, #84]	; 0x54
 8005180:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005182:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005186:	64bb      	str	r3, [r7, #72]	; 0x48
 8005188:	2300      	movs	r3, #0
 800518a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800518c:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8005190:	4622      	mov	r2, r4
 8005192:	462b      	mov	r3, r5
 8005194:	f04f 0000 	mov.w	r0, #0
 8005198:	f04f 0100 	mov.w	r1, #0
 800519c:	0159      	lsls	r1, r3, #5
 800519e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80051a2:	0150      	lsls	r0, r2, #5
 80051a4:	4602      	mov	r2, r0
 80051a6:	460b      	mov	r3, r1
 80051a8:	4621      	mov	r1, r4
 80051aa:	1a51      	subs	r1, r2, r1
 80051ac:	6139      	str	r1, [r7, #16]
 80051ae:	4629      	mov	r1, r5
 80051b0:	eb63 0301 	sbc.w	r3, r3, r1
 80051b4:	617b      	str	r3, [r7, #20]
 80051b6:	f04f 0200 	mov.w	r2, #0
 80051ba:	f04f 0300 	mov.w	r3, #0
 80051be:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80051c2:	4659      	mov	r1, fp
 80051c4:	018b      	lsls	r3, r1, #6
 80051c6:	4651      	mov	r1, sl
 80051c8:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80051cc:	4651      	mov	r1, sl
 80051ce:	018a      	lsls	r2, r1, #6
 80051d0:	4651      	mov	r1, sl
 80051d2:	ebb2 0801 	subs.w	r8, r2, r1
 80051d6:	4659      	mov	r1, fp
 80051d8:	eb63 0901 	sbc.w	r9, r3, r1
 80051dc:	f04f 0200 	mov.w	r2, #0
 80051e0:	f04f 0300 	mov.w	r3, #0
 80051e4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80051e8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80051ec:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80051f0:	4690      	mov	r8, r2
 80051f2:	4699      	mov	r9, r3
 80051f4:	4623      	mov	r3, r4
 80051f6:	eb18 0303 	adds.w	r3, r8, r3
 80051fa:	60bb      	str	r3, [r7, #8]
 80051fc:	462b      	mov	r3, r5
 80051fe:	eb49 0303 	adc.w	r3, r9, r3
 8005202:	60fb      	str	r3, [r7, #12]
 8005204:	f04f 0200 	mov.w	r2, #0
 8005208:	f04f 0300 	mov.w	r3, #0
 800520c:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005210:	4629      	mov	r1, r5
 8005212:	028b      	lsls	r3, r1, #10
 8005214:	4621      	mov	r1, r4
 8005216:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800521a:	4621      	mov	r1, r4
 800521c:	028a      	lsls	r2, r1, #10
 800521e:	4610      	mov	r0, r2
 8005220:	4619      	mov	r1, r3
 8005222:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005226:	2200      	movs	r2, #0
 8005228:	643b      	str	r3, [r7, #64]	; 0x40
 800522a:	647a      	str	r2, [r7, #68]	; 0x44
 800522c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005230:	f7fb fcda 	bl	8000be8 <__aeabi_uldivmod>
 8005234:	4602      	mov	r2, r0
 8005236:	460b      	mov	r3, r1
 8005238:	4613      	mov	r3, r2
 800523a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800523e:	4b60      	ldr	r3, [pc, #384]	; (80053c0 <HAL_RCC_GetSysClockFreq+0x348>)
 8005240:	685b      	ldr	r3, [r3, #4]
 8005242:	0c1b      	lsrs	r3, r3, #16
 8005244:	f003 0303 	and.w	r3, r3, #3
 8005248:	3301      	adds	r3, #1
 800524a:	005b      	lsls	r3, r3, #1
 800524c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      sysclockfreq = pllvco/pllp;
 8005250:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005254:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005258:	fbb2 f3f3 	udiv	r3, r2, r3
 800525c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8005260:	e0a6      	b.n	80053b0 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005262:	4b57      	ldr	r3, [pc, #348]	; (80053c0 <HAL_RCC_GetSysClockFreq+0x348>)
 8005264:	685b      	ldr	r3, [r3, #4]
 8005266:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800526a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800526e:	4b54      	ldr	r3, [pc, #336]	; (80053c0 <HAL_RCC_GetSysClockFreq+0x348>)
 8005270:	685b      	ldr	r3, [r3, #4]
 8005272:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005276:	2b00      	cmp	r3, #0
 8005278:	d02a      	beq.n	80052d0 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800527a:	4b51      	ldr	r3, [pc, #324]	; (80053c0 <HAL_RCC_GetSysClockFreq+0x348>)
 800527c:	685b      	ldr	r3, [r3, #4]
 800527e:	099b      	lsrs	r3, r3, #6
 8005280:	2200      	movs	r2, #0
 8005282:	63bb      	str	r3, [r7, #56]	; 0x38
 8005284:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005286:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005288:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800528c:	2100      	movs	r1, #0
 800528e:	4b4e      	ldr	r3, [pc, #312]	; (80053c8 <HAL_RCC_GetSysClockFreq+0x350>)
 8005290:	fb03 f201 	mul.w	r2, r3, r1
 8005294:	2300      	movs	r3, #0
 8005296:	fb00 f303 	mul.w	r3, r0, r3
 800529a:	4413      	add	r3, r2
 800529c:	4a4a      	ldr	r2, [pc, #296]	; (80053c8 <HAL_RCC_GetSysClockFreq+0x350>)
 800529e:	fba0 1202 	umull	r1, r2, r0, r2
 80052a2:	677a      	str	r2, [r7, #116]	; 0x74
 80052a4:	460a      	mov	r2, r1
 80052a6:	673a      	str	r2, [r7, #112]	; 0x70
 80052a8:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80052aa:	4413      	add	r3, r2
 80052ac:	677b      	str	r3, [r7, #116]	; 0x74
 80052ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80052b2:	2200      	movs	r2, #0
 80052b4:	633b      	str	r3, [r7, #48]	; 0x30
 80052b6:	637a      	str	r2, [r7, #52]	; 0x34
 80052b8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80052bc:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 80052c0:	f7fb fc92 	bl	8000be8 <__aeabi_uldivmod>
 80052c4:	4602      	mov	r2, r0
 80052c6:	460b      	mov	r3, r1
 80052c8:	4613      	mov	r3, r2
 80052ca:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80052ce:	e05b      	b.n	8005388 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80052d0:	4b3b      	ldr	r3, [pc, #236]	; (80053c0 <HAL_RCC_GetSysClockFreq+0x348>)
 80052d2:	685b      	ldr	r3, [r3, #4]
 80052d4:	099b      	lsrs	r3, r3, #6
 80052d6:	2200      	movs	r2, #0
 80052d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80052da:	62fa      	str	r2, [r7, #44]	; 0x2c
 80052dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052e2:	623b      	str	r3, [r7, #32]
 80052e4:	2300      	movs	r3, #0
 80052e6:	627b      	str	r3, [r7, #36]	; 0x24
 80052e8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80052ec:	4642      	mov	r2, r8
 80052ee:	464b      	mov	r3, r9
 80052f0:	f04f 0000 	mov.w	r0, #0
 80052f4:	f04f 0100 	mov.w	r1, #0
 80052f8:	0159      	lsls	r1, r3, #5
 80052fa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80052fe:	0150      	lsls	r0, r2, #5
 8005300:	4602      	mov	r2, r0
 8005302:	460b      	mov	r3, r1
 8005304:	4641      	mov	r1, r8
 8005306:	ebb2 0a01 	subs.w	sl, r2, r1
 800530a:	4649      	mov	r1, r9
 800530c:	eb63 0b01 	sbc.w	fp, r3, r1
 8005310:	f04f 0200 	mov.w	r2, #0
 8005314:	f04f 0300 	mov.w	r3, #0
 8005318:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800531c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005320:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005324:	ebb2 040a 	subs.w	r4, r2, sl
 8005328:	eb63 050b 	sbc.w	r5, r3, fp
 800532c:	f04f 0200 	mov.w	r2, #0
 8005330:	f04f 0300 	mov.w	r3, #0
 8005334:	00eb      	lsls	r3, r5, #3
 8005336:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800533a:	00e2      	lsls	r2, r4, #3
 800533c:	4614      	mov	r4, r2
 800533e:	461d      	mov	r5, r3
 8005340:	4643      	mov	r3, r8
 8005342:	18e3      	adds	r3, r4, r3
 8005344:	603b      	str	r3, [r7, #0]
 8005346:	464b      	mov	r3, r9
 8005348:	eb45 0303 	adc.w	r3, r5, r3
 800534c:	607b      	str	r3, [r7, #4]
 800534e:	f04f 0200 	mov.w	r2, #0
 8005352:	f04f 0300 	mov.w	r3, #0
 8005356:	e9d7 4500 	ldrd	r4, r5, [r7]
 800535a:	4629      	mov	r1, r5
 800535c:	028b      	lsls	r3, r1, #10
 800535e:	4621      	mov	r1, r4
 8005360:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005364:	4621      	mov	r1, r4
 8005366:	028a      	lsls	r2, r1, #10
 8005368:	4610      	mov	r0, r2
 800536a:	4619      	mov	r1, r3
 800536c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005370:	2200      	movs	r2, #0
 8005372:	61bb      	str	r3, [r7, #24]
 8005374:	61fa      	str	r2, [r7, #28]
 8005376:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800537a:	f7fb fc35 	bl	8000be8 <__aeabi_uldivmod>
 800537e:	4602      	mov	r2, r0
 8005380:	460b      	mov	r3, r1
 8005382:	4613      	mov	r3, r2
 8005384:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8005388:	4b0d      	ldr	r3, [pc, #52]	; (80053c0 <HAL_RCC_GetSysClockFreq+0x348>)
 800538a:	685b      	ldr	r3, [r3, #4]
 800538c:	0f1b      	lsrs	r3, r3, #28
 800538e:	f003 0307 	and.w	r3, r3, #7
 8005392:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

      sysclockfreq = pllvco/pllr;
 8005396:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800539a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800539e:	fbb2 f3f3 	udiv	r3, r2, r3
 80053a2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 80053a6:	e003      	b.n	80053b0 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80053a8:	4b06      	ldr	r3, [pc, #24]	; (80053c4 <HAL_RCC_GetSysClockFreq+0x34c>)
 80053aa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 80053ae:	bf00      	nop
    }
  }
  return sysclockfreq;
 80053b0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
}
 80053b4:	4618      	mov	r0, r3
 80053b6:	3798      	adds	r7, #152	; 0x98
 80053b8:	46bd      	mov	sp, r7
 80053ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80053be:	bf00      	nop
 80053c0:	40023800 	.word	0x40023800
 80053c4:	00f42400 	.word	0x00f42400
 80053c8:	017d7840 	.word	0x017d7840

080053cc <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80053cc:	b580      	push	{r7, lr}
 80053ce:	b086      	sub	sp, #24
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d101      	bne.n	80053de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80053da:	2301      	movs	r3, #1
 80053dc:	e28d      	b.n	80058fa <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f003 0301 	and.w	r3, r3, #1
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	f000 8083 	beq.w	80054f2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80053ec:	4b94      	ldr	r3, [pc, #592]	; (8005640 <HAL_RCC_OscConfig+0x274>)
 80053ee:	689b      	ldr	r3, [r3, #8]
 80053f0:	f003 030c 	and.w	r3, r3, #12
 80053f4:	2b04      	cmp	r3, #4
 80053f6:	d019      	beq.n	800542c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80053f8:	4b91      	ldr	r3, [pc, #580]	; (8005640 <HAL_RCC_OscConfig+0x274>)
 80053fa:	689b      	ldr	r3, [r3, #8]
 80053fc:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005400:	2b08      	cmp	r3, #8
 8005402:	d106      	bne.n	8005412 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005404:	4b8e      	ldr	r3, [pc, #568]	; (8005640 <HAL_RCC_OscConfig+0x274>)
 8005406:	685b      	ldr	r3, [r3, #4]
 8005408:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800540c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005410:	d00c      	beq.n	800542c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005412:	4b8b      	ldr	r3, [pc, #556]	; (8005640 <HAL_RCC_OscConfig+0x274>)
 8005414:	689b      	ldr	r3, [r3, #8]
 8005416:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800541a:	2b0c      	cmp	r3, #12
 800541c:	d112      	bne.n	8005444 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800541e:	4b88      	ldr	r3, [pc, #544]	; (8005640 <HAL_RCC_OscConfig+0x274>)
 8005420:	685b      	ldr	r3, [r3, #4]
 8005422:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005426:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800542a:	d10b      	bne.n	8005444 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800542c:	4b84      	ldr	r3, [pc, #528]	; (8005640 <HAL_RCC_OscConfig+0x274>)
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005434:	2b00      	cmp	r3, #0
 8005436:	d05b      	beq.n	80054f0 <HAL_RCC_OscConfig+0x124>
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	685b      	ldr	r3, [r3, #4]
 800543c:	2b00      	cmp	r3, #0
 800543e:	d157      	bne.n	80054f0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8005440:	2301      	movs	r3, #1
 8005442:	e25a      	b.n	80058fa <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	685b      	ldr	r3, [r3, #4]
 8005448:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800544c:	d106      	bne.n	800545c <HAL_RCC_OscConfig+0x90>
 800544e:	4b7c      	ldr	r3, [pc, #496]	; (8005640 <HAL_RCC_OscConfig+0x274>)
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	4a7b      	ldr	r2, [pc, #492]	; (8005640 <HAL_RCC_OscConfig+0x274>)
 8005454:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005458:	6013      	str	r3, [r2, #0]
 800545a:	e01d      	b.n	8005498 <HAL_RCC_OscConfig+0xcc>
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	685b      	ldr	r3, [r3, #4]
 8005460:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005464:	d10c      	bne.n	8005480 <HAL_RCC_OscConfig+0xb4>
 8005466:	4b76      	ldr	r3, [pc, #472]	; (8005640 <HAL_RCC_OscConfig+0x274>)
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	4a75      	ldr	r2, [pc, #468]	; (8005640 <HAL_RCC_OscConfig+0x274>)
 800546c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005470:	6013      	str	r3, [r2, #0]
 8005472:	4b73      	ldr	r3, [pc, #460]	; (8005640 <HAL_RCC_OscConfig+0x274>)
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	4a72      	ldr	r2, [pc, #456]	; (8005640 <HAL_RCC_OscConfig+0x274>)
 8005478:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800547c:	6013      	str	r3, [r2, #0]
 800547e:	e00b      	b.n	8005498 <HAL_RCC_OscConfig+0xcc>
 8005480:	4b6f      	ldr	r3, [pc, #444]	; (8005640 <HAL_RCC_OscConfig+0x274>)
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	4a6e      	ldr	r2, [pc, #440]	; (8005640 <HAL_RCC_OscConfig+0x274>)
 8005486:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800548a:	6013      	str	r3, [r2, #0]
 800548c:	4b6c      	ldr	r3, [pc, #432]	; (8005640 <HAL_RCC_OscConfig+0x274>)
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	4a6b      	ldr	r2, [pc, #428]	; (8005640 <HAL_RCC_OscConfig+0x274>)
 8005492:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005496:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	685b      	ldr	r3, [r3, #4]
 800549c:	2b00      	cmp	r3, #0
 800549e:	d013      	beq.n	80054c8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054a0:	f7fc fe2a 	bl	80020f8 <HAL_GetTick>
 80054a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80054a6:	e008      	b.n	80054ba <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80054a8:	f7fc fe26 	bl	80020f8 <HAL_GetTick>
 80054ac:	4602      	mov	r2, r0
 80054ae:	693b      	ldr	r3, [r7, #16]
 80054b0:	1ad3      	subs	r3, r2, r3
 80054b2:	2b64      	cmp	r3, #100	; 0x64
 80054b4:	d901      	bls.n	80054ba <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80054b6:	2303      	movs	r3, #3
 80054b8:	e21f      	b.n	80058fa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80054ba:	4b61      	ldr	r3, [pc, #388]	; (8005640 <HAL_RCC_OscConfig+0x274>)
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d0f0      	beq.n	80054a8 <HAL_RCC_OscConfig+0xdc>
 80054c6:	e014      	b.n	80054f2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054c8:	f7fc fe16 	bl	80020f8 <HAL_GetTick>
 80054cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80054ce:	e008      	b.n	80054e2 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80054d0:	f7fc fe12 	bl	80020f8 <HAL_GetTick>
 80054d4:	4602      	mov	r2, r0
 80054d6:	693b      	ldr	r3, [r7, #16]
 80054d8:	1ad3      	subs	r3, r2, r3
 80054da:	2b64      	cmp	r3, #100	; 0x64
 80054dc:	d901      	bls.n	80054e2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80054de:	2303      	movs	r3, #3
 80054e0:	e20b      	b.n	80058fa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80054e2:	4b57      	ldr	r3, [pc, #348]	; (8005640 <HAL_RCC_OscConfig+0x274>)
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d1f0      	bne.n	80054d0 <HAL_RCC_OscConfig+0x104>
 80054ee:	e000      	b.n	80054f2 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80054f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f003 0302 	and.w	r3, r3, #2
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d06f      	beq.n	80055de <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80054fe:	4b50      	ldr	r3, [pc, #320]	; (8005640 <HAL_RCC_OscConfig+0x274>)
 8005500:	689b      	ldr	r3, [r3, #8]
 8005502:	f003 030c 	and.w	r3, r3, #12
 8005506:	2b00      	cmp	r3, #0
 8005508:	d017      	beq.n	800553a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800550a:	4b4d      	ldr	r3, [pc, #308]	; (8005640 <HAL_RCC_OscConfig+0x274>)
 800550c:	689b      	ldr	r3, [r3, #8]
 800550e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005512:	2b08      	cmp	r3, #8
 8005514:	d105      	bne.n	8005522 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005516:	4b4a      	ldr	r3, [pc, #296]	; (8005640 <HAL_RCC_OscConfig+0x274>)
 8005518:	685b      	ldr	r3, [r3, #4]
 800551a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800551e:	2b00      	cmp	r3, #0
 8005520:	d00b      	beq.n	800553a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005522:	4b47      	ldr	r3, [pc, #284]	; (8005640 <HAL_RCC_OscConfig+0x274>)
 8005524:	689b      	ldr	r3, [r3, #8]
 8005526:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800552a:	2b0c      	cmp	r3, #12
 800552c:	d11c      	bne.n	8005568 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800552e:	4b44      	ldr	r3, [pc, #272]	; (8005640 <HAL_RCC_OscConfig+0x274>)
 8005530:	685b      	ldr	r3, [r3, #4]
 8005532:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005536:	2b00      	cmp	r3, #0
 8005538:	d116      	bne.n	8005568 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800553a:	4b41      	ldr	r3, [pc, #260]	; (8005640 <HAL_RCC_OscConfig+0x274>)
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f003 0302 	and.w	r3, r3, #2
 8005542:	2b00      	cmp	r3, #0
 8005544:	d005      	beq.n	8005552 <HAL_RCC_OscConfig+0x186>
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	68db      	ldr	r3, [r3, #12]
 800554a:	2b01      	cmp	r3, #1
 800554c:	d001      	beq.n	8005552 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800554e:	2301      	movs	r3, #1
 8005550:	e1d3      	b.n	80058fa <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005552:	4b3b      	ldr	r3, [pc, #236]	; (8005640 <HAL_RCC_OscConfig+0x274>)
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	691b      	ldr	r3, [r3, #16]
 800555e:	00db      	lsls	r3, r3, #3
 8005560:	4937      	ldr	r1, [pc, #220]	; (8005640 <HAL_RCC_OscConfig+0x274>)
 8005562:	4313      	orrs	r3, r2
 8005564:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005566:	e03a      	b.n	80055de <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	68db      	ldr	r3, [r3, #12]
 800556c:	2b00      	cmp	r3, #0
 800556e:	d020      	beq.n	80055b2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005570:	4b34      	ldr	r3, [pc, #208]	; (8005644 <HAL_RCC_OscConfig+0x278>)
 8005572:	2201      	movs	r2, #1
 8005574:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005576:	f7fc fdbf 	bl	80020f8 <HAL_GetTick>
 800557a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800557c:	e008      	b.n	8005590 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800557e:	f7fc fdbb 	bl	80020f8 <HAL_GetTick>
 8005582:	4602      	mov	r2, r0
 8005584:	693b      	ldr	r3, [r7, #16]
 8005586:	1ad3      	subs	r3, r2, r3
 8005588:	2b02      	cmp	r3, #2
 800558a:	d901      	bls.n	8005590 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800558c:	2303      	movs	r3, #3
 800558e:	e1b4      	b.n	80058fa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005590:	4b2b      	ldr	r3, [pc, #172]	; (8005640 <HAL_RCC_OscConfig+0x274>)
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f003 0302 	and.w	r3, r3, #2
 8005598:	2b00      	cmp	r3, #0
 800559a:	d0f0      	beq.n	800557e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800559c:	4b28      	ldr	r3, [pc, #160]	; (8005640 <HAL_RCC_OscConfig+0x274>)
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	691b      	ldr	r3, [r3, #16]
 80055a8:	00db      	lsls	r3, r3, #3
 80055aa:	4925      	ldr	r1, [pc, #148]	; (8005640 <HAL_RCC_OscConfig+0x274>)
 80055ac:	4313      	orrs	r3, r2
 80055ae:	600b      	str	r3, [r1, #0]
 80055b0:	e015      	b.n	80055de <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80055b2:	4b24      	ldr	r3, [pc, #144]	; (8005644 <HAL_RCC_OscConfig+0x278>)
 80055b4:	2200      	movs	r2, #0
 80055b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055b8:	f7fc fd9e 	bl	80020f8 <HAL_GetTick>
 80055bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80055be:	e008      	b.n	80055d2 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80055c0:	f7fc fd9a 	bl	80020f8 <HAL_GetTick>
 80055c4:	4602      	mov	r2, r0
 80055c6:	693b      	ldr	r3, [r7, #16]
 80055c8:	1ad3      	subs	r3, r2, r3
 80055ca:	2b02      	cmp	r3, #2
 80055cc:	d901      	bls.n	80055d2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80055ce:	2303      	movs	r3, #3
 80055d0:	e193      	b.n	80058fa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80055d2:	4b1b      	ldr	r3, [pc, #108]	; (8005640 <HAL_RCC_OscConfig+0x274>)
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f003 0302 	and.w	r3, r3, #2
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d1f0      	bne.n	80055c0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f003 0308 	and.w	r3, r3, #8
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d036      	beq.n	8005658 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	695b      	ldr	r3, [r3, #20]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d016      	beq.n	8005620 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80055f2:	4b15      	ldr	r3, [pc, #84]	; (8005648 <HAL_RCC_OscConfig+0x27c>)
 80055f4:	2201      	movs	r2, #1
 80055f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055f8:	f7fc fd7e 	bl	80020f8 <HAL_GetTick>
 80055fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80055fe:	e008      	b.n	8005612 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005600:	f7fc fd7a 	bl	80020f8 <HAL_GetTick>
 8005604:	4602      	mov	r2, r0
 8005606:	693b      	ldr	r3, [r7, #16]
 8005608:	1ad3      	subs	r3, r2, r3
 800560a:	2b02      	cmp	r3, #2
 800560c:	d901      	bls.n	8005612 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800560e:	2303      	movs	r3, #3
 8005610:	e173      	b.n	80058fa <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005612:	4b0b      	ldr	r3, [pc, #44]	; (8005640 <HAL_RCC_OscConfig+0x274>)
 8005614:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005616:	f003 0302 	and.w	r3, r3, #2
 800561a:	2b00      	cmp	r3, #0
 800561c:	d0f0      	beq.n	8005600 <HAL_RCC_OscConfig+0x234>
 800561e:	e01b      	b.n	8005658 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005620:	4b09      	ldr	r3, [pc, #36]	; (8005648 <HAL_RCC_OscConfig+0x27c>)
 8005622:	2200      	movs	r2, #0
 8005624:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005626:	f7fc fd67 	bl	80020f8 <HAL_GetTick>
 800562a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800562c:	e00e      	b.n	800564c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800562e:	f7fc fd63 	bl	80020f8 <HAL_GetTick>
 8005632:	4602      	mov	r2, r0
 8005634:	693b      	ldr	r3, [r7, #16]
 8005636:	1ad3      	subs	r3, r2, r3
 8005638:	2b02      	cmp	r3, #2
 800563a:	d907      	bls.n	800564c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800563c:	2303      	movs	r3, #3
 800563e:	e15c      	b.n	80058fa <HAL_RCC_OscConfig+0x52e>
 8005640:	40023800 	.word	0x40023800
 8005644:	42470000 	.word	0x42470000
 8005648:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800564c:	4b8a      	ldr	r3, [pc, #552]	; (8005878 <HAL_RCC_OscConfig+0x4ac>)
 800564e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005650:	f003 0302 	and.w	r3, r3, #2
 8005654:	2b00      	cmp	r3, #0
 8005656:	d1ea      	bne.n	800562e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f003 0304 	and.w	r3, r3, #4
 8005660:	2b00      	cmp	r3, #0
 8005662:	f000 8097 	beq.w	8005794 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005666:	2300      	movs	r3, #0
 8005668:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800566a:	4b83      	ldr	r3, [pc, #524]	; (8005878 <HAL_RCC_OscConfig+0x4ac>)
 800566c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800566e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005672:	2b00      	cmp	r3, #0
 8005674:	d10f      	bne.n	8005696 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005676:	2300      	movs	r3, #0
 8005678:	60bb      	str	r3, [r7, #8]
 800567a:	4b7f      	ldr	r3, [pc, #508]	; (8005878 <HAL_RCC_OscConfig+0x4ac>)
 800567c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800567e:	4a7e      	ldr	r2, [pc, #504]	; (8005878 <HAL_RCC_OscConfig+0x4ac>)
 8005680:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005684:	6413      	str	r3, [r2, #64]	; 0x40
 8005686:	4b7c      	ldr	r3, [pc, #496]	; (8005878 <HAL_RCC_OscConfig+0x4ac>)
 8005688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800568a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800568e:	60bb      	str	r3, [r7, #8]
 8005690:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005692:	2301      	movs	r3, #1
 8005694:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005696:	4b79      	ldr	r3, [pc, #484]	; (800587c <HAL_RCC_OscConfig+0x4b0>)
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d118      	bne.n	80056d4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80056a2:	4b76      	ldr	r3, [pc, #472]	; (800587c <HAL_RCC_OscConfig+0x4b0>)
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	4a75      	ldr	r2, [pc, #468]	; (800587c <HAL_RCC_OscConfig+0x4b0>)
 80056a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80056ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80056ae:	f7fc fd23 	bl	80020f8 <HAL_GetTick>
 80056b2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056b4:	e008      	b.n	80056c8 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80056b6:	f7fc fd1f 	bl	80020f8 <HAL_GetTick>
 80056ba:	4602      	mov	r2, r0
 80056bc:	693b      	ldr	r3, [r7, #16]
 80056be:	1ad3      	subs	r3, r2, r3
 80056c0:	2b02      	cmp	r3, #2
 80056c2:	d901      	bls.n	80056c8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80056c4:	2303      	movs	r3, #3
 80056c6:	e118      	b.n	80058fa <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056c8:	4b6c      	ldr	r3, [pc, #432]	; (800587c <HAL_RCC_OscConfig+0x4b0>)
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d0f0      	beq.n	80056b6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	689b      	ldr	r3, [r3, #8]
 80056d8:	2b01      	cmp	r3, #1
 80056da:	d106      	bne.n	80056ea <HAL_RCC_OscConfig+0x31e>
 80056dc:	4b66      	ldr	r3, [pc, #408]	; (8005878 <HAL_RCC_OscConfig+0x4ac>)
 80056de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056e0:	4a65      	ldr	r2, [pc, #404]	; (8005878 <HAL_RCC_OscConfig+0x4ac>)
 80056e2:	f043 0301 	orr.w	r3, r3, #1
 80056e6:	6713      	str	r3, [r2, #112]	; 0x70
 80056e8:	e01c      	b.n	8005724 <HAL_RCC_OscConfig+0x358>
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	689b      	ldr	r3, [r3, #8]
 80056ee:	2b05      	cmp	r3, #5
 80056f0:	d10c      	bne.n	800570c <HAL_RCC_OscConfig+0x340>
 80056f2:	4b61      	ldr	r3, [pc, #388]	; (8005878 <HAL_RCC_OscConfig+0x4ac>)
 80056f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056f6:	4a60      	ldr	r2, [pc, #384]	; (8005878 <HAL_RCC_OscConfig+0x4ac>)
 80056f8:	f043 0304 	orr.w	r3, r3, #4
 80056fc:	6713      	str	r3, [r2, #112]	; 0x70
 80056fe:	4b5e      	ldr	r3, [pc, #376]	; (8005878 <HAL_RCC_OscConfig+0x4ac>)
 8005700:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005702:	4a5d      	ldr	r2, [pc, #372]	; (8005878 <HAL_RCC_OscConfig+0x4ac>)
 8005704:	f043 0301 	orr.w	r3, r3, #1
 8005708:	6713      	str	r3, [r2, #112]	; 0x70
 800570a:	e00b      	b.n	8005724 <HAL_RCC_OscConfig+0x358>
 800570c:	4b5a      	ldr	r3, [pc, #360]	; (8005878 <HAL_RCC_OscConfig+0x4ac>)
 800570e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005710:	4a59      	ldr	r2, [pc, #356]	; (8005878 <HAL_RCC_OscConfig+0x4ac>)
 8005712:	f023 0301 	bic.w	r3, r3, #1
 8005716:	6713      	str	r3, [r2, #112]	; 0x70
 8005718:	4b57      	ldr	r3, [pc, #348]	; (8005878 <HAL_RCC_OscConfig+0x4ac>)
 800571a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800571c:	4a56      	ldr	r2, [pc, #344]	; (8005878 <HAL_RCC_OscConfig+0x4ac>)
 800571e:	f023 0304 	bic.w	r3, r3, #4
 8005722:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	689b      	ldr	r3, [r3, #8]
 8005728:	2b00      	cmp	r3, #0
 800572a:	d015      	beq.n	8005758 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800572c:	f7fc fce4 	bl	80020f8 <HAL_GetTick>
 8005730:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005732:	e00a      	b.n	800574a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005734:	f7fc fce0 	bl	80020f8 <HAL_GetTick>
 8005738:	4602      	mov	r2, r0
 800573a:	693b      	ldr	r3, [r7, #16]
 800573c:	1ad3      	subs	r3, r2, r3
 800573e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005742:	4293      	cmp	r3, r2
 8005744:	d901      	bls.n	800574a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8005746:	2303      	movs	r3, #3
 8005748:	e0d7      	b.n	80058fa <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800574a:	4b4b      	ldr	r3, [pc, #300]	; (8005878 <HAL_RCC_OscConfig+0x4ac>)
 800574c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800574e:	f003 0302 	and.w	r3, r3, #2
 8005752:	2b00      	cmp	r3, #0
 8005754:	d0ee      	beq.n	8005734 <HAL_RCC_OscConfig+0x368>
 8005756:	e014      	b.n	8005782 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005758:	f7fc fcce 	bl	80020f8 <HAL_GetTick>
 800575c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800575e:	e00a      	b.n	8005776 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005760:	f7fc fcca 	bl	80020f8 <HAL_GetTick>
 8005764:	4602      	mov	r2, r0
 8005766:	693b      	ldr	r3, [r7, #16]
 8005768:	1ad3      	subs	r3, r2, r3
 800576a:	f241 3288 	movw	r2, #5000	; 0x1388
 800576e:	4293      	cmp	r3, r2
 8005770:	d901      	bls.n	8005776 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8005772:	2303      	movs	r3, #3
 8005774:	e0c1      	b.n	80058fa <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005776:	4b40      	ldr	r3, [pc, #256]	; (8005878 <HAL_RCC_OscConfig+0x4ac>)
 8005778:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800577a:	f003 0302 	and.w	r3, r3, #2
 800577e:	2b00      	cmp	r3, #0
 8005780:	d1ee      	bne.n	8005760 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005782:	7dfb      	ldrb	r3, [r7, #23]
 8005784:	2b01      	cmp	r3, #1
 8005786:	d105      	bne.n	8005794 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005788:	4b3b      	ldr	r3, [pc, #236]	; (8005878 <HAL_RCC_OscConfig+0x4ac>)
 800578a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800578c:	4a3a      	ldr	r2, [pc, #232]	; (8005878 <HAL_RCC_OscConfig+0x4ac>)
 800578e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005792:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	699b      	ldr	r3, [r3, #24]
 8005798:	2b00      	cmp	r3, #0
 800579a:	f000 80ad 	beq.w	80058f8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800579e:	4b36      	ldr	r3, [pc, #216]	; (8005878 <HAL_RCC_OscConfig+0x4ac>)
 80057a0:	689b      	ldr	r3, [r3, #8]
 80057a2:	f003 030c 	and.w	r3, r3, #12
 80057a6:	2b08      	cmp	r3, #8
 80057a8:	d060      	beq.n	800586c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	699b      	ldr	r3, [r3, #24]
 80057ae:	2b02      	cmp	r3, #2
 80057b0:	d145      	bne.n	800583e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80057b2:	4b33      	ldr	r3, [pc, #204]	; (8005880 <HAL_RCC_OscConfig+0x4b4>)
 80057b4:	2200      	movs	r2, #0
 80057b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057b8:	f7fc fc9e 	bl	80020f8 <HAL_GetTick>
 80057bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80057be:	e008      	b.n	80057d2 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80057c0:	f7fc fc9a 	bl	80020f8 <HAL_GetTick>
 80057c4:	4602      	mov	r2, r0
 80057c6:	693b      	ldr	r3, [r7, #16]
 80057c8:	1ad3      	subs	r3, r2, r3
 80057ca:	2b02      	cmp	r3, #2
 80057cc:	d901      	bls.n	80057d2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80057ce:	2303      	movs	r3, #3
 80057d0:	e093      	b.n	80058fa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80057d2:	4b29      	ldr	r3, [pc, #164]	; (8005878 <HAL_RCC_OscConfig+0x4ac>)
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d1f0      	bne.n	80057c0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	69da      	ldr	r2, [r3, #28]
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	6a1b      	ldr	r3, [r3, #32]
 80057e6:	431a      	orrs	r2, r3
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057ec:	019b      	lsls	r3, r3, #6
 80057ee:	431a      	orrs	r2, r3
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057f4:	085b      	lsrs	r3, r3, #1
 80057f6:	3b01      	subs	r3, #1
 80057f8:	041b      	lsls	r3, r3, #16
 80057fa:	431a      	orrs	r2, r3
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005800:	061b      	lsls	r3, r3, #24
 8005802:	431a      	orrs	r2, r3
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005808:	071b      	lsls	r3, r3, #28
 800580a:	491b      	ldr	r1, [pc, #108]	; (8005878 <HAL_RCC_OscConfig+0x4ac>)
 800580c:	4313      	orrs	r3, r2
 800580e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005810:	4b1b      	ldr	r3, [pc, #108]	; (8005880 <HAL_RCC_OscConfig+0x4b4>)
 8005812:	2201      	movs	r2, #1
 8005814:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005816:	f7fc fc6f 	bl	80020f8 <HAL_GetTick>
 800581a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800581c:	e008      	b.n	8005830 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800581e:	f7fc fc6b 	bl	80020f8 <HAL_GetTick>
 8005822:	4602      	mov	r2, r0
 8005824:	693b      	ldr	r3, [r7, #16]
 8005826:	1ad3      	subs	r3, r2, r3
 8005828:	2b02      	cmp	r3, #2
 800582a:	d901      	bls.n	8005830 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800582c:	2303      	movs	r3, #3
 800582e:	e064      	b.n	80058fa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005830:	4b11      	ldr	r3, [pc, #68]	; (8005878 <HAL_RCC_OscConfig+0x4ac>)
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005838:	2b00      	cmp	r3, #0
 800583a:	d0f0      	beq.n	800581e <HAL_RCC_OscConfig+0x452>
 800583c:	e05c      	b.n	80058f8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800583e:	4b10      	ldr	r3, [pc, #64]	; (8005880 <HAL_RCC_OscConfig+0x4b4>)
 8005840:	2200      	movs	r2, #0
 8005842:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005844:	f7fc fc58 	bl	80020f8 <HAL_GetTick>
 8005848:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800584a:	e008      	b.n	800585e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800584c:	f7fc fc54 	bl	80020f8 <HAL_GetTick>
 8005850:	4602      	mov	r2, r0
 8005852:	693b      	ldr	r3, [r7, #16]
 8005854:	1ad3      	subs	r3, r2, r3
 8005856:	2b02      	cmp	r3, #2
 8005858:	d901      	bls.n	800585e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800585a:	2303      	movs	r3, #3
 800585c:	e04d      	b.n	80058fa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800585e:	4b06      	ldr	r3, [pc, #24]	; (8005878 <HAL_RCC_OscConfig+0x4ac>)
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005866:	2b00      	cmp	r3, #0
 8005868:	d1f0      	bne.n	800584c <HAL_RCC_OscConfig+0x480>
 800586a:	e045      	b.n	80058f8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	699b      	ldr	r3, [r3, #24]
 8005870:	2b01      	cmp	r3, #1
 8005872:	d107      	bne.n	8005884 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8005874:	2301      	movs	r3, #1
 8005876:	e040      	b.n	80058fa <HAL_RCC_OscConfig+0x52e>
 8005878:	40023800 	.word	0x40023800
 800587c:	40007000 	.word	0x40007000
 8005880:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005884:	4b1f      	ldr	r3, [pc, #124]	; (8005904 <HAL_RCC_OscConfig+0x538>)
 8005886:	685b      	ldr	r3, [r3, #4]
 8005888:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	699b      	ldr	r3, [r3, #24]
 800588e:	2b01      	cmp	r3, #1
 8005890:	d030      	beq.n	80058f4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800589c:	429a      	cmp	r2, r3
 800589e:	d129      	bne.n	80058f4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80058aa:	429a      	cmp	r2, r3
 80058ac:	d122      	bne.n	80058f4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80058ae:	68fa      	ldr	r2, [r7, #12]
 80058b0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80058b4:	4013      	ands	r3, r2
 80058b6:	687a      	ldr	r2, [r7, #4]
 80058b8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80058ba:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80058bc:	4293      	cmp	r3, r2
 80058be:	d119      	bne.n	80058f4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058ca:	085b      	lsrs	r3, r3, #1
 80058cc:	3b01      	subs	r3, #1
 80058ce:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80058d0:	429a      	cmp	r2, r3
 80058d2:	d10f      	bne.n	80058f4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058de:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80058e0:	429a      	cmp	r2, r3
 80058e2:	d107      	bne.n	80058f4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058ee:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80058f0:	429a      	cmp	r2, r3
 80058f2:	d001      	beq.n	80058f8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80058f4:	2301      	movs	r3, #1
 80058f6:	e000      	b.n	80058fa <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80058f8:	2300      	movs	r3, #0
}
 80058fa:	4618      	mov	r0, r3
 80058fc:	3718      	adds	r7, #24
 80058fe:	46bd      	mov	sp, r7
 8005900:	bd80      	pop	{r7, pc}
 8005902:	bf00      	nop
 8005904:	40023800 	.word	0x40023800

08005908 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005908:	b580      	push	{r7, lr}
 800590a:	b082      	sub	sp, #8
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2b00      	cmp	r3, #0
 8005914:	d101      	bne.n	800591a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005916:	2301      	movs	r3, #1
 8005918:	e041      	b.n	800599e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005920:	b2db      	uxtb	r3, r3
 8005922:	2b00      	cmp	r3, #0
 8005924:	d106      	bne.n	8005934 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	2200      	movs	r2, #0
 800592a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800592e:	6878      	ldr	r0, [r7, #4]
 8005930:	f7fc f9ac 	bl	8001c8c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2202      	movs	r2, #2
 8005938:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681a      	ldr	r2, [r3, #0]
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	3304      	adds	r3, #4
 8005944:	4619      	mov	r1, r3
 8005946:	4610      	mov	r0, r2
 8005948:	f000 fc7c 	bl	8006244 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2201      	movs	r2, #1
 8005950:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2201      	movs	r2, #1
 8005958:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2201      	movs	r2, #1
 8005960:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2201      	movs	r2, #1
 8005968:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2201      	movs	r2, #1
 8005970:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2201      	movs	r2, #1
 8005978:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2201      	movs	r2, #1
 8005980:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2201      	movs	r2, #1
 8005988:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2201      	movs	r2, #1
 8005990:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2201      	movs	r2, #1
 8005998:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800599c:	2300      	movs	r3, #0
}
 800599e:	4618      	mov	r0, r3
 80059a0:	3708      	adds	r7, #8
 80059a2:	46bd      	mov	sp, r7
 80059a4:	bd80      	pop	{r7, pc}

080059a6 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80059a6:	b580      	push	{r7, lr}
 80059a8:	b082      	sub	sp, #8
 80059aa:	af00      	add	r7, sp, #0
 80059ac:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d101      	bne.n	80059b8 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80059b4:	2301      	movs	r3, #1
 80059b6:	e041      	b.n	8005a3c <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059be:	b2db      	uxtb	r3, r3
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d106      	bne.n	80059d2 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2200      	movs	r2, #0
 80059c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80059cc:	6878      	ldr	r0, [r7, #4]
 80059ce:	f7fc f8ef 	bl	8001bb0 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	2202      	movs	r2, #2
 80059d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681a      	ldr	r2, [r3, #0]
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	3304      	adds	r3, #4
 80059e2:	4619      	mov	r1, r3
 80059e4:	4610      	mov	r0, r2
 80059e6:	f000 fc2d 	bl	8006244 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	2201      	movs	r2, #1
 80059ee:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	2201      	movs	r2, #1
 80059f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	2201      	movs	r2, #1
 80059fe:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	2201      	movs	r2, #1
 8005a06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	2201      	movs	r2, #1
 8005a0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	2201      	movs	r2, #1
 8005a16:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	2201      	movs	r2, #1
 8005a1e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	2201      	movs	r2, #1
 8005a26:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	2201      	movs	r2, #1
 8005a2e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	2201      	movs	r2, #1
 8005a36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005a3a:	2300      	movs	r3, #0
}
 8005a3c:	4618      	mov	r0, r3
 8005a3e:	3708      	adds	r7, #8
 8005a40:	46bd      	mov	sp, r7
 8005a42:	bd80      	pop	{r7, pc}

08005a44 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005a44:	b580      	push	{r7, lr}
 8005a46:	b084      	sub	sp, #16
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]
 8005a4c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005a4e:	2300      	movs	r3, #0
 8005a50:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8005a52:	683b      	ldr	r3, [r7, #0]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d104      	bne.n	8005a62 <HAL_TIM_IC_Start_IT+0x1e>
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005a5e:	b2db      	uxtb	r3, r3
 8005a60:	e013      	b.n	8005a8a <HAL_TIM_IC_Start_IT+0x46>
 8005a62:	683b      	ldr	r3, [r7, #0]
 8005a64:	2b04      	cmp	r3, #4
 8005a66:	d104      	bne.n	8005a72 <HAL_TIM_IC_Start_IT+0x2e>
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005a6e:	b2db      	uxtb	r3, r3
 8005a70:	e00b      	b.n	8005a8a <HAL_TIM_IC_Start_IT+0x46>
 8005a72:	683b      	ldr	r3, [r7, #0]
 8005a74:	2b08      	cmp	r3, #8
 8005a76:	d104      	bne.n	8005a82 <HAL_TIM_IC_Start_IT+0x3e>
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005a7e:	b2db      	uxtb	r3, r3
 8005a80:	e003      	b.n	8005a8a <HAL_TIM_IC_Start_IT+0x46>
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005a88:	b2db      	uxtb	r3, r3
 8005a8a:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8005a8c:	683b      	ldr	r3, [r7, #0]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d104      	bne.n	8005a9c <HAL_TIM_IC_Start_IT+0x58>
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005a98:	b2db      	uxtb	r3, r3
 8005a9a:	e013      	b.n	8005ac4 <HAL_TIM_IC_Start_IT+0x80>
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	2b04      	cmp	r3, #4
 8005aa0:	d104      	bne.n	8005aac <HAL_TIM_IC_Start_IT+0x68>
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005aa8:	b2db      	uxtb	r3, r3
 8005aaa:	e00b      	b.n	8005ac4 <HAL_TIM_IC_Start_IT+0x80>
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	2b08      	cmp	r3, #8
 8005ab0:	d104      	bne.n	8005abc <HAL_TIM_IC_Start_IT+0x78>
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005ab8:	b2db      	uxtb	r3, r3
 8005aba:	e003      	b.n	8005ac4 <HAL_TIM_IC_Start_IT+0x80>
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005ac2:	b2db      	uxtb	r3, r3
 8005ac4:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8005ac6:	7bbb      	ldrb	r3, [r7, #14]
 8005ac8:	2b01      	cmp	r3, #1
 8005aca:	d102      	bne.n	8005ad2 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8005acc:	7b7b      	ldrb	r3, [r7, #13]
 8005ace:	2b01      	cmp	r3, #1
 8005ad0:	d001      	beq.n	8005ad6 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8005ad2:	2301      	movs	r3, #1
 8005ad4:	e0cc      	b.n	8005c70 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005ad6:	683b      	ldr	r3, [r7, #0]
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d104      	bne.n	8005ae6 <HAL_TIM_IC_Start_IT+0xa2>
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2202      	movs	r2, #2
 8005ae0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005ae4:	e013      	b.n	8005b0e <HAL_TIM_IC_Start_IT+0xca>
 8005ae6:	683b      	ldr	r3, [r7, #0]
 8005ae8:	2b04      	cmp	r3, #4
 8005aea:	d104      	bne.n	8005af6 <HAL_TIM_IC_Start_IT+0xb2>
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2202      	movs	r2, #2
 8005af0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005af4:	e00b      	b.n	8005b0e <HAL_TIM_IC_Start_IT+0xca>
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	2b08      	cmp	r3, #8
 8005afa:	d104      	bne.n	8005b06 <HAL_TIM_IC_Start_IT+0xc2>
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2202      	movs	r2, #2
 8005b00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005b04:	e003      	b.n	8005b0e <HAL_TIM_IC_Start_IT+0xca>
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	2202      	movs	r2, #2
 8005b0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005b0e:	683b      	ldr	r3, [r7, #0]
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d104      	bne.n	8005b1e <HAL_TIM_IC_Start_IT+0xda>
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2202      	movs	r2, #2
 8005b18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005b1c:	e013      	b.n	8005b46 <HAL_TIM_IC_Start_IT+0x102>
 8005b1e:	683b      	ldr	r3, [r7, #0]
 8005b20:	2b04      	cmp	r3, #4
 8005b22:	d104      	bne.n	8005b2e <HAL_TIM_IC_Start_IT+0xea>
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2202      	movs	r2, #2
 8005b28:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005b2c:	e00b      	b.n	8005b46 <HAL_TIM_IC_Start_IT+0x102>
 8005b2e:	683b      	ldr	r3, [r7, #0]
 8005b30:	2b08      	cmp	r3, #8
 8005b32:	d104      	bne.n	8005b3e <HAL_TIM_IC_Start_IT+0xfa>
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2202      	movs	r2, #2
 8005b38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005b3c:	e003      	b.n	8005b46 <HAL_TIM_IC_Start_IT+0x102>
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	2202      	movs	r2, #2
 8005b42:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8005b46:	683b      	ldr	r3, [r7, #0]
 8005b48:	2b0c      	cmp	r3, #12
 8005b4a:	d841      	bhi.n	8005bd0 <HAL_TIM_IC_Start_IT+0x18c>
 8005b4c:	a201      	add	r2, pc, #4	; (adr r2, 8005b54 <HAL_TIM_IC_Start_IT+0x110>)
 8005b4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b52:	bf00      	nop
 8005b54:	08005b89 	.word	0x08005b89
 8005b58:	08005bd1 	.word	0x08005bd1
 8005b5c:	08005bd1 	.word	0x08005bd1
 8005b60:	08005bd1 	.word	0x08005bd1
 8005b64:	08005b9b 	.word	0x08005b9b
 8005b68:	08005bd1 	.word	0x08005bd1
 8005b6c:	08005bd1 	.word	0x08005bd1
 8005b70:	08005bd1 	.word	0x08005bd1
 8005b74:	08005bad 	.word	0x08005bad
 8005b78:	08005bd1 	.word	0x08005bd1
 8005b7c:	08005bd1 	.word	0x08005bd1
 8005b80:	08005bd1 	.word	0x08005bd1
 8005b84:	08005bbf 	.word	0x08005bbf
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	68da      	ldr	r2, [r3, #12]
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f042 0202 	orr.w	r2, r2, #2
 8005b96:	60da      	str	r2, [r3, #12]
      break;
 8005b98:	e01d      	b.n	8005bd6 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	68da      	ldr	r2, [r3, #12]
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f042 0204 	orr.w	r2, r2, #4
 8005ba8:	60da      	str	r2, [r3, #12]
      break;
 8005baa:	e014      	b.n	8005bd6 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	68da      	ldr	r2, [r3, #12]
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f042 0208 	orr.w	r2, r2, #8
 8005bba:	60da      	str	r2, [r3, #12]
      break;
 8005bbc:	e00b      	b.n	8005bd6 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	68da      	ldr	r2, [r3, #12]
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f042 0210 	orr.w	r2, r2, #16
 8005bcc:	60da      	str	r2, [r3, #12]
      break;
 8005bce:	e002      	b.n	8005bd6 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8005bd0:	2301      	movs	r3, #1
 8005bd2:	73fb      	strb	r3, [r7, #15]
      break;
 8005bd4:	bf00      	nop
  }

  if (status == HAL_OK)
 8005bd6:	7bfb      	ldrb	r3, [r7, #15]
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d148      	bne.n	8005c6e <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	2201      	movs	r2, #1
 8005be2:	6839      	ldr	r1, [r7, #0]
 8005be4:	4618      	mov	r0, r3
 8005be6:	f000 fd91 	bl	800670c <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	4a22      	ldr	r2, [pc, #136]	; (8005c78 <HAL_TIM_IC_Start_IT+0x234>)
 8005bf0:	4293      	cmp	r3, r2
 8005bf2:	d022      	beq.n	8005c3a <HAL_TIM_IC_Start_IT+0x1f6>
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005bfc:	d01d      	beq.n	8005c3a <HAL_TIM_IC_Start_IT+0x1f6>
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	4a1e      	ldr	r2, [pc, #120]	; (8005c7c <HAL_TIM_IC_Start_IT+0x238>)
 8005c04:	4293      	cmp	r3, r2
 8005c06:	d018      	beq.n	8005c3a <HAL_TIM_IC_Start_IT+0x1f6>
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	4a1c      	ldr	r2, [pc, #112]	; (8005c80 <HAL_TIM_IC_Start_IT+0x23c>)
 8005c0e:	4293      	cmp	r3, r2
 8005c10:	d013      	beq.n	8005c3a <HAL_TIM_IC_Start_IT+0x1f6>
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	4a1b      	ldr	r2, [pc, #108]	; (8005c84 <HAL_TIM_IC_Start_IT+0x240>)
 8005c18:	4293      	cmp	r3, r2
 8005c1a:	d00e      	beq.n	8005c3a <HAL_TIM_IC_Start_IT+0x1f6>
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	4a19      	ldr	r2, [pc, #100]	; (8005c88 <HAL_TIM_IC_Start_IT+0x244>)
 8005c22:	4293      	cmp	r3, r2
 8005c24:	d009      	beq.n	8005c3a <HAL_TIM_IC_Start_IT+0x1f6>
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	4a18      	ldr	r2, [pc, #96]	; (8005c8c <HAL_TIM_IC_Start_IT+0x248>)
 8005c2c:	4293      	cmp	r3, r2
 8005c2e:	d004      	beq.n	8005c3a <HAL_TIM_IC_Start_IT+0x1f6>
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	4a16      	ldr	r2, [pc, #88]	; (8005c90 <HAL_TIM_IC_Start_IT+0x24c>)
 8005c36:	4293      	cmp	r3, r2
 8005c38:	d111      	bne.n	8005c5e <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	689b      	ldr	r3, [r3, #8]
 8005c40:	f003 0307 	and.w	r3, r3, #7
 8005c44:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c46:	68bb      	ldr	r3, [r7, #8]
 8005c48:	2b06      	cmp	r3, #6
 8005c4a:	d010      	beq.n	8005c6e <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	681a      	ldr	r2, [r3, #0]
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f042 0201 	orr.w	r2, r2, #1
 8005c5a:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c5c:	e007      	b.n	8005c6e <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	681a      	ldr	r2, [r3, #0]
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f042 0201 	orr.w	r2, r2, #1
 8005c6c:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8005c6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c70:	4618      	mov	r0, r3
 8005c72:	3710      	adds	r7, #16
 8005c74:	46bd      	mov	sp, r7
 8005c76:	bd80      	pop	{r7, pc}
 8005c78:	40010000 	.word	0x40010000
 8005c7c:	40000400 	.word	0x40000400
 8005c80:	40000800 	.word	0x40000800
 8005c84:	40000c00 	.word	0x40000c00
 8005c88:	40010400 	.word	0x40010400
 8005c8c:	40014000 	.word	0x40014000
 8005c90:	40001800 	.word	0x40001800

08005c94 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005c94:	b580      	push	{r7, lr}
 8005c96:	b082      	sub	sp, #8
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	691b      	ldr	r3, [r3, #16]
 8005ca2:	f003 0302 	and.w	r3, r3, #2
 8005ca6:	2b02      	cmp	r3, #2
 8005ca8:	d122      	bne.n	8005cf0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	68db      	ldr	r3, [r3, #12]
 8005cb0:	f003 0302 	and.w	r3, r3, #2
 8005cb4:	2b02      	cmp	r3, #2
 8005cb6:	d11b      	bne.n	8005cf0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	f06f 0202 	mvn.w	r2, #2
 8005cc0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	2201      	movs	r2, #1
 8005cc6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	699b      	ldr	r3, [r3, #24]
 8005cce:	f003 0303 	and.w	r3, r3, #3
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d003      	beq.n	8005cde <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005cd6:	6878      	ldr	r0, [r7, #4]
 8005cd8:	f7fb fca2 	bl	8001620 <HAL_TIM_IC_CaptureCallback>
 8005cdc:	e005      	b.n	8005cea <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005cde:	6878      	ldr	r0, [r7, #4]
 8005ce0:	f000 fa92 	bl	8006208 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ce4:	6878      	ldr	r0, [r7, #4]
 8005ce6:	f000 fa99 	bl	800621c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	2200      	movs	r2, #0
 8005cee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	691b      	ldr	r3, [r3, #16]
 8005cf6:	f003 0304 	and.w	r3, r3, #4
 8005cfa:	2b04      	cmp	r3, #4
 8005cfc:	d122      	bne.n	8005d44 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	68db      	ldr	r3, [r3, #12]
 8005d04:	f003 0304 	and.w	r3, r3, #4
 8005d08:	2b04      	cmp	r3, #4
 8005d0a:	d11b      	bne.n	8005d44 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f06f 0204 	mvn.w	r2, #4
 8005d14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	2202      	movs	r2, #2
 8005d1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	699b      	ldr	r3, [r3, #24]
 8005d22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d003      	beq.n	8005d32 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d2a:	6878      	ldr	r0, [r7, #4]
 8005d2c:	f7fb fc78 	bl	8001620 <HAL_TIM_IC_CaptureCallback>
 8005d30:	e005      	b.n	8005d3e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d32:	6878      	ldr	r0, [r7, #4]
 8005d34:	f000 fa68 	bl	8006208 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d38:	6878      	ldr	r0, [r7, #4]
 8005d3a:	f000 fa6f 	bl	800621c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	2200      	movs	r2, #0
 8005d42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	691b      	ldr	r3, [r3, #16]
 8005d4a:	f003 0308 	and.w	r3, r3, #8
 8005d4e:	2b08      	cmp	r3, #8
 8005d50:	d122      	bne.n	8005d98 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	68db      	ldr	r3, [r3, #12]
 8005d58:	f003 0308 	and.w	r3, r3, #8
 8005d5c:	2b08      	cmp	r3, #8
 8005d5e:	d11b      	bne.n	8005d98 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f06f 0208 	mvn.w	r2, #8
 8005d68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	2204      	movs	r2, #4
 8005d6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	69db      	ldr	r3, [r3, #28]
 8005d76:	f003 0303 	and.w	r3, r3, #3
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d003      	beq.n	8005d86 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d7e:	6878      	ldr	r0, [r7, #4]
 8005d80:	f7fb fc4e 	bl	8001620 <HAL_TIM_IC_CaptureCallback>
 8005d84:	e005      	b.n	8005d92 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d86:	6878      	ldr	r0, [r7, #4]
 8005d88:	f000 fa3e 	bl	8006208 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d8c:	6878      	ldr	r0, [r7, #4]
 8005d8e:	f000 fa45 	bl	800621c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	2200      	movs	r2, #0
 8005d96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	691b      	ldr	r3, [r3, #16]
 8005d9e:	f003 0310 	and.w	r3, r3, #16
 8005da2:	2b10      	cmp	r3, #16
 8005da4:	d122      	bne.n	8005dec <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	68db      	ldr	r3, [r3, #12]
 8005dac:	f003 0310 	and.w	r3, r3, #16
 8005db0:	2b10      	cmp	r3, #16
 8005db2:	d11b      	bne.n	8005dec <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f06f 0210 	mvn.w	r2, #16
 8005dbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	2208      	movs	r2, #8
 8005dc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	69db      	ldr	r3, [r3, #28]
 8005dca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d003      	beq.n	8005dda <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005dd2:	6878      	ldr	r0, [r7, #4]
 8005dd4:	f7fb fc24 	bl	8001620 <HAL_TIM_IC_CaptureCallback>
 8005dd8:	e005      	b.n	8005de6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005dda:	6878      	ldr	r0, [r7, #4]
 8005ddc:	f000 fa14 	bl	8006208 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005de0:	6878      	ldr	r0, [r7, #4]
 8005de2:	f000 fa1b 	bl	800621c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	2200      	movs	r2, #0
 8005dea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	691b      	ldr	r3, [r3, #16]
 8005df2:	f003 0301 	and.w	r3, r3, #1
 8005df6:	2b01      	cmp	r3, #1
 8005df8:	d10e      	bne.n	8005e18 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	68db      	ldr	r3, [r3, #12]
 8005e00:	f003 0301 	and.w	r3, r3, #1
 8005e04:	2b01      	cmp	r3, #1
 8005e06:	d107      	bne.n	8005e18 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	f06f 0201 	mvn.w	r2, #1
 8005e10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005e12:	6878      	ldr	r0, [r7, #4]
 8005e14:	f000 f9ee 	bl	80061f4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	691b      	ldr	r3, [r3, #16]
 8005e1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e22:	2b80      	cmp	r3, #128	; 0x80
 8005e24:	d10e      	bne.n	8005e44 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	68db      	ldr	r3, [r3, #12]
 8005e2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e30:	2b80      	cmp	r3, #128	; 0x80
 8005e32:	d107      	bne.n	8005e44 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005e3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005e3e:	6878      	ldr	r0, [r7, #4]
 8005e40:	f000 fd10 	bl	8006864 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	691b      	ldr	r3, [r3, #16]
 8005e4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e4e:	2b40      	cmp	r3, #64	; 0x40
 8005e50:	d10e      	bne.n	8005e70 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	68db      	ldr	r3, [r3, #12]
 8005e58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e5c:	2b40      	cmp	r3, #64	; 0x40
 8005e5e:	d107      	bne.n	8005e70 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005e68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005e6a:	6878      	ldr	r0, [r7, #4]
 8005e6c:	f000 f9e0 	bl	8006230 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	691b      	ldr	r3, [r3, #16]
 8005e76:	f003 0320 	and.w	r3, r3, #32
 8005e7a:	2b20      	cmp	r3, #32
 8005e7c:	d10e      	bne.n	8005e9c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	68db      	ldr	r3, [r3, #12]
 8005e84:	f003 0320 	and.w	r3, r3, #32
 8005e88:	2b20      	cmp	r3, #32
 8005e8a:	d107      	bne.n	8005e9c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	f06f 0220 	mvn.w	r2, #32
 8005e94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005e96:	6878      	ldr	r0, [r7, #4]
 8005e98:	f000 fcda 	bl	8006850 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005e9c:	bf00      	nop
 8005e9e:	3708      	adds	r7, #8
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	bd80      	pop	{r7, pc}

08005ea4 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005ea4:	b580      	push	{r7, lr}
 8005ea6:	b086      	sub	sp, #24
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	60f8      	str	r0, [r7, #12]
 8005eac:	60b9      	str	r1, [r7, #8]
 8005eae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005eb0:	2300      	movs	r3, #0
 8005eb2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005eba:	2b01      	cmp	r3, #1
 8005ebc:	d101      	bne.n	8005ec2 <HAL_TIM_IC_ConfigChannel+0x1e>
 8005ebe:	2302      	movs	r3, #2
 8005ec0:	e088      	b.n	8005fd4 <HAL_TIM_IC_ConfigChannel+0x130>
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	2201      	movs	r2, #1
 8005ec6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d11b      	bne.n	8005f08 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	6818      	ldr	r0, [r3, #0]
 8005ed4:	68bb      	ldr	r3, [r7, #8]
 8005ed6:	6819      	ldr	r1, [r3, #0]
 8005ed8:	68bb      	ldr	r3, [r7, #8]
 8005eda:	685a      	ldr	r2, [r3, #4]
 8005edc:	68bb      	ldr	r3, [r7, #8]
 8005ede:	68db      	ldr	r3, [r3, #12]
 8005ee0:	f000 fa50 	bl	8006384 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	699a      	ldr	r2, [r3, #24]
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	f022 020c 	bic.w	r2, r2, #12
 8005ef2:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	6999      	ldr	r1, [r3, #24]
 8005efa:	68bb      	ldr	r3, [r7, #8]
 8005efc:	689a      	ldr	r2, [r3, #8]
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	430a      	orrs	r2, r1
 8005f04:	619a      	str	r2, [r3, #24]
 8005f06:	e060      	b.n	8005fca <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2b04      	cmp	r3, #4
 8005f0c:	d11c      	bne.n	8005f48 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	6818      	ldr	r0, [r3, #0]
 8005f12:	68bb      	ldr	r3, [r7, #8]
 8005f14:	6819      	ldr	r1, [r3, #0]
 8005f16:	68bb      	ldr	r3, [r7, #8]
 8005f18:	685a      	ldr	r2, [r3, #4]
 8005f1a:	68bb      	ldr	r3, [r7, #8]
 8005f1c:	68db      	ldr	r3, [r3, #12]
 8005f1e:	f000 fad4 	bl	80064ca <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	699a      	ldr	r2, [r3, #24]
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005f30:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	6999      	ldr	r1, [r3, #24]
 8005f38:	68bb      	ldr	r3, [r7, #8]
 8005f3a:	689b      	ldr	r3, [r3, #8]
 8005f3c:	021a      	lsls	r2, r3, #8
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	430a      	orrs	r2, r1
 8005f44:	619a      	str	r2, [r3, #24]
 8005f46:	e040      	b.n	8005fca <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2b08      	cmp	r3, #8
 8005f4c:	d11b      	bne.n	8005f86 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	6818      	ldr	r0, [r3, #0]
 8005f52:	68bb      	ldr	r3, [r7, #8]
 8005f54:	6819      	ldr	r1, [r3, #0]
 8005f56:	68bb      	ldr	r3, [r7, #8]
 8005f58:	685a      	ldr	r2, [r3, #4]
 8005f5a:	68bb      	ldr	r3, [r7, #8]
 8005f5c:	68db      	ldr	r3, [r3, #12]
 8005f5e:	f000 fb21 	bl	80065a4 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	69da      	ldr	r2, [r3, #28]
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	f022 020c 	bic.w	r2, r2, #12
 8005f70:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	69d9      	ldr	r1, [r3, #28]
 8005f78:	68bb      	ldr	r3, [r7, #8]
 8005f7a:	689a      	ldr	r2, [r3, #8]
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	430a      	orrs	r2, r1
 8005f82:	61da      	str	r2, [r3, #28]
 8005f84:	e021      	b.n	8005fca <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	2b0c      	cmp	r3, #12
 8005f8a:	d11c      	bne.n	8005fc6 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	6818      	ldr	r0, [r3, #0]
 8005f90:	68bb      	ldr	r3, [r7, #8]
 8005f92:	6819      	ldr	r1, [r3, #0]
 8005f94:	68bb      	ldr	r3, [r7, #8]
 8005f96:	685a      	ldr	r2, [r3, #4]
 8005f98:	68bb      	ldr	r3, [r7, #8]
 8005f9a:	68db      	ldr	r3, [r3, #12]
 8005f9c:	f000 fb3e 	bl	800661c <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	69da      	ldr	r2, [r3, #28]
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005fae:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	69d9      	ldr	r1, [r3, #28]
 8005fb6:	68bb      	ldr	r3, [r7, #8]
 8005fb8:	689b      	ldr	r3, [r3, #8]
 8005fba:	021a      	lsls	r2, r3, #8
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	430a      	orrs	r2, r1
 8005fc2:	61da      	str	r2, [r3, #28]
 8005fc4:	e001      	b.n	8005fca <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8005fc6:	2301      	movs	r3, #1
 8005fc8:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	2200      	movs	r2, #0
 8005fce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005fd2:	7dfb      	ldrb	r3, [r7, #23]
}
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	3718      	adds	r7, #24
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	bd80      	pop	{r7, pc}

08005fdc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005fdc:	b580      	push	{r7, lr}
 8005fde:	b084      	sub	sp, #16
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	6078      	str	r0, [r7, #4]
 8005fe4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005fe6:	2300      	movs	r3, #0
 8005fe8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ff0:	2b01      	cmp	r3, #1
 8005ff2:	d101      	bne.n	8005ff8 <HAL_TIM_ConfigClockSource+0x1c>
 8005ff4:	2302      	movs	r3, #2
 8005ff6:	e0b4      	b.n	8006162 <HAL_TIM_ConfigClockSource+0x186>
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2201      	movs	r2, #1
 8005ffc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2202      	movs	r2, #2
 8006004:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	689b      	ldr	r3, [r3, #8]
 800600e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006010:	68bb      	ldr	r3, [r7, #8]
 8006012:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006016:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006018:	68bb      	ldr	r3, [r7, #8]
 800601a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800601e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	68ba      	ldr	r2, [r7, #8]
 8006026:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006028:	683b      	ldr	r3, [r7, #0]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006030:	d03e      	beq.n	80060b0 <HAL_TIM_ConfigClockSource+0xd4>
 8006032:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006036:	f200 8087 	bhi.w	8006148 <HAL_TIM_ConfigClockSource+0x16c>
 800603a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800603e:	f000 8086 	beq.w	800614e <HAL_TIM_ConfigClockSource+0x172>
 8006042:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006046:	d87f      	bhi.n	8006148 <HAL_TIM_ConfigClockSource+0x16c>
 8006048:	2b70      	cmp	r3, #112	; 0x70
 800604a:	d01a      	beq.n	8006082 <HAL_TIM_ConfigClockSource+0xa6>
 800604c:	2b70      	cmp	r3, #112	; 0x70
 800604e:	d87b      	bhi.n	8006148 <HAL_TIM_ConfigClockSource+0x16c>
 8006050:	2b60      	cmp	r3, #96	; 0x60
 8006052:	d050      	beq.n	80060f6 <HAL_TIM_ConfigClockSource+0x11a>
 8006054:	2b60      	cmp	r3, #96	; 0x60
 8006056:	d877      	bhi.n	8006148 <HAL_TIM_ConfigClockSource+0x16c>
 8006058:	2b50      	cmp	r3, #80	; 0x50
 800605a:	d03c      	beq.n	80060d6 <HAL_TIM_ConfigClockSource+0xfa>
 800605c:	2b50      	cmp	r3, #80	; 0x50
 800605e:	d873      	bhi.n	8006148 <HAL_TIM_ConfigClockSource+0x16c>
 8006060:	2b40      	cmp	r3, #64	; 0x40
 8006062:	d058      	beq.n	8006116 <HAL_TIM_ConfigClockSource+0x13a>
 8006064:	2b40      	cmp	r3, #64	; 0x40
 8006066:	d86f      	bhi.n	8006148 <HAL_TIM_ConfigClockSource+0x16c>
 8006068:	2b30      	cmp	r3, #48	; 0x30
 800606a:	d064      	beq.n	8006136 <HAL_TIM_ConfigClockSource+0x15a>
 800606c:	2b30      	cmp	r3, #48	; 0x30
 800606e:	d86b      	bhi.n	8006148 <HAL_TIM_ConfigClockSource+0x16c>
 8006070:	2b20      	cmp	r3, #32
 8006072:	d060      	beq.n	8006136 <HAL_TIM_ConfigClockSource+0x15a>
 8006074:	2b20      	cmp	r3, #32
 8006076:	d867      	bhi.n	8006148 <HAL_TIM_ConfigClockSource+0x16c>
 8006078:	2b00      	cmp	r3, #0
 800607a:	d05c      	beq.n	8006136 <HAL_TIM_ConfigClockSource+0x15a>
 800607c:	2b10      	cmp	r3, #16
 800607e:	d05a      	beq.n	8006136 <HAL_TIM_ConfigClockSource+0x15a>
 8006080:	e062      	b.n	8006148 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	6818      	ldr	r0, [r3, #0]
 8006086:	683b      	ldr	r3, [r7, #0]
 8006088:	6899      	ldr	r1, [r3, #8]
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	685a      	ldr	r2, [r3, #4]
 800608e:	683b      	ldr	r3, [r7, #0]
 8006090:	68db      	ldr	r3, [r3, #12]
 8006092:	f000 fb1b 	bl	80066cc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	689b      	ldr	r3, [r3, #8]
 800609c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800609e:	68bb      	ldr	r3, [r7, #8]
 80060a0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80060a4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	68ba      	ldr	r2, [r7, #8]
 80060ac:	609a      	str	r2, [r3, #8]
      break;
 80060ae:	e04f      	b.n	8006150 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	6818      	ldr	r0, [r3, #0]
 80060b4:	683b      	ldr	r3, [r7, #0]
 80060b6:	6899      	ldr	r1, [r3, #8]
 80060b8:	683b      	ldr	r3, [r7, #0]
 80060ba:	685a      	ldr	r2, [r3, #4]
 80060bc:	683b      	ldr	r3, [r7, #0]
 80060be:	68db      	ldr	r3, [r3, #12]
 80060c0:	f000 fb04 	bl	80066cc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	689a      	ldr	r2, [r3, #8]
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80060d2:	609a      	str	r2, [r3, #8]
      break;
 80060d4:	e03c      	b.n	8006150 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	6818      	ldr	r0, [r3, #0]
 80060da:	683b      	ldr	r3, [r7, #0]
 80060dc:	6859      	ldr	r1, [r3, #4]
 80060de:	683b      	ldr	r3, [r7, #0]
 80060e0:	68db      	ldr	r3, [r3, #12]
 80060e2:	461a      	mov	r2, r3
 80060e4:	f000 f9c2 	bl	800646c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	2150      	movs	r1, #80	; 0x50
 80060ee:	4618      	mov	r0, r3
 80060f0:	f000 fad1 	bl	8006696 <TIM_ITRx_SetConfig>
      break;
 80060f4:	e02c      	b.n	8006150 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	6818      	ldr	r0, [r3, #0]
 80060fa:	683b      	ldr	r3, [r7, #0]
 80060fc:	6859      	ldr	r1, [r3, #4]
 80060fe:	683b      	ldr	r3, [r7, #0]
 8006100:	68db      	ldr	r3, [r3, #12]
 8006102:	461a      	mov	r2, r3
 8006104:	f000 fa1e 	bl	8006544 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	2160      	movs	r1, #96	; 0x60
 800610e:	4618      	mov	r0, r3
 8006110:	f000 fac1 	bl	8006696 <TIM_ITRx_SetConfig>
      break;
 8006114:	e01c      	b.n	8006150 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	6818      	ldr	r0, [r3, #0]
 800611a:	683b      	ldr	r3, [r7, #0]
 800611c:	6859      	ldr	r1, [r3, #4]
 800611e:	683b      	ldr	r3, [r7, #0]
 8006120:	68db      	ldr	r3, [r3, #12]
 8006122:	461a      	mov	r2, r3
 8006124:	f000 f9a2 	bl	800646c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	2140      	movs	r1, #64	; 0x40
 800612e:	4618      	mov	r0, r3
 8006130:	f000 fab1 	bl	8006696 <TIM_ITRx_SetConfig>
      break;
 8006134:	e00c      	b.n	8006150 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681a      	ldr	r2, [r3, #0]
 800613a:	683b      	ldr	r3, [r7, #0]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	4619      	mov	r1, r3
 8006140:	4610      	mov	r0, r2
 8006142:	f000 faa8 	bl	8006696 <TIM_ITRx_SetConfig>
      break;
 8006146:	e003      	b.n	8006150 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006148:	2301      	movs	r3, #1
 800614a:	73fb      	strb	r3, [r7, #15]
      break;
 800614c:	e000      	b.n	8006150 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800614e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2201      	movs	r2, #1
 8006154:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	2200      	movs	r2, #0
 800615c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006160:	7bfb      	ldrb	r3, [r7, #15]
}
 8006162:	4618      	mov	r0, r3
 8006164:	3710      	adds	r7, #16
 8006166:	46bd      	mov	sp, r7
 8006168:	bd80      	pop	{r7, pc}
	...

0800616c <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800616c:	b480      	push	{r7}
 800616e:	b085      	sub	sp, #20
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
 8006174:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8006176:	2300      	movs	r3, #0
 8006178:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800617a:	683b      	ldr	r3, [r7, #0]
 800617c:	2b0c      	cmp	r3, #12
 800617e:	d831      	bhi.n	80061e4 <HAL_TIM_ReadCapturedValue+0x78>
 8006180:	a201      	add	r2, pc, #4	; (adr r2, 8006188 <HAL_TIM_ReadCapturedValue+0x1c>)
 8006182:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006186:	bf00      	nop
 8006188:	080061bd 	.word	0x080061bd
 800618c:	080061e5 	.word	0x080061e5
 8006190:	080061e5 	.word	0x080061e5
 8006194:	080061e5 	.word	0x080061e5
 8006198:	080061c7 	.word	0x080061c7
 800619c:	080061e5 	.word	0x080061e5
 80061a0:	080061e5 	.word	0x080061e5
 80061a4:	080061e5 	.word	0x080061e5
 80061a8:	080061d1 	.word	0x080061d1
 80061ac:	080061e5 	.word	0x080061e5
 80061b0:	080061e5 	.word	0x080061e5
 80061b4:	080061e5 	.word	0x080061e5
 80061b8:	080061db 	.word	0x080061db
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061c2:	60fb      	str	r3, [r7, #12]

      break;
 80061c4:	e00f      	b.n	80061e6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061cc:	60fb      	str	r3, [r7, #12]

      break;
 80061ce:	e00a      	b.n	80061e6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061d6:	60fb      	str	r3, [r7, #12]

      break;
 80061d8:	e005      	b.n	80061e6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061e0:	60fb      	str	r3, [r7, #12]

      break;
 80061e2:	e000      	b.n	80061e6 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80061e4:	bf00      	nop
  }

  return tmpreg;
 80061e6:	68fb      	ldr	r3, [r7, #12]
}
 80061e8:	4618      	mov	r0, r3
 80061ea:	3714      	adds	r7, #20
 80061ec:	46bd      	mov	sp, r7
 80061ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f2:	4770      	bx	lr

080061f4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80061f4:	b480      	push	{r7}
 80061f6:	b083      	sub	sp, #12
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80061fc:	bf00      	nop
 80061fe:	370c      	adds	r7, #12
 8006200:	46bd      	mov	sp, r7
 8006202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006206:	4770      	bx	lr

08006208 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006208:	b480      	push	{r7}
 800620a:	b083      	sub	sp, #12
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006210:	bf00      	nop
 8006212:	370c      	adds	r7, #12
 8006214:	46bd      	mov	sp, r7
 8006216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621a:	4770      	bx	lr

0800621c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800621c:	b480      	push	{r7}
 800621e:	b083      	sub	sp, #12
 8006220:	af00      	add	r7, sp, #0
 8006222:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006224:	bf00      	nop
 8006226:	370c      	adds	r7, #12
 8006228:	46bd      	mov	sp, r7
 800622a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622e:	4770      	bx	lr

08006230 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006230:	b480      	push	{r7}
 8006232:	b083      	sub	sp, #12
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006238:	bf00      	nop
 800623a:	370c      	adds	r7, #12
 800623c:	46bd      	mov	sp, r7
 800623e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006242:	4770      	bx	lr

08006244 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006244:	b480      	push	{r7}
 8006246:	b085      	sub	sp, #20
 8006248:	af00      	add	r7, sp, #0
 800624a:	6078      	str	r0, [r7, #4]
 800624c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	4a40      	ldr	r2, [pc, #256]	; (8006358 <TIM_Base_SetConfig+0x114>)
 8006258:	4293      	cmp	r3, r2
 800625a:	d013      	beq.n	8006284 <TIM_Base_SetConfig+0x40>
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006262:	d00f      	beq.n	8006284 <TIM_Base_SetConfig+0x40>
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	4a3d      	ldr	r2, [pc, #244]	; (800635c <TIM_Base_SetConfig+0x118>)
 8006268:	4293      	cmp	r3, r2
 800626a:	d00b      	beq.n	8006284 <TIM_Base_SetConfig+0x40>
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	4a3c      	ldr	r2, [pc, #240]	; (8006360 <TIM_Base_SetConfig+0x11c>)
 8006270:	4293      	cmp	r3, r2
 8006272:	d007      	beq.n	8006284 <TIM_Base_SetConfig+0x40>
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	4a3b      	ldr	r2, [pc, #236]	; (8006364 <TIM_Base_SetConfig+0x120>)
 8006278:	4293      	cmp	r3, r2
 800627a:	d003      	beq.n	8006284 <TIM_Base_SetConfig+0x40>
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	4a3a      	ldr	r2, [pc, #232]	; (8006368 <TIM_Base_SetConfig+0x124>)
 8006280:	4293      	cmp	r3, r2
 8006282:	d108      	bne.n	8006296 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800628a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800628c:	683b      	ldr	r3, [r7, #0]
 800628e:	685b      	ldr	r3, [r3, #4]
 8006290:	68fa      	ldr	r2, [r7, #12]
 8006292:	4313      	orrs	r3, r2
 8006294:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	4a2f      	ldr	r2, [pc, #188]	; (8006358 <TIM_Base_SetConfig+0x114>)
 800629a:	4293      	cmp	r3, r2
 800629c:	d02b      	beq.n	80062f6 <TIM_Base_SetConfig+0xb2>
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062a4:	d027      	beq.n	80062f6 <TIM_Base_SetConfig+0xb2>
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	4a2c      	ldr	r2, [pc, #176]	; (800635c <TIM_Base_SetConfig+0x118>)
 80062aa:	4293      	cmp	r3, r2
 80062ac:	d023      	beq.n	80062f6 <TIM_Base_SetConfig+0xb2>
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	4a2b      	ldr	r2, [pc, #172]	; (8006360 <TIM_Base_SetConfig+0x11c>)
 80062b2:	4293      	cmp	r3, r2
 80062b4:	d01f      	beq.n	80062f6 <TIM_Base_SetConfig+0xb2>
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	4a2a      	ldr	r2, [pc, #168]	; (8006364 <TIM_Base_SetConfig+0x120>)
 80062ba:	4293      	cmp	r3, r2
 80062bc:	d01b      	beq.n	80062f6 <TIM_Base_SetConfig+0xb2>
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	4a29      	ldr	r2, [pc, #164]	; (8006368 <TIM_Base_SetConfig+0x124>)
 80062c2:	4293      	cmp	r3, r2
 80062c4:	d017      	beq.n	80062f6 <TIM_Base_SetConfig+0xb2>
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	4a28      	ldr	r2, [pc, #160]	; (800636c <TIM_Base_SetConfig+0x128>)
 80062ca:	4293      	cmp	r3, r2
 80062cc:	d013      	beq.n	80062f6 <TIM_Base_SetConfig+0xb2>
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	4a27      	ldr	r2, [pc, #156]	; (8006370 <TIM_Base_SetConfig+0x12c>)
 80062d2:	4293      	cmp	r3, r2
 80062d4:	d00f      	beq.n	80062f6 <TIM_Base_SetConfig+0xb2>
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	4a26      	ldr	r2, [pc, #152]	; (8006374 <TIM_Base_SetConfig+0x130>)
 80062da:	4293      	cmp	r3, r2
 80062dc:	d00b      	beq.n	80062f6 <TIM_Base_SetConfig+0xb2>
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	4a25      	ldr	r2, [pc, #148]	; (8006378 <TIM_Base_SetConfig+0x134>)
 80062e2:	4293      	cmp	r3, r2
 80062e4:	d007      	beq.n	80062f6 <TIM_Base_SetConfig+0xb2>
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	4a24      	ldr	r2, [pc, #144]	; (800637c <TIM_Base_SetConfig+0x138>)
 80062ea:	4293      	cmp	r3, r2
 80062ec:	d003      	beq.n	80062f6 <TIM_Base_SetConfig+0xb2>
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	4a23      	ldr	r2, [pc, #140]	; (8006380 <TIM_Base_SetConfig+0x13c>)
 80062f2:	4293      	cmp	r3, r2
 80062f4:	d108      	bne.n	8006308 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80062fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80062fe:	683b      	ldr	r3, [r7, #0]
 8006300:	68db      	ldr	r3, [r3, #12]
 8006302:	68fa      	ldr	r2, [r7, #12]
 8006304:	4313      	orrs	r3, r2
 8006306:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800630e:	683b      	ldr	r3, [r7, #0]
 8006310:	695b      	ldr	r3, [r3, #20]
 8006312:	4313      	orrs	r3, r2
 8006314:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	68fa      	ldr	r2, [r7, #12]
 800631a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800631c:	683b      	ldr	r3, [r7, #0]
 800631e:	689a      	ldr	r2, [r3, #8]
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006324:	683b      	ldr	r3, [r7, #0]
 8006326:	681a      	ldr	r2, [r3, #0]
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	4a0a      	ldr	r2, [pc, #40]	; (8006358 <TIM_Base_SetConfig+0x114>)
 8006330:	4293      	cmp	r3, r2
 8006332:	d003      	beq.n	800633c <TIM_Base_SetConfig+0xf8>
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	4a0c      	ldr	r2, [pc, #48]	; (8006368 <TIM_Base_SetConfig+0x124>)
 8006338:	4293      	cmp	r3, r2
 800633a:	d103      	bne.n	8006344 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800633c:	683b      	ldr	r3, [r7, #0]
 800633e:	691a      	ldr	r2, [r3, #16]
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	2201      	movs	r2, #1
 8006348:	615a      	str	r2, [r3, #20]
}
 800634a:	bf00      	nop
 800634c:	3714      	adds	r7, #20
 800634e:	46bd      	mov	sp, r7
 8006350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006354:	4770      	bx	lr
 8006356:	bf00      	nop
 8006358:	40010000 	.word	0x40010000
 800635c:	40000400 	.word	0x40000400
 8006360:	40000800 	.word	0x40000800
 8006364:	40000c00 	.word	0x40000c00
 8006368:	40010400 	.word	0x40010400
 800636c:	40014000 	.word	0x40014000
 8006370:	40014400 	.word	0x40014400
 8006374:	40014800 	.word	0x40014800
 8006378:	40001800 	.word	0x40001800
 800637c:	40001c00 	.word	0x40001c00
 8006380:	40002000 	.word	0x40002000

08006384 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006384:	b480      	push	{r7}
 8006386:	b087      	sub	sp, #28
 8006388:	af00      	add	r7, sp, #0
 800638a:	60f8      	str	r0, [r7, #12]
 800638c:	60b9      	str	r1, [r7, #8]
 800638e:	607a      	str	r2, [r7, #4]
 8006390:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	6a1b      	ldr	r3, [r3, #32]
 8006396:	f023 0201 	bic.w	r2, r3, #1
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	699b      	ldr	r3, [r3, #24]
 80063a2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	6a1b      	ldr	r3, [r3, #32]
 80063a8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	4a28      	ldr	r2, [pc, #160]	; (8006450 <TIM_TI1_SetConfig+0xcc>)
 80063ae:	4293      	cmp	r3, r2
 80063b0:	d01b      	beq.n	80063ea <TIM_TI1_SetConfig+0x66>
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063b8:	d017      	beq.n	80063ea <TIM_TI1_SetConfig+0x66>
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	4a25      	ldr	r2, [pc, #148]	; (8006454 <TIM_TI1_SetConfig+0xd0>)
 80063be:	4293      	cmp	r3, r2
 80063c0:	d013      	beq.n	80063ea <TIM_TI1_SetConfig+0x66>
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	4a24      	ldr	r2, [pc, #144]	; (8006458 <TIM_TI1_SetConfig+0xd4>)
 80063c6:	4293      	cmp	r3, r2
 80063c8:	d00f      	beq.n	80063ea <TIM_TI1_SetConfig+0x66>
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	4a23      	ldr	r2, [pc, #140]	; (800645c <TIM_TI1_SetConfig+0xd8>)
 80063ce:	4293      	cmp	r3, r2
 80063d0:	d00b      	beq.n	80063ea <TIM_TI1_SetConfig+0x66>
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	4a22      	ldr	r2, [pc, #136]	; (8006460 <TIM_TI1_SetConfig+0xdc>)
 80063d6:	4293      	cmp	r3, r2
 80063d8:	d007      	beq.n	80063ea <TIM_TI1_SetConfig+0x66>
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	4a21      	ldr	r2, [pc, #132]	; (8006464 <TIM_TI1_SetConfig+0xe0>)
 80063de:	4293      	cmp	r3, r2
 80063e0:	d003      	beq.n	80063ea <TIM_TI1_SetConfig+0x66>
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	4a20      	ldr	r2, [pc, #128]	; (8006468 <TIM_TI1_SetConfig+0xe4>)
 80063e6:	4293      	cmp	r3, r2
 80063e8:	d101      	bne.n	80063ee <TIM_TI1_SetConfig+0x6a>
 80063ea:	2301      	movs	r3, #1
 80063ec:	e000      	b.n	80063f0 <TIM_TI1_SetConfig+0x6c>
 80063ee:	2300      	movs	r3, #0
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d008      	beq.n	8006406 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80063f4:	697b      	ldr	r3, [r7, #20]
 80063f6:	f023 0303 	bic.w	r3, r3, #3
 80063fa:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80063fc:	697a      	ldr	r2, [r7, #20]
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	4313      	orrs	r3, r2
 8006402:	617b      	str	r3, [r7, #20]
 8006404:	e003      	b.n	800640e <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006406:	697b      	ldr	r3, [r7, #20]
 8006408:	f043 0301 	orr.w	r3, r3, #1
 800640c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800640e:	697b      	ldr	r3, [r7, #20]
 8006410:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006414:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006416:	683b      	ldr	r3, [r7, #0]
 8006418:	011b      	lsls	r3, r3, #4
 800641a:	b2db      	uxtb	r3, r3
 800641c:	697a      	ldr	r2, [r7, #20]
 800641e:	4313      	orrs	r3, r2
 8006420:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006422:	693b      	ldr	r3, [r7, #16]
 8006424:	f023 030a 	bic.w	r3, r3, #10
 8006428:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800642a:	68bb      	ldr	r3, [r7, #8]
 800642c:	f003 030a 	and.w	r3, r3, #10
 8006430:	693a      	ldr	r2, [r7, #16]
 8006432:	4313      	orrs	r3, r2
 8006434:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	697a      	ldr	r2, [r7, #20]
 800643a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	693a      	ldr	r2, [r7, #16]
 8006440:	621a      	str	r2, [r3, #32]
}
 8006442:	bf00      	nop
 8006444:	371c      	adds	r7, #28
 8006446:	46bd      	mov	sp, r7
 8006448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644c:	4770      	bx	lr
 800644e:	bf00      	nop
 8006450:	40010000 	.word	0x40010000
 8006454:	40000400 	.word	0x40000400
 8006458:	40000800 	.word	0x40000800
 800645c:	40000c00 	.word	0x40000c00
 8006460:	40010400 	.word	0x40010400
 8006464:	40014000 	.word	0x40014000
 8006468:	40001800 	.word	0x40001800

0800646c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800646c:	b480      	push	{r7}
 800646e:	b087      	sub	sp, #28
 8006470:	af00      	add	r7, sp, #0
 8006472:	60f8      	str	r0, [r7, #12]
 8006474:	60b9      	str	r1, [r7, #8]
 8006476:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	6a1b      	ldr	r3, [r3, #32]
 800647c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	6a1b      	ldr	r3, [r3, #32]
 8006482:	f023 0201 	bic.w	r2, r3, #1
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	699b      	ldr	r3, [r3, #24]
 800648e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006490:	693b      	ldr	r3, [r7, #16]
 8006492:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006496:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	011b      	lsls	r3, r3, #4
 800649c:	693a      	ldr	r2, [r7, #16]
 800649e:	4313      	orrs	r3, r2
 80064a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80064a2:	697b      	ldr	r3, [r7, #20]
 80064a4:	f023 030a 	bic.w	r3, r3, #10
 80064a8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80064aa:	697a      	ldr	r2, [r7, #20]
 80064ac:	68bb      	ldr	r3, [r7, #8]
 80064ae:	4313      	orrs	r3, r2
 80064b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	693a      	ldr	r2, [r7, #16]
 80064b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	697a      	ldr	r2, [r7, #20]
 80064bc:	621a      	str	r2, [r3, #32]
}
 80064be:	bf00      	nop
 80064c0:	371c      	adds	r7, #28
 80064c2:	46bd      	mov	sp, r7
 80064c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c8:	4770      	bx	lr

080064ca <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80064ca:	b480      	push	{r7}
 80064cc:	b087      	sub	sp, #28
 80064ce:	af00      	add	r7, sp, #0
 80064d0:	60f8      	str	r0, [r7, #12]
 80064d2:	60b9      	str	r1, [r7, #8]
 80064d4:	607a      	str	r2, [r7, #4]
 80064d6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	6a1b      	ldr	r3, [r3, #32]
 80064dc:	f023 0210 	bic.w	r2, r3, #16
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	699b      	ldr	r3, [r3, #24]
 80064e8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	6a1b      	ldr	r3, [r3, #32]
 80064ee:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80064f0:	697b      	ldr	r3, [r7, #20]
 80064f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80064f6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	021b      	lsls	r3, r3, #8
 80064fc:	697a      	ldr	r2, [r7, #20]
 80064fe:	4313      	orrs	r3, r2
 8006500:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006502:	697b      	ldr	r3, [r7, #20]
 8006504:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006508:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800650a:	683b      	ldr	r3, [r7, #0]
 800650c:	031b      	lsls	r3, r3, #12
 800650e:	b29b      	uxth	r3, r3
 8006510:	697a      	ldr	r2, [r7, #20]
 8006512:	4313      	orrs	r3, r2
 8006514:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006516:	693b      	ldr	r3, [r7, #16]
 8006518:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800651c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800651e:	68bb      	ldr	r3, [r7, #8]
 8006520:	011b      	lsls	r3, r3, #4
 8006522:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8006526:	693a      	ldr	r2, [r7, #16]
 8006528:	4313      	orrs	r3, r2
 800652a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	697a      	ldr	r2, [r7, #20]
 8006530:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	693a      	ldr	r2, [r7, #16]
 8006536:	621a      	str	r2, [r3, #32]
}
 8006538:	bf00      	nop
 800653a:	371c      	adds	r7, #28
 800653c:	46bd      	mov	sp, r7
 800653e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006542:	4770      	bx	lr

08006544 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006544:	b480      	push	{r7}
 8006546:	b087      	sub	sp, #28
 8006548:	af00      	add	r7, sp, #0
 800654a:	60f8      	str	r0, [r7, #12]
 800654c:	60b9      	str	r1, [r7, #8]
 800654e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	6a1b      	ldr	r3, [r3, #32]
 8006554:	f023 0210 	bic.w	r2, r3, #16
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	699b      	ldr	r3, [r3, #24]
 8006560:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	6a1b      	ldr	r3, [r3, #32]
 8006566:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006568:	697b      	ldr	r3, [r7, #20]
 800656a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800656e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	031b      	lsls	r3, r3, #12
 8006574:	697a      	ldr	r2, [r7, #20]
 8006576:	4313      	orrs	r3, r2
 8006578:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800657a:	693b      	ldr	r3, [r7, #16]
 800657c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006580:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006582:	68bb      	ldr	r3, [r7, #8]
 8006584:	011b      	lsls	r3, r3, #4
 8006586:	693a      	ldr	r2, [r7, #16]
 8006588:	4313      	orrs	r3, r2
 800658a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	697a      	ldr	r2, [r7, #20]
 8006590:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	693a      	ldr	r2, [r7, #16]
 8006596:	621a      	str	r2, [r3, #32]
}
 8006598:	bf00      	nop
 800659a:	371c      	adds	r7, #28
 800659c:	46bd      	mov	sp, r7
 800659e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a2:	4770      	bx	lr

080065a4 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80065a4:	b480      	push	{r7}
 80065a6:	b087      	sub	sp, #28
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	60f8      	str	r0, [r7, #12]
 80065ac:	60b9      	str	r1, [r7, #8]
 80065ae:	607a      	str	r2, [r7, #4]
 80065b0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	6a1b      	ldr	r3, [r3, #32]
 80065b6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	69db      	ldr	r3, [r3, #28]
 80065c2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	6a1b      	ldr	r3, [r3, #32]
 80065c8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80065ca:	697b      	ldr	r3, [r7, #20]
 80065cc:	f023 0303 	bic.w	r3, r3, #3
 80065d0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80065d2:	697a      	ldr	r2, [r7, #20]
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	4313      	orrs	r3, r2
 80065d8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80065da:	697b      	ldr	r3, [r7, #20]
 80065dc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80065e0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80065e2:	683b      	ldr	r3, [r7, #0]
 80065e4:	011b      	lsls	r3, r3, #4
 80065e6:	b2db      	uxtb	r3, r3
 80065e8:	697a      	ldr	r2, [r7, #20]
 80065ea:	4313      	orrs	r3, r2
 80065ec:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80065ee:	693b      	ldr	r3, [r7, #16]
 80065f0:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80065f4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80065f6:	68bb      	ldr	r3, [r7, #8]
 80065f8:	021b      	lsls	r3, r3, #8
 80065fa:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80065fe:	693a      	ldr	r2, [r7, #16]
 8006600:	4313      	orrs	r3, r2
 8006602:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	697a      	ldr	r2, [r7, #20]
 8006608:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	693a      	ldr	r2, [r7, #16]
 800660e:	621a      	str	r2, [r3, #32]
}
 8006610:	bf00      	nop
 8006612:	371c      	adds	r7, #28
 8006614:	46bd      	mov	sp, r7
 8006616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661a:	4770      	bx	lr

0800661c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800661c:	b480      	push	{r7}
 800661e:	b087      	sub	sp, #28
 8006620:	af00      	add	r7, sp, #0
 8006622:	60f8      	str	r0, [r7, #12]
 8006624:	60b9      	str	r1, [r7, #8]
 8006626:	607a      	str	r2, [r7, #4]
 8006628:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	6a1b      	ldr	r3, [r3, #32]
 800662e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	69db      	ldr	r3, [r3, #28]
 800663a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	6a1b      	ldr	r3, [r3, #32]
 8006640:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8006642:	697b      	ldr	r3, [r7, #20]
 8006644:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006648:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	021b      	lsls	r3, r3, #8
 800664e:	697a      	ldr	r2, [r7, #20]
 8006650:	4313      	orrs	r3, r2
 8006652:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006654:	697b      	ldr	r3, [r7, #20]
 8006656:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800665a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800665c:	683b      	ldr	r3, [r7, #0]
 800665e:	031b      	lsls	r3, r3, #12
 8006660:	b29b      	uxth	r3, r3
 8006662:	697a      	ldr	r2, [r7, #20]
 8006664:	4313      	orrs	r3, r2
 8006666:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006668:	693b      	ldr	r3, [r7, #16]
 800666a:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800666e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8006670:	68bb      	ldr	r3, [r7, #8]
 8006672:	031b      	lsls	r3, r3, #12
 8006674:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8006678:	693a      	ldr	r2, [r7, #16]
 800667a:	4313      	orrs	r3, r2
 800667c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	697a      	ldr	r2, [r7, #20]
 8006682:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	693a      	ldr	r2, [r7, #16]
 8006688:	621a      	str	r2, [r3, #32]
}
 800668a:	bf00      	nop
 800668c:	371c      	adds	r7, #28
 800668e:	46bd      	mov	sp, r7
 8006690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006694:	4770      	bx	lr

08006696 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006696:	b480      	push	{r7}
 8006698:	b085      	sub	sp, #20
 800669a:	af00      	add	r7, sp, #0
 800669c:	6078      	str	r0, [r7, #4]
 800669e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	689b      	ldr	r3, [r3, #8]
 80066a4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066ac:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80066ae:	683a      	ldr	r2, [r7, #0]
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	4313      	orrs	r3, r2
 80066b4:	f043 0307 	orr.w	r3, r3, #7
 80066b8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	68fa      	ldr	r2, [r7, #12]
 80066be:	609a      	str	r2, [r3, #8]
}
 80066c0:	bf00      	nop
 80066c2:	3714      	adds	r7, #20
 80066c4:	46bd      	mov	sp, r7
 80066c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ca:	4770      	bx	lr

080066cc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80066cc:	b480      	push	{r7}
 80066ce:	b087      	sub	sp, #28
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	60f8      	str	r0, [r7, #12]
 80066d4:	60b9      	str	r1, [r7, #8]
 80066d6:	607a      	str	r2, [r7, #4]
 80066d8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	689b      	ldr	r3, [r3, #8]
 80066de:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80066e0:	697b      	ldr	r3, [r7, #20]
 80066e2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80066e6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80066e8:	683b      	ldr	r3, [r7, #0]
 80066ea:	021a      	lsls	r2, r3, #8
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	431a      	orrs	r2, r3
 80066f0:	68bb      	ldr	r3, [r7, #8]
 80066f2:	4313      	orrs	r3, r2
 80066f4:	697a      	ldr	r2, [r7, #20]
 80066f6:	4313      	orrs	r3, r2
 80066f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	697a      	ldr	r2, [r7, #20]
 80066fe:	609a      	str	r2, [r3, #8]
}
 8006700:	bf00      	nop
 8006702:	371c      	adds	r7, #28
 8006704:	46bd      	mov	sp, r7
 8006706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670a:	4770      	bx	lr

0800670c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800670c:	b480      	push	{r7}
 800670e:	b087      	sub	sp, #28
 8006710:	af00      	add	r7, sp, #0
 8006712:	60f8      	str	r0, [r7, #12]
 8006714:	60b9      	str	r1, [r7, #8]
 8006716:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006718:	68bb      	ldr	r3, [r7, #8]
 800671a:	f003 031f 	and.w	r3, r3, #31
 800671e:	2201      	movs	r2, #1
 8006720:	fa02 f303 	lsl.w	r3, r2, r3
 8006724:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	6a1a      	ldr	r2, [r3, #32]
 800672a:	697b      	ldr	r3, [r7, #20]
 800672c:	43db      	mvns	r3, r3
 800672e:	401a      	ands	r2, r3
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	6a1a      	ldr	r2, [r3, #32]
 8006738:	68bb      	ldr	r3, [r7, #8]
 800673a:	f003 031f 	and.w	r3, r3, #31
 800673e:	6879      	ldr	r1, [r7, #4]
 8006740:	fa01 f303 	lsl.w	r3, r1, r3
 8006744:	431a      	orrs	r2, r3
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	621a      	str	r2, [r3, #32]
}
 800674a:	bf00      	nop
 800674c:	371c      	adds	r7, #28
 800674e:	46bd      	mov	sp, r7
 8006750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006754:	4770      	bx	lr
	...

08006758 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006758:	b480      	push	{r7}
 800675a:	b085      	sub	sp, #20
 800675c:	af00      	add	r7, sp, #0
 800675e:	6078      	str	r0, [r7, #4]
 8006760:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006768:	2b01      	cmp	r3, #1
 800676a:	d101      	bne.n	8006770 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800676c:	2302      	movs	r3, #2
 800676e:	e05a      	b.n	8006826 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2201      	movs	r2, #1
 8006774:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2202      	movs	r2, #2
 800677c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	685b      	ldr	r3, [r3, #4]
 8006786:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	689b      	ldr	r3, [r3, #8]
 800678e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006796:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006798:	683b      	ldr	r3, [r7, #0]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	68fa      	ldr	r2, [r7, #12]
 800679e:	4313      	orrs	r3, r2
 80067a0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	68fa      	ldr	r2, [r7, #12]
 80067a8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	4a21      	ldr	r2, [pc, #132]	; (8006834 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80067b0:	4293      	cmp	r3, r2
 80067b2:	d022      	beq.n	80067fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067bc:	d01d      	beq.n	80067fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	4a1d      	ldr	r2, [pc, #116]	; (8006838 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80067c4:	4293      	cmp	r3, r2
 80067c6:	d018      	beq.n	80067fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	4a1b      	ldr	r2, [pc, #108]	; (800683c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80067ce:	4293      	cmp	r3, r2
 80067d0:	d013      	beq.n	80067fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	4a1a      	ldr	r2, [pc, #104]	; (8006840 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80067d8:	4293      	cmp	r3, r2
 80067da:	d00e      	beq.n	80067fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	4a18      	ldr	r2, [pc, #96]	; (8006844 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80067e2:	4293      	cmp	r3, r2
 80067e4:	d009      	beq.n	80067fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	4a17      	ldr	r2, [pc, #92]	; (8006848 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80067ec:	4293      	cmp	r3, r2
 80067ee:	d004      	beq.n	80067fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	4a15      	ldr	r2, [pc, #84]	; (800684c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80067f6:	4293      	cmp	r3, r2
 80067f8:	d10c      	bne.n	8006814 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80067fa:	68bb      	ldr	r3, [r7, #8]
 80067fc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006800:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006802:	683b      	ldr	r3, [r7, #0]
 8006804:	685b      	ldr	r3, [r3, #4]
 8006806:	68ba      	ldr	r2, [r7, #8]
 8006808:	4313      	orrs	r3, r2
 800680a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	68ba      	ldr	r2, [r7, #8]
 8006812:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	2201      	movs	r2, #1
 8006818:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2200      	movs	r2, #0
 8006820:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006824:	2300      	movs	r3, #0
}
 8006826:	4618      	mov	r0, r3
 8006828:	3714      	adds	r7, #20
 800682a:	46bd      	mov	sp, r7
 800682c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006830:	4770      	bx	lr
 8006832:	bf00      	nop
 8006834:	40010000 	.word	0x40010000
 8006838:	40000400 	.word	0x40000400
 800683c:	40000800 	.word	0x40000800
 8006840:	40000c00 	.word	0x40000c00
 8006844:	40010400 	.word	0x40010400
 8006848:	40014000 	.word	0x40014000
 800684c:	40001800 	.word	0x40001800

08006850 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006850:	b480      	push	{r7}
 8006852:	b083      	sub	sp, #12
 8006854:	af00      	add	r7, sp, #0
 8006856:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006858:	bf00      	nop
 800685a:	370c      	adds	r7, #12
 800685c:	46bd      	mov	sp, r7
 800685e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006862:	4770      	bx	lr

08006864 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006864:	b480      	push	{r7}
 8006866:	b083      	sub	sp, #12
 8006868:	af00      	add	r7, sp, #0
 800686a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800686c:	bf00      	nop
 800686e:	370c      	adds	r7, #12
 8006870:	46bd      	mov	sp, r7
 8006872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006876:	4770      	bx	lr

08006878 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006878:	b580      	push	{r7, lr}
 800687a:	b082      	sub	sp, #8
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	2b00      	cmp	r3, #0
 8006884:	d101      	bne.n	800688a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006886:	2301      	movs	r3, #1
 8006888:	e03f      	b.n	800690a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006890:	b2db      	uxtb	r3, r3
 8006892:	2b00      	cmp	r3, #0
 8006894:	d106      	bne.n	80068a4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	2200      	movs	r2, #0
 800689a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800689e:	6878      	ldr	r0, [r7, #4]
 80068a0:	f7fb fa44 	bl	8001d2c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	2224      	movs	r2, #36	; 0x24
 80068a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	68da      	ldr	r2, [r3, #12]
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80068ba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80068bc:	6878      	ldr	r0, [r7, #4]
 80068be:	f000 f929 	bl	8006b14 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	691a      	ldr	r2, [r3, #16]
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80068d0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	695a      	ldr	r2, [r3, #20]
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80068e0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	68da      	ldr	r2, [r3, #12]
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80068f0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	2200      	movs	r2, #0
 80068f6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2220      	movs	r2, #32
 80068fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	2220      	movs	r2, #32
 8006904:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006908:	2300      	movs	r3, #0
}
 800690a:	4618      	mov	r0, r3
 800690c:	3708      	adds	r7, #8
 800690e:	46bd      	mov	sp, r7
 8006910:	bd80      	pop	{r7, pc}

08006912 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006912:	b580      	push	{r7, lr}
 8006914:	b08a      	sub	sp, #40	; 0x28
 8006916:	af02      	add	r7, sp, #8
 8006918:	60f8      	str	r0, [r7, #12]
 800691a:	60b9      	str	r1, [r7, #8]
 800691c:	603b      	str	r3, [r7, #0]
 800691e:	4613      	mov	r3, r2
 8006920:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006922:	2300      	movs	r3, #0
 8006924:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800692c:	b2db      	uxtb	r3, r3
 800692e:	2b20      	cmp	r3, #32
 8006930:	d17c      	bne.n	8006a2c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006932:	68bb      	ldr	r3, [r7, #8]
 8006934:	2b00      	cmp	r3, #0
 8006936:	d002      	beq.n	800693e <HAL_UART_Transmit+0x2c>
 8006938:	88fb      	ldrh	r3, [r7, #6]
 800693a:	2b00      	cmp	r3, #0
 800693c:	d101      	bne.n	8006942 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800693e:	2301      	movs	r3, #1
 8006940:	e075      	b.n	8006a2e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006948:	2b01      	cmp	r3, #1
 800694a:	d101      	bne.n	8006950 <HAL_UART_Transmit+0x3e>
 800694c:	2302      	movs	r3, #2
 800694e:	e06e      	b.n	8006a2e <HAL_UART_Transmit+0x11c>
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	2201      	movs	r2, #1
 8006954:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	2200      	movs	r2, #0
 800695c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	2221      	movs	r2, #33	; 0x21
 8006962:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006966:	f7fb fbc7 	bl	80020f8 <HAL_GetTick>
 800696a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	88fa      	ldrh	r2, [r7, #6]
 8006970:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	88fa      	ldrh	r2, [r7, #6]
 8006976:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	689b      	ldr	r3, [r3, #8]
 800697c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006980:	d108      	bne.n	8006994 <HAL_UART_Transmit+0x82>
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	691b      	ldr	r3, [r3, #16]
 8006986:	2b00      	cmp	r3, #0
 8006988:	d104      	bne.n	8006994 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800698a:	2300      	movs	r3, #0
 800698c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800698e:	68bb      	ldr	r3, [r7, #8]
 8006990:	61bb      	str	r3, [r7, #24]
 8006992:	e003      	b.n	800699c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006994:	68bb      	ldr	r3, [r7, #8]
 8006996:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006998:	2300      	movs	r3, #0
 800699a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	2200      	movs	r2, #0
 80069a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80069a4:	e02a      	b.n	80069fc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80069a6:	683b      	ldr	r3, [r7, #0]
 80069a8:	9300      	str	r3, [sp, #0]
 80069aa:	697b      	ldr	r3, [r7, #20]
 80069ac:	2200      	movs	r2, #0
 80069ae:	2180      	movs	r1, #128	; 0x80
 80069b0:	68f8      	ldr	r0, [r7, #12]
 80069b2:	f000 f840 	bl	8006a36 <UART_WaitOnFlagUntilTimeout>
 80069b6:	4603      	mov	r3, r0
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d001      	beq.n	80069c0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80069bc:	2303      	movs	r3, #3
 80069be:	e036      	b.n	8006a2e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80069c0:	69fb      	ldr	r3, [r7, #28]
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d10b      	bne.n	80069de <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80069c6:	69bb      	ldr	r3, [r7, #24]
 80069c8:	881b      	ldrh	r3, [r3, #0]
 80069ca:	461a      	mov	r2, r3
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80069d4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80069d6:	69bb      	ldr	r3, [r7, #24]
 80069d8:	3302      	adds	r3, #2
 80069da:	61bb      	str	r3, [r7, #24]
 80069dc:	e007      	b.n	80069ee <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80069de:	69fb      	ldr	r3, [r7, #28]
 80069e0:	781a      	ldrb	r2, [r3, #0]
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80069e8:	69fb      	ldr	r3, [r7, #28]
 80069ea:	3301      	adds	r3, #1
 80069ec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80069f2:	b29b      	uxth	r3, r3
 80069f4:	3b01      	subs	r3, #1
 80069f6:	b29a      	uxth	r2, r3
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006a00:	b29b      	uxth	r3, r3
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d1cf      	bne.n	80069a6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006a06:	683b      	ldr	r3, [r7, #0]
 8006a08:	9300      	str	r3, [sp, #0]
 8006a0a:	697b      	ldr	r3, [r7, #20]
 8006a0c:	2200      	movs	r2, #0
 8006a0e:	2140      	movs	r1, #64	; 0x40
 8006a10:	68f8      	ldr	r0, [r7, #12]
 8006a12:	f000 f810 	bl	8006a36 <UART_WaitOnFlagUntilTimeout>
 8006a16:	4603      	mov	r3, r0
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d001      	beq.n	8006a20 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006a1c:	2303      	movs	r3, #3
 8006a1e:	e006      	b.n	8006a2e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	2220      	movs	r2, #32
 8006a24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006a28:	2300      	movs	r3, #0
 8006a2a:	e000      	b.n	8006a2e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006a2c:	2302      	movs	r3, #2
  }
}
 8006a2e:	4618      	mov	r0, r3
 8006a30:	3720      	adds	r7, #32
 8006a32:	46bd      	mov	sp, r7
 8006a34:	bd80      	pop	{r7, pc}

08006a36 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006a36:	b580      	push	{r7, lr}
 8006a38:	b090      	sub	sp, #64	; 0x40
 8006a3a:	af00      	add	r7, sp, #0
 8006a3c:	60f8      	str	r0, [r7, #12]
 8006a3e:	60b9      	str	r1, [r7, #8]
 8006a40:	603b      	str	r3, [r7, #0]
 8006a42:	4613      	mov	r3, r2
 8006a44:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a46:	e050      	b.n	8006aea <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006a48:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006a4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a4e:	d04c      	beq.n	8006aea <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006a50:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d007      	beq.n	8006a66 <UART_WaitOnFlagUntilTimeout+0x30>
 8006a56:	f7fb fb4f 	bl	80020f8 <HAL_GetTick>
 8006a5a:	4602      	mov	r2, r0
 8006a5c:	683b      	ldr	r3, [r7, #0]
 8006a5e:	1ad3      	subs	r3, r2, r3
 8006a60:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006a62:	429a      	cmp	r2, r3
 8006a64:	d241      	bcs.n	8006aea <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	330c      	adds	r3, #12
 8006a6c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a70:	e853 3f00 	ldrex	r3, [r3]
 8006a74:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a78:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006a7c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	330c      	adds	r3, #12
 8006a84:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006a86:	637a      	str	r2, [r7, #52]	; 0x34
 8006a88:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a8a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006a8c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006a8e:	e841 2300 	strex	r3, r2, [r1]
 8006a92:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006a94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d1e5      	bne.n	8006a66 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	3314      	adds	r3, #20
 8006aa0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006aa2:	697b      	ldr	r3, [r7, #20]
 8006aa4:	e853 3f00 	ldrex	r3, [r3]
 8006aa8:	613b      	str	r3, [r7, #16]
   return(result);
 8006aaa:	693b      	ldr	r3, [r7, #16]
 8006aac:	f023 0301 	bic.w	r3, r3, #1
 8006ab0:	63bb      	str	r3, [r7, #56]	; 0x38
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	3314      	adds	r3, #20
 8006ab8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006aba:	623a      	str	r2, [r7, #32]
 8006abc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006abe:	69f9      	ldr	r1, [r7, #28]
 8006ac0:	6a3a      	ldr	r2, [r7, #32]
 8006ac2:	e841 2300 	strex	r3, r2, [r1]
 8006ac6:	61bb      	str	r3, [r7, #24]
   return(result);
 8006ac8:	69bb      	ldr	r3, [r7, #24]
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d1e5      	bne.n	8006a9a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	2220      	movs	r2, #32
 8006ad2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	2220      	movs	r2, #32
 8006ada:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	2200      	movs	r2, #0
 8006ae2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006ae6:	2303      	movs	r3, #3
 8006ae8:	e00f      	b.n	8006b0a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	681a      	ldr	r2, [r3, #0]
 8006af0:	68bb      	ldr	r3, [r7, #8]
 8006af2:	4013      	ands	r3, r2
 8006af4:	68ba      	ldr	r2, [r7, #8]
 8006af6:	429a      	cmp	r2, r3
 8006af8:	bf0c      	ite	eq
 8006afa:	2301      	moveq	r3, #1
 8006afc:	2300      	movne	r3, #0
 8006afe:	b2db      	uxtb	r3, r3
 8006b00:	461a      	mov	r2, r3
 8006b02:	79fb      	ldrb	r3, [r7, #7]
 8006b04:	429a      	cmp	r2, r3
 8006b06:	d09f      	beq.n	8006a48 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006b08:	2300      	movs	r3, #0
}
 8006b0a:	4618      	mov	r0, r3
 8006b0c:	3740      	adds	r7, #64	; 0x40
 8006b0e:	46bd      	mov	sp, r7
 8006b10:	bd80      	pop	{r7, pc}
	...

08006b14 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006b14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006b18:	b0c0      	sub	sp, #256	; 0x100
 8006b1a:	af00      	add	r7, sp, #0
 8006b1c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006b20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	691b      	ldr	r3, [r3, #16]
 8006b28:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006b2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b30:	68d9      	ldr	r1, [r3, #12]
 8006b32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b36:	681a      	ldr	r2, [r3, #0]
 8006b38:	ea40 0301 	orr.w	r3, r0, r1
 8006b3c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006b3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b42:	689a      	ldr	r2, [r3, #8]
 8006b44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b48:	691b      	ldr	r3, [r3, #16]
 8006b4a:	431a      	orrs	r2, r3
 8006b4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b50:	695b      	ldr	r3, [r3, #20]
 8006b52:	431a      	orrs	r2, r3
 8006b54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b58:	69db      	ldr	r3, [r3, #28]
 8006b5a:	4313      	orrs	r3, r2
 8006b5c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006b60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	68db      	ldr	r3, [r3, #12]
 8006b68:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006b6c:	f021 010c 	bic.w	r1, r1, #12
 8006b70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b74:	681a      	ldr	r2, [r3, #0]
 8006b76:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006b7a:	430b      	orrs	r3, r1
 8006b7c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006b7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	695b      	ldr	r3, [r3, #20]
 8006b86:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006b8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b8e:	6999      	ldr	r1, [r3, #24]
 8006b90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b94:	681a      	ldr	r2, [r3, #0]
 8006b96:	ea40 0301 	orr.w	r3, r0, r1
 8006b9a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006b9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ba0:	681a      	ldr	r2, [r3, #0]
 8006ba2:	4b8f      	ldr	r3, [pc, #572]	; (8006de0 <UART_SetConfig+0x2cc>)
 8006ba4:	429a      	cmp	r2, r3
 8006ba6:	d005      	beq.n	8006bb4 <UART_SetConfig+0xa0>
 8006ba8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006bac:	681a      	ldr	r2, [r3, #0]
 8006bae:	4b8d      	ldr	r3, [pc, #564]	; (8006de4 <UART_SetConfig+0x2d0>)
 8006bb0:	429a      	cmp	r2, r3
 8006bb2:	d104      	bne.n	8006bbe <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006bb4:	f7fe fa4c 	bl	8005050 <HAL_RCC_GetPCLK2Freq>
 8006bb8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006bbc:	e003      	b.n	8006bc6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006bbe:	f7fe fa33 	bl	8005028 <HAL_RCC_GetPCLK1Freq>
 8006bc2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006bc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006bca:	69db      	ldr	r3, [r3, #28]
 8006bcc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006bd0:	f040 810c 	bne.w	8006dec <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006bd4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006bd8:	2200      	movs	r2, #0
 8006bda:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006bde:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006be2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006be6:	4622      	mov	r2, r4
 8006be8:	462b      	mov	r3, r5
 8006bea:	1891      	adds	r1, r2, r2
 8006bec:	65b9      	str	r1, [r7, #88]	; 0x58
 8006bee:	415b      	adcs	r3, r3
 8006bf0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006bf2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006bf6:	4621      	mov	r1, r4
 8006bf8:	eb12 0801 	adds.w	r8, r2, r1
 8006bfc:	4629      	mov	r1, r5
 8006bfe:	eb43 0901 	adc.w	r9, r3, r1
 8006c02:	f04f 0200 	mov.w	r2, #0
 8006c06:	f04f 0300 	mov.w	r3, #0
 8006c0a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006c0e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006c12:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006c16:	4690      	mov	r8, r2
 8006c18:	4699      	mov	r9, r3
 8006c1a:	4623      	mov	r3, r4
 8006c1c:	eb18 0303 	adds.w	r3, r8, r3
 8006c20:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006c24:	462b      	mov	r3, r5
 8006c26:	eb49 0303 	adc.w	r3, r9, r3
 8006c2a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006c2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c32:	685b      	ldr	r3, [r3, #4]
 8006c34:	2200      	movs	r2, #0
 8006c36:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006c3a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006c3e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006c42:	460b      	mov	r3, r1
 8006c44:	18db      	adds	r3, r3, r3
 8006c46:	653b      	str	r3, [r7, #80]	; 0x50
 8006c48:	4613      	mov	r3, r2
 8006c4a:	eb42 0303 	adc.w	r3, r2, r3
 8006c4e:	657b      	str	r3, [r7, #84]	; 0x54
 8006c50:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006c54:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006c58:	f7f9 ffc6 	bl	8000be8 <__aeabi_uldivmod>
 8006c5c:	4602      	mov	r2, r0
 8006c5e:	460b      	mov	r3, r1
 8006c60:	4b61      	ldr	r3, [pc, #388]	; (8006de8 <UART_SetConfig+0x2d4>)
 8006c62:	fba3 2302 	umull	r2, r3, r3, r2
 8006c66:	095b      	lsrs	r3, r3, #5
 8006c68:	011c      	lsls	r4, r3, #4
 8006c6a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006c6e:	2200      	movs	r2, #0
 8006c70:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006c74:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006c78:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006c7c:	4642      	mov	r2, r8
 8006c7e:	464b      	mov	r3, r9
 8006c80:	1891      	adds	r1, r2, r2
 8006c82:	64b9      	str	r1, [r7, #72]	; 0x48
 8006c84:	415b      	adcs	r3, r3
 8006c86:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006c88:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006c8c:	4641      	mov	r1, r8
 8006c8e:	eb12 0a01 	adds.w	sl, r2, r1
 8006c92:	4649      	mov	r1, r9
 8006c94:	eb43 0b01 	adc.w	fp, r3, r1
 8006c98:	f04f 0200 	mov.w	r2, #0
 8006c9c:	f04f 0300 	mov.w	r3, #0
 8006ca0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006ca4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006ca8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006cac:	4692      	mov	sl, r2
 8006cae:	469b      	mov	fp, r3
 8006cb0:	4643      	mov	r3, r8
 8006cb2:	eb1a 0303 	adds.w	r3, sl, r3
 8006cb6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006cba:	464b      	mov	r3, r9
 8006cbc:	eb4b 0303 	adc.w	r3, fp, r3
 8006cc0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006cc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006cc8:	685b      	ldr	r3, [r3, #4]
 8006cca:	2200      	movs	r2, #0
 8006ccc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006cd0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006cd4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006cd8:	460b      	mov	r3, r1
 8006cda:	18db      	adds	r3, r3, r3
 8006cdc:	643b      	str	r3, [r7, #64]	; 0x40
 8006cde:	4613      	mov	r3, r2
 8006ce0:	eb42 0303 	adc.w	r3, r2, r3
 8006ce4:	647b      	str	r3, [r7, #68]	; 0x44
 8006ce6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006cea:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006cee:	f7f9 ff7b 	bl	8000be8 <__aeabi_uldivmod>
 8006cf2:	4602      	mov	r2, r0
 8006cf4:	460b      	mov	r3, r1
 8006cf6:	4611      	mov	r1, r2
 8006cf8:	4b3b      	ldr	r3, [pc, #236]	; (8006de8 <UART_SetConfig+0x2d4>)
 8006cfa:	fba3 2301 	umull	r2, r3, r3, r1
 8006cfe:	095b      	lsrs	r3, r3, #5
 8006d00:	2264      	movs	r2, #100	; 0x64
 8006d02:	fb02 f303 	mul.w	r3, r2, r3
 8006d06:	1acb      	subs	r3, r1, r3
 8006d08:	00db      	lsls	r3, r3, #3
 8006d0a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006d0e:	4b36      	ldr	r3, [pc, #216]	; (8006de8 <UART_SetConfig+0x2d4>)
 8006d10:	fba3 2302 	umull	r2, r3, r3, r2
 8006d14:	095b      	lsrs	r3, r3, #5
 8006d16:	005b      	lsls	r3, r3, #1
 8006d18:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006d1c:	441c      	add	r4, r3
 8006d1e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006d22:	2200      	movs	r2, #0
 8006d24:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006d28:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006d2c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006d30:	4642      	mov	r2, r8
 8006d32:	464b      	mov	r3, r9
 8006d34:	1891      	adds	r1, r2, r2
 8006d36:	63b9      	str	r1, [r7, #56]	; 0x38
 8006d38:	415b      	adcs	r3, r3
 8006d3a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006d3c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006d40:	4641      	mov	r1, r8
 8006d42:	1851      	adds	r1, r2, r1
 8006d44:	6339      	str	r1, [r7, #48]	; 0x30
 8006d46:	4649      	mov	r1, r9
 8006d48:	414b      	adcs	r3, r1
 8006d4a:	637b      	str	r3, [r7, #52]	; 0x34
 8006d4c:	f04f 0200 	mov.w	r2, #0
 8006d50:	f04f 0300 	mov.w	r3, #0
 8006d54:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006d58:	4659      	mov	r1, fp
 8006d5a:	00cb      	lsls	r3, r1, #3
 8006d5c:	4651      	mov	r1, sl
 8006d5e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006d62:	4651      	mov	r1, sl
 8006d64:	00ca      	lsls	r2, r1, #3
 8006d66:	4610      	mov	r0, r2
 8006d68:	4619      	mov	r1, r3
 8006d6a:	4603      	mov	r3, r0
 8006d6c:	4642      	mov	r2, r8
 8006d6e:	189b      	adds	r3, r3, r2
 8006d70:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006d74:	464b      	mov	r3, r9
 8006d76:	460a      	mov	r2, r1
 8006d78:	eb42 0303 	adc.w	r3, r2, r3
 8006d7c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006d80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d84:	685b      	ldr	r3, [r3, #4]
 8006d86:	2200      	movs	r2, #0
 8006d88:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006d8c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006d90:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006d94:	460b      	mov	r3, r1
 8006d96:	18db      	adds	r3, r3, r3
 8006d98:	62bb      	str	r3, [r7, #40]	; 0x28
 8006d9a:	4613      	mov	r3, r2
 8006d9c:	eb42 0303 	adc.w	r3, r2, r3
 8006da0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006da2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006da6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006daa:	f7f9 ff1d 	bl	8000be8 <__aeabi_uldivmod>
 8006dae:	4602      	mov	r2, r0
 8006db0:	460b      	mov	r3, r1
 8006db2:	4b0d      	ldr	r3, [pc, #52]	; (8006de8 <UART_SetConfig+0x2d4>)
 8006db4:	fba3 1302 	umull	r1, r3, r3, r2
 8006db8:	095b      	lsrs	r3, r3, #5
 8006dba:	2164      	movs	r1, #100	; 0x64
 8006dbc:	fb01 f303 	mul.w	r3, r1, r3
 8006dc0:	1ad3      	subs	r3, r2, r3
 8006dc2:	00db      	lsls	r3, r3, #3
 8006dc4:	3332      	adds	r3, #50	; 0x32
 8006dc6:	4a08      	ldr	r2, [pc, #32]	; (8006de8 <UART_SetConfig+0x2d4>)
 8006dc8:	fba2 2303 	umull	r2, r3, r2, r3
 8006dcc:	095b      	lsrs	r3, r3, #5
 8006dce:	f003 0207 	and.w	r2, r3, #7
 8006dd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	4422      	add	r2, r4
 8006dda:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006ddc:	e105      	b.n	8006fea <UART_SetConfig+0x4d6>
 8006dde:	bf00      	nop
 8006de0:	40011000 	.word	0x40011000
 8006de4:	40011400 	.word	0x40011400
 8006de8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006dec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006df0:	2200      	movs	r2, #0
 8006df2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006df6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006dfa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006dfe:	4642      	mov	r2, r8
 8006e00:	464b      	mov	r3, r9
 8006e02:	1891      	adds	r1, r2, r2
 8006e04:	6239      	str	r1, [r7, #32]
 8006e06:	415b      	adcs	r3, r3
 8006e08:	627b      	str	r3, [r7, #36]	; 0x24
 8006e0a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006e0e:	4641      	mov	r1, r8
 8006e10:	1854      	adds	r4, r2, r1
 8006e12:	4649      	mov	r1, r9
 8006e14:	eb43 0501 	adc.w	r5, r3, r1
 8006e18:	f04f 0200 	mov.w	r2, #0
 8006e1c:	f04f 0300 	mov.w	r3, #0
 8006e20:	00eb      	lsls	r3, r5, #3
 8006e22:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006e26:	00e2      	lsls	r2, r4, #3
 8006e28:	4614      	mov	r4, r2
 8006e2a:	461d      	mov	r5, r3
 8006e2c:	4643      	mov	r3, r8
 8006e2e:	18e3      	adds	r3, r4, r3
 8006e30:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006e34:	464b      	mov	r3, r9
 8006e36:	eb45 0303 	adc.w	r3, r5, r3
 8006e3a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006e3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e42:	685b      	ldr	r3, [r3, #4]
 8006e44:	2200      	movs	r2, #0
 8006e46:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006e4a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006e4e:	f04f 0200 	mov.w	r2, #0
 8006e52:	f04f 0300 	mov.w	r3, #0
 8006e56:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006e5a:	4629      	mov	r1, r5
 8006e5c:	008b      	lsls	r3, r1, #2
 8006e5e:	4621      	mov	r1, r4
 8006e60:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006e64:	4621      	mov	r1, r4
 8006e66:	008a      	lsls	r2, r1, #2
 8006e68:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006e6c:	f7f9 febc 	bl	8000be8 <__aeabi_uldivmod>
 8006e70:	4602      	mov	r2, r0
 8006e72:	460b      	mov	r3, r1
 8006e74:	4b60      	ldr	r3, [pc, #384]	; (8006ff8 <UART_SetConfig+0x4e4>)
 8006e76:	fba3 2302 	umull	r2, r3, r3, r2
 8006e7a:	095b      	lsrs	r3, r3, #5
 8006e7c:	011c      	lsls	r4, r3, #4
 8006e7e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006e82:	2200      	movs	r2, #0
 8006e84:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006e88:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006e8c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006e90:	4642      	mov	r2, r8
 8006e92:	464b      	mov	r3, r9
 8006e94:	1891      	adds	r1, r2, r2
 8006e96:	61b9      	str	r1, [r7, #24]
 8006e98:	415b      	adcs	r3, r3
 8006e9a:	61fb      	str	r3, [r7, #28]
 8006e9c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006ea0:	4641      	mov	r1, r8
 8006ea2:	1851      	adds	r1, r2, r1
 8006ea4:	6139      	str	r1, [r7, #16]
 8006ea6:	4649      	mov	r1, r9
 8006ea8:	414b      	adcs	r3, r1
 8006eaa:	617b      	str	r3, [r7, #20]
 8006eac:	f04f 0200 	mov.w	r2, #0
 8006eb0:	f04f 0300 	mov.w	r3, #0
 8006eb4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006eb8:	4659      	mov	r1, fp
 8006eba:	00cb      	lsls	r3, r1, #3
 8006ebc:	4651      	mov	r1, sl
 8006ebe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006ec2:	4651      	mov	r1, sl
 8006ec4:	00ca      	lsls	r2, r1, #3
 8006ec6:	4610      	mov	r0, r2
 8006ec8:	4619      	mov	r1, r3
 8006eca:	4603      	mov	r3, r0
 8006ecc:	4642      	mov	r2, r8
 8006ece:	189b      	adds	r3, r3, r2
 8006ed0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006ed4:	464b      	mov	r3, r9
 8006ed6:	460a      	mov	r2, r1
 8006ed8:	eb42 0303 	adc.w	r3, r2, r3
 8006edc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006ee0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ee4:	685b      	ldr	r3, [r3, #4]
 8006ee6:	2200      	movs	r2, #0
 8006ee8:	67bb      	str	r3, [r7, #120]	; 0x78
 8006eea:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006eec:	f04f 0200 	mov.w	r2, #0
 8006ef0:	f04f 0300 	mov.w	r3, #0
 8006ef4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006ef8:	4649      	mov	r1, r9
 8006efa:	008b      	lsls	r3, r1, #2
 8006efc:	4641      	mov	r1, r8
 8006efe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006f02:	4641      	mov	r1, r8
 8006f04:	008a      	lsls	r2, r1, #2
 8006f06:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006f0a:	f7f9 fe6d 	bl	8000be8 <__aeabi_uldivmod>
 8006f0e:	4602      	mov	r2, r0
 8006f10:	460b      	mov	r3, r1
 8006f12:	4b39      	ldr	r3, [pc, #228]	; (8006ff8 <UART_SetConfig+0x4e4>)
 8006f14:	fba3 1302 	umull	r1, r3, r3, r2
 8006f18:	095b      	lsrs	r3, r3, #5
 8006f1a:	2164      	movs	r1, #100	; 0x64
 8006f1c:	fb01 f303 	mul.w	r3, r1, r3
 8006f20:	1ad3      	subs	r3, r2, r3
 8006f22:	011b      	lsls	r3, r3, #4
 8006f24:	3332      	adds	r3, #50	; 0x32
 8006f26:	4a34      	ldr	r2, [pc, #208]	; (8006ff8 <UART_SetConfig+0x4e4>)
 8006f28:	fba2 2303 	umull	r2, r3, r2, r3
 8006f2c:	095b      	lsrs	r3, r3, #5
 8006f2e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006f32:	441c      	add	r4, r3
 8006f34:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006f38:	2200      	movs	r2, #0
 8006f3a:	673b      	str	r3, [r7, #112]	; 0x70
 8006f3c:	677a      	str	r2, [r7, #116]	; 0x74
 8006f3e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006f42:	4642      	mov	r2, r8
 8006f44:	464b      	mov	r3, r9
 8006f46:	1891      	adds	r1, r2, r2
 8006f48:	60b9      	str	r1, [r7, #8]
 8006f4a:	415b      	adcs	r3, r3
 8006f4c:	60fb      	str	r3, [r7, #12]
 8006f4e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006f52:	4641      	mov	r1, r8
 8006f54:	1851      	adds	r1, r2, r1
 8006f56:	6039      	str	r1, [r7, #0]
 8006f58:	4649      	mov	r1, r9
 8006f5a:	414b      	adcs	r3, r1
 8006f5c:	607b      	str	r3, [r7, #4]
 8006f5e:	f04f 0200 	mov.w	r2, #0
 8006f62:	f04f 0300 	mov.w	r3, #0
 8006f66:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006f6a:	4659      	mov	r1, fp
 8006f6c:	00cb      	lsls	r3, r1, #3
 8006f6e:	4651      	mov	r1, sl
 8006f70:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006f74:	4651      	mov	r1, sl
 8006f76:	00ca      	lsls	r2, r1, #3
 8006f78:	4610      	mov	r0, r2
 8006f7a:	4619      	mov	r1, r3
 8006f7c:	4603      	mov	r3, r0
 8006f7e:	4642      	mov	r2, r8
 8006f80:	189b      	adds	r3, r3, r2
 8006f82:	66bb      	str	r3, [r7, #104]	; 0x68
 8006f84:	464b      	mov	r3, r9
 8006f86:	460a      	mov	r2, r1
 8006f88:	eb42 0303 	adc.w	r3, r2, r3
 8006f8c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006f8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f92:	685b      	ldr	r3, [r3, #4]
 8006f94:	2200      	movs	r2, #0
 8006f96:	663b      	str	r3, [r7, #96]	; 0x60
 8006f98:	667a      	str	r2, [r7, #100]	; 0x64
 8006f9a:	f04f 0200 	mov.w	r2, #0
 8006f9e:	f04f 0300 	mov.w	r3, #0
 8006fa2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006fa6:	4649      	mov	r1, r9
 8006fa8:	008b      	lsls	r3, r1, #2
 8006faa:	4641      	mov	r1, r8
 8006fac:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006fb0:	4641      	mov	r1, r8
 8006fb2:	008a      	lsls	r2, r1, #2
 8006fb4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006fb8:	f7f9 fe16 	bl	8000be8 <__aeabi_uldivmod>
 8006fbc:	4602      	mov	r2, r0
 8006fbe:	460b      	mov	r3, r1
 8006fc0:	4b0d      	ldr	r3, [pc, #52]	; (8006ff8 <UART_SetConfig+0x4e4>)
 8006fc2:	fba3 1302 	umull	r1, r3, r3, r2
 8006fc6:	095b      	lsrs	r3, r3, #5
 8006fc8:	2164      	movs	r1, #100	; 0x64
 8006fca:	fb01 f303 	mul.w	r3, r1, r3
 8006fce:	1ad3      	subs	r3, r2, r3
 8006fd0:	011b      	lsls	r3, r3, #4
 8006fd2:	3332      	adds	r3, #50	; 0x32
 8006fd4:	4a08      	ldr	r2, [pc, #32]	; (8006ff8 <UART_SetConfig+0x4e4>)
 8006fd6:	fba2 2303 	umull	r2, r3, r2, r3
 8006fda:	095b      	lsrs	r3, r3, #5
 8006fdc:	f003 020f 	and.w	r2, r3, #15
 8006fe0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	4422      	add	r2, r4
 8006fe8:	609a      	str	r2, [r3, #8]
}
 8006fea:	bf00      	nop
 8006fec:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006ff0:	46bd      	mov	sp, r7
 8006ff2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006ff6:	bf00      	nop
 8006ff8:	51eb851f 	.word	0x51eb851f

08006ffc <__errno>:
 8006ffc:	4b01      	ldr	r3, [pc, #4]	; (8007004 <__errno+0x8>)
 8006ffe:	6818      	ldr	r0, [r3, #0]
 8007000:	4770      	bx	lr
 8007002:	bf00      	nop
 8007004:	2000000c 	.word	0x2000000c

08007008 <__libc_init_array>:
 8007008:	b570      	push	{r4, r5, r6, lr}
 800700a:	4d0d      	ldr	r5, [pc, #52]	; (8007040 <__libc_init_array+0x38>)
 800700c:	4c0d      	ldr	r4, [pc, #52]	; (8007044 <__libc_init_array+0x3c>)
 800700e:	1b64      	subs	r4, r4, r5
 8007010:	10a4      	asrs	r4, r4, #2
 8007012:	2600      	movs	r6, #0
 8007014:	42a6      	cmp	r6, r4
 8007016:	d109      	bne.n	800702c <__libc_init_array+0x24>
 8007018:	4d0b      	ldr	r5, [pc, #44]	; (8007048 <__libc_init_array+0x40>)
 800701a:	4c0c      	ldr	r4, [pc, #48]	; (800704c <__libc_init_array+0x44>)
 800701c:	f002 fd50 	bl	8009ac0 <_init>
 8007020:	1b64      	subs	r4, r4, r5
 8007022:	10a4      	asrs	r4, r4, #2
 8007024:	2600      	movs	r6, #0
 8007026:	42a6      	cmp	r6, r4
 8007028:	d105      	bne.n	8007036 <__libc_init_array+0x2e>
 800702a:	bd70      	pop	{r4, r5, r6, pc}
 800702c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007030:	4798      	blx	r3
 8007032:	3601      	adds	r6, #1
 8007034:	e7ee      	b.n	8007014 <__libc_init_array+0xc>
 8007036:	f855 3b04 	ldr.w	r3, [r5], #4
 800703a:	4798      	blx	r3
 800703c:	3601      	adds	r6, #1
 800703e:	e7f2      	b.n	8007026 <__libc_init_array+0x1e>
 8007040:	08009fac 	.word	0x08009fac
 8007044:	08009fac 	.word	0x08009fac
 8007048:	08009fac 	.word	0x08009fac
 800704c:	08009fb0 	.word	0x08009fb0

08007050 <memset>:
 8007050:	4402      	add	r2, r0
 8007052:	4603      	mov	r3, r0
 8007054:	4293      	cmp	r3, r2
 8007056:	d100      	bne.n	800705a <memset+0xa>
 8007058:	4770      	bx	lr
 800705a:	f803 1b01 	strb.w	r1, [r3], #1
 800705e:	e7f9      	b.n	8007054 <memset+0x4>

08007060 <__cvt>:
 8007060:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007064:	ec55 4b10 	vmov	r4, r5, d0
 8007068:	2d00      	cmp	r5, #0
 800706a:	460e      	mov	r6, r1
 800706c:	4619      	mov	r1, r3
 800706e:	462b      	mov	r3, r5
 8007070:	bfbb      	ittet	lt
 8007072:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007076:	461d      	movlt	r5, r3
 8007078:	2300      	movge	r3, #0
 800707a:	232d      	movlt	r3, #45	; 0x2d
 800707c:	700b      	strb	r3, [r1, #0]
 800707e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007080:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007084:	4691      	mov	r9, r2
 8007086:	f023 0820 	bic.w	r8, r3, #32
 800708a:	bfbc      	itt	lt
 800708c:	4622      	movlt	r2, r4
 800708e:	4614      	movlt	r4, r2
 8007090:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007094:	d005      	beq.n	80070a2 <__cvt+0x42>
 8007096:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800709a:	d100      	bne.n	800709e <__cvt+0x3e>
 800709c:	3601      	adds	r6, #1
 800709e:	2102      	movs	r1, #2
 80070a0:	e000      	b.n	80070a4 <__cvt+0x44>
 80070a2:	2103      	movs	r1, #3
 80070a4:	ab03      	add	r3, sp, #12
 80070a6:	9301      	str	r3, [sp, #4]
 80070a8:	ab02      	add	r3, sp, #8
 80070aa:	9300      	str	r3, [sp, #0]
 80070ac:	ec45 4b10 	vmov	d0, r4, r5
 80070b0:	4653      	mov	r3, sl
 80070b2:	4632      	mov	r2, r6
 80070b4:	f000 fce4 	bl	8007a80 <_dtoa_r>
 80070b8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80070bc:	4607      	mov	r7, r0
 80070be:	d102      	bne.n	80070c6 <__cvt+0x66>
 80070c0:	f019 0f01 	tst.w	r9, #1
 80070c4:	d022      	beq.n	800710c <__cvt+0xac>
 80070c6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80070ca:	eb07 0906 	add.w	r9, r7, r6
 80070ce:	d110      	bne.n	80070f2 <__cvt+0x92>
 80070d0:	783b      	ldrb	r3, [r7, #0]
 80070d2:	2b30      	cmp	r3, #48	; 0x30
 80070d4:	d10a      	bne.n	80070ec <__cvt+0x8c>
 80070d6:	2200      	movs	r2, #0
 80070d8:	2300      	movs	r3, #0
 80070da:	4620      	mov	r0, r4
 80070dc:	4629      	mov	r1, r5
 80070de:	f7f9 fd13 	bl	8000b08 <__aeabi_dcmpeq>
 80070e2:	b918      	cbnz	r0, 80070ec <__cvt+0x8c>
 80070e4:	f1c6 0601 	rsb	r6, r6, #1
 80070e8:	f8ca 6000 	str.w	r6, [sl]
 80070ec:	f8da 3000 	ldr.w	r3, [sl]
 80070f0:	4499      	add	r9, r3
 80070f2:	2200      	movs	r2, #0
 80070f4:	2300      	movs	r3, #0
 80070f6:	4620      	mov	r0, r4
 80070f8:	4629      	mov	r1, r5
 80070fa:	f7f9 fd05 	bl	8000b08 <__aeabi_dcmpeq>
 80070fe:	b108      	cbz	r0, 8007104 <__cvt+0xa4>
 8007100:	f8cd 900c 	str.w	r9, [sp, #12]
 8007104:	2230      	movs	r2, #48	; 0x30
 8007106:	9b03      	ldr	r3, [sp, #12]
 8007108:	454b      	cmp	r3, r9
 800710a:	d307      	bcc.n	800711c <__cvt+0xbc>
 800710c:	9b03      	ldr	r3, [sp, #12]
 800710e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007110:	1bdb      	subs	r3, r3, r7
 8007112:	4638      	mov	r0, r7
 8007114:	6013      	str	r3, [r2, #0]
 8007116:	b004      	add	sp, #16
 8007118:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800711c:	1c59      	adds	r1, r3, #1
 800711e:	9103      	str	r1, [sp, #12]
 8007120:	701a      	strb	r2, [r3, #0]
 8007122:	e7f0      	b.n	8007106 <__cvt+0xa6>

08007124 <__exponent>:
 8007124:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007126:	4603      	mov	r3, r0
 8007128:	2900      	cmp	r1, #0
 800712a:	bfb8      	it	lt
 800712c:	4249      	neglt	r1, r1
 800712e:	f803 2b02 	strb.w	r2, [r3], #2
 8007132:	bfb4      	ite	lt
 8007134:	222d      	movlt	r2, #45	; 0x2d
 8007136:	222b      	movge	r2, #43	; 0x2b
 8007138:	2909      	cmp	r1, #9
 800713a:	7042      	strb	r2, [r0, #1]
 800713c:	dd2a      	ble.n	8007194 <__exponent+0x70>
 800713e:	f10d 0407 	add.w	r4, sp, #7
 8007142:	46a4      	mov	ip, r4
 8007144:	270a      	movs	r7, #10
 8007146:	46a6      	mov	lr, r4
 8007148:	460a      	mov	r2, r1
 800714a:	fb91 f6f7 	sdiv	r6, r1, r7
 800714e:	fb07 1516 	mls	r5, r7, r6, r1
 8007152:	3530      	adds	r5, #48	; 0x30
 8007154:	2a63      	cmp	r2, #99	; 0x63
 8007156:	f104 34ff 	add.w	r4, r4, #4294967295
 800715a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800715e:	4631      	mov	r1, r6
 8007160:	dcf1      	bgt.n	8007146 <__exponent+0x22>
 8007162:	3130      	adds	r1, #48	; 0x30
 8007164:	f1ae 0502 	sub.w	r5, lr, #2
 8007168:	f804 1c01 	strb.w	r1, [r4, #-1]
 800716c:	1c44      	adds	r4, r0, #1
 800716e:	4629      	mov	r1, r5
 8007170:	4561      	cmp	r1, ip
 8007172:	d30a      	bcc.n	800718a <__exponent+0x66>
 8007174:	f10d 0209 	add.w	r2, sp, #9
 8007178:	eba2 020e 	sub.w	r2, r2, lr
 800717c:	4565      	cmp	r5, ip
 800717e:	bf88      	it	hi
 8007180:	2200      	movhi	r2, #0
 8007182:	4413      	add	r3, r2
 8007184:	1a18      	subs	r0, r3, r0
 8007186:	b003      	add	sp, #12
 8007188:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800718a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800718e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8007192:	e7ed      	b.n	8007170 <__exponent+0x4c>
 8007194:	2330      	movs	r3, #48	; 0x30
 8007196:	3130      	adds	r1, #48	; 0x30
 8007198:	7083      	strb	r3, [r0, #2]
 800719a:	70c1      	strb	r1, [r0, #3]
 800719c:	1d03      	adds	r3, r0, #4
 800719e:	e7f1      	b.n	8007184 <__exponent+0x60>

080071a0 <_printf_float>:
 80071a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071a4:	ed2d 8b02 	vpush	{d8}
 80071a8:	b08d      	sub	sp, #52	; 0x34
 80071aa:	460c      	mov	r4, r1
 80071ac:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80071b0:	4616      	mov	r6, r2
 80071b2:	461f      	mov	r7, r3
 80071b4:	4605      	mov	r5, r0
 80071b6:	f001 fb47 	bl	8008848 <_localeconv_r>
 80071ba:	f8d0 a000 	ldr.w	sl, [r0]
 80071be:	4650      	mov	r0, sl
 80071c0:	f7f9 f826 	bl	8000210 <strlen>
 80071c4:	2300      	movs	r3, #0
 80071c6:	930a      	str	r3, [sp, #40]	; 0x28
 80071c8:	6823      	ldr	r3, [r4, #0]
 80071ca:	9305      	str	r3, [sp, #20]
 80071cc:	f8d8 3000 	ldr.w	r3, [r8]
 80071d0:	f894 b018 	ldrb.w	fp, [r4, #24]
 80071d4:	3307      	adds	r3, #7
 80071d6:	f023 0307 	bic.w	r3, r3, #7
 80071da:	f103 0208 	add.w	r2, r3, #8
 80071de:	f8c8 2000 	str.w	r2, [r8]
 80071e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071e6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80071ea:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80071ee:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80071f2:	9307      	str	r3, [sp, #28]
 80071f4:	f8cd 8018 	str.w	r8, [sp, #24]
 80071f8:	ee08 0a10 	vmov	s16, r0
 80071fc:	4b9f      	ldr	r3, [pc, #636]	; (800747c <_printf_float+0x2dc>)
 80071fe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007202:	f04f 32ff 	mov.w	r2, #4294967295
 8007206:	f7f9 fcb1 	bl	8000b6c <__aeabi_dcmpun>
 800720a:	bb88      	cbnz	r0, 8007270 <_printf_float+0xd0>
 800720c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007210:	4b9a      	ldr	r3, [pc, #616]	; (800747c <_printf_float+0x2dc>)
 8007212:	f04f 32ff 	mov.w	r2, #4294967295
 8007216:	f7f9 fc8b 	bl	8000b30 <__aeabi_dcmple>
 800721a:	bb48      	cbnz	r0, 8007270 <_printf_float+0xd0>
 800721c:	2200      	movs	r2, #0
 800721e:	2300      	movs	r3, #0
 8007220:	4640      	mov	r0, r8
 8007222:	4649      	mov	r1, r9
 8007224:	f7f9 fc7a 	bl	8000b1c <__aeabi_dcmplt>
 8007228:	b110      	cbz	r0, 8007230 <_printf_float+0x90>
 800722a:	232d      	movs	r3, #45	; 0x2d
 800722c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007230:	4b93      	ldr	r3, [pc, #588]	; (8007480 <_printf_float+0x2e0>)
 8007232:	4894      	ldr	r0, [pc, #592]	; (8007484 <_printf_float+0x2e4>)
 8007234:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007238:	bf94      	ite	ls
 800723a:	4698      	movls	r8, r3
 800723c:	4680      	movhi	r8, r0
 800723e:	2303      	movs	r3, #3
 8007240:	6123      	str	r3, [r4, #16]
 8007242:	9b05      	ldr	r3, [sp, #20]
 8007244:	f023 0204 	bic.w	r2, r3, #4
 8007248:	6022      	str	r2, [r4, #0]
 800724a:	f04f 0900 	mov.w	r9, #0
 800724e:	9700      	str	r7, [sp, #0]
 8007250:	4633      	mov	r3, r6
 8007252:	aa0b      	add	r2, sp, #44	; 0x2c
 8007254:	4621      	mov	r1, r4
 8007256:	4628      	mov	r0, r5
 8007258:	f000 f9d8 	bl	800760c <_printf_common>
 800725c:	3001      	adds	r0, #1
 800725e:	f040 8090 	bne.w	8007382 <_printf_float+0x1e2>
 8007262:	f04f 30ff 	mov.w	r0, #4294967295
 8007266:	b00d      	add	sp, #52	; 0x34
 8007268:	ecbd 8b02 	vpop	{d8}
 800726c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007270:	4642      	mov	r2, r8
 8007272:	464b      	mov	r3, r9
 8007274:	4640      	mov	r0, r8
 8007276:	4649      	mov	r1, r9
 8007278:	f7f9 fc78 	bl	8000b6c <__aeabi_dcmpun>
 800727c:	b140      	cbz	r0, 8007290 <_printf_float+0xf0>
 800727e:	464b      	mov	r3, r9
 8007280:	2b00      	cmp	r3, #0
 8007282:	bfbc      	itt	lt
 8007284:	232d      	movlt	r3, #45	; 0x2d
 8007286:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800728a:	487f      	ldr	r0, [pc, #508]	; (8007488 <_printf_float+0x2e8>)
 800728c:	4b7f      	ldr	r3, [pc, #508]	; (800748c <_printf_float+0x2ec>)
 800728e:	e7d1      	b.n	8007234 <_printf_float+0x94>
 8007290:	6863      	ldr	r3, [r4, #4]
 8007292:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8007296:	9206      	str	r2, [sp, #24]
 8007298:	1c5a      	adds	r2, r3, #1
 800729a:	d13f      	bne.n	800731c <_printf_float+0x17c>
 800729c:	2306      	movs	r3, #6
 800729e:	6063      	str	r3, [r4, #4]
 80072a0:	9b05      	ldr	r3, [sp, #20]
 80072a2:	6861      	ldr	r1, [r4, #4]
 80072a4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80072a8:	2300      	movs	r3, #0
 80072aa:	9303      	str	r3, [sp, #12]
 80072ac:	ab0a      	add	r3, sp, #40	; 0x28
 80072ae:	e9cd b301 	strd	fp, r3, [sp, #4]
 80072b2:	ab09      	add	r3, sp, #36	; 0x24
 80072b4:	ec49 8b10 	vmov	d0, r8, r9
 80072b8:	9300      	str	r3, [sp, #0]
 80072ba:	6022      	str	r2, [r4, #0]
 80072bc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80072c0:	4628      	mov	r0, r5
 80072c2:	f7ff fecd 	bl	8007060 <__cvt>
 80072c6:	9b06      	ldr	r3, [sp, #24]
 80072c8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80072ca:	2b47      	cmp	r3, #71	; 0x47
 80072cc:	4680      	mov	r8, r0
 80072ce:	d108      	bne.n	80072e2 <_printf_float+0x142>
 80072d0:	1cc8      	adds	r0, r1, #3
 80072d2:	db02      	blt.n	80072da <_printf_float+0x13a>
 80072d4:	6863      	ldr	r3, [r4, #4]
 80072d6:	4299      	cmp	r1, r3
 80072d8:	dd41      	ble.n	800735e <_printf_float+0x1be>
 80072da:	f1ab 0b02 	sub.w	fp, fp, #2
 80072de:	fa5f fb8b 	uxtb.w	fp, fp
 80072e2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80072e6:	d820      	bhi.n	800732a <_printf_float+0x18a>
 80072e8:	3901      	subs	r1, #1
 80072ea:	465a      	mov	r2, fp
 80072ec:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80072f0:	9109      	str	r1, [sp, #36]	; 0x24
 80072f2:	f7ff ff17 	bl	8007124 <__exponent>
 80072f6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80072f8:	1813      	adds	r3, r2, r0
 80072fa:	2a01      	cmp	r2, #1
 80072fc:	4681      	mov	r9, r0
 80072fe:	6123      	str	r3, [r4, #16]
 8007300:	dc02      	bgt.n	8007308 <_printf_float+0x168>
 8007302:	6822      	ldr	r2, [r4, #0]
 8007304:	07d2      	lsls	r2, r2, #31
 8007306:	d501      	bpl.n	800730c <_printf_float+0x16c>
 8007308:	3301      	adds	r3, #1
 800730a:	6123      	str	r3, [r4, #16]
 800730c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007310:	2b00      	cmp	r3, #0
 8007312:	d09c      	beq.n	800724e <_printf_float+0xae>
 8007314:	232d      	movs	r3, #45	; 0x2d
 8007316:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800731a:	e798      	b.n	800724e <_printf_float+0xae>
 800731c:	9a06      	ldr	r2, [sp, #24]
 800731e:	2a47      	cmp	r2, #71	; 0x47
 8007320:	d1be      	bne.n	80072a0 <_printf_float+0x100>
 8007322:	2b00      	cmp	r3, #0
 8007324:	d1bc      	bne.n	80072a0 <_printf_float+0x100>
 8007326:	2301      	movs	r3, #1
 8007328:	e7b9      	b.n	800729e <_printf_float+0xfe>
 800732a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800732e:	d118      	bne.n	8007362 <_printf_float+0x1c2>
 8007330:	2900      	cmp	r1, #0
 8007332:	6863      	ldr	r3, [r4, #4]
 8007334:	dd0b      	ble.n	800734e <_printf_float+0x1ae>
 8007336:	6121      	str	r1, [r4, #16]
 8007338:	b913      	cbnz	r3, 8007340 <_printf_float+0x1a0>
 800733a:	6822      	ldr	r2, [r4, #0]
 800733c:	07d0      	lsls	r0, r2, #31
 800733e:	d502      	bpl.n	8007346 <_printf_float+0x1a6>
 8007340:	3301      	adds	r3, #1
 8007342:	440b      	add	r3, r1
 8007344:	6123      	str	r3, [r4, #16]
 8007346:	65a1      	str	r1, [r4, #88]	; 0x58
 8007348:	f04f 0900 	mov.w	r9, #0
 800734c:	e7de      	b.n	800730c <_printf_float+0x16c>
 800734e:	b913      	cbnz	r3, 8007356 <_printf_float+0x1b6>
 8007350:	6822      	ldr	r2, [r4, #0]
 8007352:	07d2      	lsls	r2, r2, #31
 8007354:	d501      	bpl.n	800735a <_printf_float+0x1ba>
 8007356:	3302      	adds	r3, #2
 8007358:	e7f4      	b.n	8007344 <_printf_float+0x1a4>
 800735a:	2301      	movs	r3, #1
 800735c:	e7f2      	b.n	8007344 <_printf_float+0x1a4>
 800735e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8007362:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007364:	4299      	cmp	r1, r3
 8007366:	db05      	blt.n	8007374 <_printf_float+0x1d4>
 8007368:	6823      	ldr	r3, [r4, #0]
 800736a:	6121      	str	r1, [r4, #16]
 800736c:	07d8      	lsls	r0, r3, #31
 800736e:	d5ea      	bpl.n	8007346 <_printf_float+0x1a6>
 8007370:	1c4b      	adds	r3, r1, #1
 8007372:	e7e7      	b.n	8007344 <_printf_float+0x1a4>
 8007374:	2900      	cmp	r1, #0
 8007376:	bfd4      	ite	le
 8007378:	f1c1 0202 	rsble	r2, r1, #2
 800737c:	2201      	movgt	r2, #1
 800737e:	4413      	add	r3, r2
 8007380:	e7e0      	b.n	8007344 <_printf_float+0x1a4>
 8007382:	6823      	ldr	r3, [r4, #0]
 8007384:	055a      	lsls	r2, r3, #21
 8007386:	d407      	bmi.n	8007398 <_printf_float+0x1f8>
 8007388:	6923      	ldr	r3, [r4, #16]
 800738a:	4642      	mov	r2, r8
 800738c:	4631      	mov	r1, r6
 800738e:	4628      	mov	r0, r5
 8007390:	47b8      	blx	r7
 8007392:	3001      	adds	r0, #1
 8007394:	d12c      	bne.n	80073f0 <_printf_float+0x250>
 8007396:	e764      	b.n	8007262 <_printf_float+0xc2>
 8007398:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800739c:	f240 80e0 	bls.w	8007560 <_printf_float+0x3c0>
 80073a0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80073a4:	2200      	movs	r2, #0
 80073a6:	2300      	movs	r3, #0
 80073a8:	f7f9 fbae 	bl	8000b08 <__aeabi_dcmpeq>
 80073ac:	2800      	cmp	r0, #0
 80073ae:	d034      	beq.n	800741a <_printf_float+0x27a>
 80073b0:	4a37      	ldr	r2, [pc, #220]	; (8007490 <_printf_float+0x2f0>)
 80073b2:	2301      	movs	r3, #1
 80073b4:	4631      	mov	r1, r6
 80073b6:	4628      	mov	r0, r5
 80073b8:	47b8      	blx	r7
 80073ba:	3001      	adds	r0, #1
 80073bc:	f43f af51 	beq.w	8007262 <_printf_float+0xc2>
 80073c0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80073c4:	429a      	cmp	r2, r3
 80073c6:	db02      	blt.n	80073ce <_printf_float+0x22e>
 80073c8:	6823      	ldr	r3, [r4, #0]
 80073ca:	07d8      	lsls	r0, r3, #31
 80073cc:	d510      	bpl.n	80073f0 <_printf_float+0x250>
 80073ce:	ee18 3a10 	vmov	r3, s16
 80073d2:	4652      	mov	r2, sl
 80073d4:	4631      	mov	r1, r6
 80073d6:	4628      	mov	r0, r5
 80073d8:	47b8      	blx	r7
 80073da:	3001      	adds	r0, #1
 80073dc:	f43f af41 	beq.w	8007262 <_printf_float+0xc2>
 80073e0:	f04f 0800 	mov.w	r8, #0
 80073e4:	f104 091a 	add.w	r9, r4, #26
 80073e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80073ea:	3b01      	subs	r3, #1
 80073ec:	4543      	cmp	r3, r8
 80073ee:	dc09      	bgt.n	8007404 <_printf_float+0x264>
 80073f0:	6823      	ldr	r3, [r4, #0]
 80073f2:	079b      	lsls	r3, r3, #30
 80073f4:	f100 8105 	bmi.w	8007602 <_printf_float+0x462>
 80073f8:	68e0      	ldr	r0, [r4, #12]
 80073fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80073fc:	4298      	cmp	r0, r3
 80073fe:	bfb8      	it	lt
 8007400:	4618      	movlt	r0, r3
 8007402:	e730      	b.n	8007266 <_printf_float+0xc6>
 8007404:	2301      	movs	r3, #1
 8007406:	464a      	mov	r2, r9
 8007408:	4631      	mov	r1, r6
 800740a:	4628      	mov	r0, r5
 800740c:	47b8      	blx	r7
 800740e:	3001      	adds	r0, #1
 8007410:	f43f af27 	beq.w	8007262 <_printf_float+0xc2>
 8007414:	f108 0801 	add.w	r8, r8, #1
 8007418:	e7e6      	b.n	80073e8 <_printf_float+0x248>
 800741a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800741c:	2b00      	cmp	r3, #0
 800741e:	dc39      	bgt.n	8007494 <_printf_float+0x2f4>
 8007420:	4a1b      	ldr	r2, [pc, #108]	; (8007490 <_printf_float+0x2f0>)
 8007422:	2301      	movs	r3, #1
 8007424:	4631      	mov	r1, r6
 8007426:	4628      	mov	r0, r5
 8007428:	47b8      	blx	r7
 800742a:	3001      	adds	r0, #1
 800742c:	f43f af19 	beq.w	8007262 <_printf_float+0xc2>
 8007430:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007434:	4313      	orrs	r3, r2
 8007436:	d102      	bne.n	800743e <_printf_float+0x29e>
 8007438:	6823      	ldr	r3, [r4, #0]
 800743a:	07d9      	lsls	r1, r3, #31
 800743c:	d5d8      	bpl.n	80073f0 <_printf_float+0x250>
 800743e:	ee18 3a10 	vmov	r3, s16
 8007442:	4652      	mov	r2, sl
 8007444:	4631      	mov	r1, r6
 8007446:	4628      	mov	r0, r5
 8007448:	47b8      	blx	r7
 800744a:	3001      	adds	r0, #1
 800744c:	f43f af09 	beq.w	8007262 <_printf_float+0xc2>
 8007450:	f04f 0900 	mov.w	r9, #0
 8007454:	f104 0a1a 	add.w	sl, r4, #26
 8007458:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800745a:	425b      	negs	r3, r3
 800745c:	454b      	cmp	r3, r9
 800745e:	dc01      	bgt.n	8007464 <_printf_float+0x2c4>
 8007460:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007462:	e792      	b.n	800738a <_printf_float+0x1ea>
 8007464:	2301      	movs	r3, #1
 8007466:	4652      	mov	r2, sl
 8007468:	4631      	mov	r1, r6
 800746a:	4628      	mov	r0, r5
 800746c:	47b8      	blx	r7
 800746e:	3001      	adds	r0, #1
 8007470:	f43f aef7 	beq.w	8007262 <_printf_float+0xc2>
 8007474:	f109 0901 	add.w	r9, r9, #1
 8007478:	e7ee      	b.n	8007458 <_printf_float+0x2b8>
 800747a:	bf00      	nop
 800747c:	7fefffff 	.word	0x7fefffff
 8007480:	08009bd0 	.word	0x08009bd0
 8007484:	08009bd4 	.word	0x08009bd4
 8007488:	08009bdc 	.word	0x08009bdc
 800748c:	08009bd8 	.word	0x08009bd8
 8007490:	08009be0 	.word	0x08009be0
 8007494:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007496:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007498:	429a      	cmp	r2, r3
 800749a:	bfa8      	it	ge
 800749c:	461a      	movge	r2, r3
 800749e:	2a00      	cmp	r2, #0
 80074a0:	4691      	mov	r9, r2
 80074a2:	dc37      	bgt.n	8007514 <_printf_float+0x374>
 80074a4:	f04f 0b00 	mov.w	fp, #0
 80074a8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80074ac:	f104 021a 	add.w	r2, r4, #26
 80074b0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80074b2:	9305      	str	r3, [sp, #20]
 80074b4:	eba3 0309 	sub.w	r3, r3, r9
 80074b8:	455b      	cmp	r3, fp
 80074ba:	dc33      	bgt.n	8007524 <_printf_float+0x384>
 80074bc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80074c0:	429a      	cmp	r2, r3
 80074c2:	db3b      	blt.n	800753c <_printf_float+0x39c>
 80074c4:	6823      	ldr	r3, [r4, #0]
 80074c6:	07da      	lsls	r2, r3, #31
 80074c8:	d438      	bmi.n	800753c <_printf_float+0x39c>
 80074ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80074cc:	9a05      	ldr	r2, [sp, #20]
 80074ce:	9909      	ldr	r1, [sp, #36]	; 0x24
 80074d0:	1a9a      	subs	r2, r3, r2
 80074d2:	eba3 0901 	sub.w	r9, r3, r1
 80074d6:	4591      	cmp	r9, r2
 80074d8:	bfa8      	it	ge
 80074da:	4691      	movge	r9, r2
 80074dc:	f1b9 0f00 	cmp.w	r9, #0
 80074e0:	dc35      	bgt.n	800754e <_printf_float+0x3ae>
 80074e2:	f04f 0800 	mov.w	r8, #0
 80074e6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80074ea:	f104 0a1a 	add.w	sl, r4, #26
 80074ee:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80074f2:	1a9b      	subs	r3, r3, r2
 80074f4:	eba3 0309 	sub.w	r3, r3, r9
 80074f8:	4543      	cmp	r3, r8
 80074fa:	f77f af79 	ble.w	80073f0 <_printf_float+0x250>
 80074fe:	2301      	movs	r3, #1
 8007500:	4652      	mov	r2, sl
 8007502:	4631      	mov	r1, r6
 8007504:	4628      	mov	r0, r5
 8007506:	47b8      	blx	r7
 8007508:	3001      	adds	r0, #1
 800750a:	f43f aeaa 	beq.w	8007262 <_printf_float+0xc2>
 800750e:	f108 0801 	add.w	r8, r8, #1
 8007512:	e7ec      	b.n	80074ee <_printf_float+0x34e>
 8007514:	4613      	mov	r3, r2
 8007516:	4631      	mov	r1, r6
 8007518:	4642      	mov	r2, r8
 800751a:	4628      	mov	r0, r5
 800751c:	47b8      	blx	r7
 800751e:	3001      	adds	r0, #1
 8007520:	d1c0      	bne.n	80074a4 <_printf_float+0x304>
 8007522:	e69e      	b.n	8007262 <_printf_float+0xc2>
 8007524:	2301      	movs	r3, #1
 8007526:	4631      	mov	r1, r6
 8007528:	4628      	mov	r0, r5
 800752a:	9205      	str	r2, [sp, #20]
 800752c:	47b8      	blx	r7
 800752e:	3001      	adds	r0, #1
 8007530:	f43f ae97 	beq.w	8007262 <_printf_float+0xc2>
 8007534:	9a05      	ldr	r2, [sp, #20]
 8007536:	f10b 0b01 	add.w	fp, fp, #1
 800753a:	e7b9      	b.n	80074b0 <_printf_float+0x310>
 800753c:	ee18 3a10 	vmov	r3, s16
 8007540:	4652      	mov	r2, sl
 8007542:	4631      	mov	r1, r6
 8007544:	4628      	mov	r0, r5
 8007546:	47b8      	blx	r7
 8007548:	3001      	adds	r0, #1
 800754a:	d1be      	bne.n	80074ca <_printf_float+0x32a>
 800754c:	e689      	b.n	8007262 <_printf_float+0xc2>
 800754e:	9a05      	ldr	r2, [sp, #20]
 8007550:	464b      	mov	r3, r9
 8007552:	4442      	add	r2, r8
 8007554:	4631      	mov	r1, r6
 8007556:	4628      	mov	r0, r5
 8007558:	47b8      	blx	r7
 800755a:	3001      	adds	r0, #1
 800755c:	d1c1      	bne.n	80074e2 <_printf_float+0x342>
 800755e:	e680      	b.n	8007262 <_printf_float+0xc2>
 8007560:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007562:	2a01      	cmp	r2, #1
 8007564:	dc01      	bgt.n	800756a <_printf_float+0x3ca>
 8007566:	07db      	lsls	r3, r3, #31
 8007568:	d538      	bpl.n	80075dc <_printf_float+0x43c>
 800756a:	2301      	movs	r3, #1
 800756c:	4642      	mov	r2, r8
 800756e:	4631      	mov	r1, r6
 8007570:	4628      	mov	r0, r5
 8007572:	47b8      	blx	r7
 8007574:	3001      	adds	r0, #1
 8007576:	f43f ae74 	beq.w	8007262 <_printf_float+0xc2>
 800757a:	ee18 3a10 	vmov	r3, s16
 800757e:	4652      	mov	r2, sl
 8007580:	4631      	mov	r1, r6
 8007582:	4628      	mov	r0, r5
 8007584:	47b8      	blx	r7
 8007586:	3001      	adds	r0, #1
 8007588:	f43f ae6b 	beq.w	8007262 <_printf_float+0xc2>
 800758c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007590:	2200      	movs	r2, #0
 8007592:	2300      	movs	r3, #0
 8007594:	f7f9 fab8 	bl	8000b08 <__aeabi_dcmpeq>
 8007598:	b9d8      	cbnz	r0, 80075d2 <_printf_float+0x432>
 800759a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800759c:	f108 0201 	add.w	r2, r8, #1
 80075a0:	3b01      	subs	r3, #1
 80075a2:	4631      	mov	r1, r6
 80075a4:	4628      	mov	r0, r5
 80075a6:	47b8      	blx	r7
 80075a8:	3001      	adds	r0, #1
 80075aa:	d10e      	bne.n	80075ca <_printf_float+0x42a>
 80075ac:	e659      	b.n	8007262 <_printf_float+0xc2>
 80075ae:	2301      	movs	r3, #1
 80075b0:	4652      	mov	r2, sl
 80075b2:	4631      	mov	r1, r6
 80075b4:	4628      	mov	r0, r5
 80075b6:	47b8      	blx	r7
 80075b8:	3001      	adds	r0, #1
 80075ba:	f43f ae52 	beq.w	8007262 <_printf_float+0xc2>
 80075be:	f108 0801 	add.w	r8, r8, #1
 80075c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80075c4:	3b01      	subs	r3, #1
 80075c6:	4543      	cmp	r3, r8
 80075c8:	dcf1      	bgt.n	80075ae <_printf_float+0x40e>
 80075ca:	464b      	mov	r3, r9
 80075cc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80075d0:	e6dc      	b.n	800738c <_printf_float+0x1ec>
 80075d2:	f04f 0800 	mov.w	r8, #0
 80075d6:	f104 0a1a 	add.w	sl, r4, #26
 80075da:	e7f2      	b.n	80075c2 <_printf_float+0x422>
 80075dc:	2301      	movs	r3, #1
 80075de:	4642      	mov	r2, r8
 80075e0:	e7df      	b.n	80075a2 <_printf_float+0x402>
 80075e2:	2301      	movs	r3, #1
 80075e4:	464a      	mov	r2, r9
 80075e6:	4631      	mov	r1, r6
 80075e8:	4628      	mov	r0, r5
 80075ea:	47b8      	blx	r7
 80075ec:	3001      	adds	r0, #1
 80075ee:	f43f ae38 	beq.w	8007262 <_printf_float+0xc2>
 80075f2:	f108 0801 	add.w	r8, r8, #1
 80075f6:	68e3      	ldr	r3, [r4, #12]
 80075f8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80075fa:	1a5b      	subs	r3, r3, r1
 80075fc:	4543      	cmp	r3, r8
 80075fe:	dcf0      	bgt.n	80075e2 <_printf_float+0x442>
 8007600:	e6fa      	b.n	80073f8 <_printf_float+0x258>
 8007602:	f04f 0800 	mov.w	r8, #0
 8007606:	f104 0919 	add.w	r9, r4, #25
 800760a:	e7f4      	b.n	80075f6 <_printf_float+0x456>

0800760c <_printf_common>:
 800760c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007610:	4616      	mov	r6, r2
 8007612:	4699      	mov	r9, r3
 8007614:	688a      	ldr	r2, [r1, #8]
 8007616:	690b      	ldr	r3, [r1, #16]
 8007618:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800761c:	4293      	cmp	r3, r2
 800761e:	bfb8      	it	lt
 8007620:	4613      	movlt	r3, r2
 8007622:	6033      	str	r3, [r6, #0]
 8007624:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007628:	4607      	mov	r7, r0
 800762a:	460c      	mov	r4, r1
 800762c:	b10a      	cbz	r2, 8007632 <_printf_common+0x26>
 800762e:	3301      	adds	r3, #1
 8007630:	6033      	str	r3, [r6, #0]
 8007632:	6823      	ldr	r3, [r4, #0]
 8007634:	0699      	lsls	r1, r3, #26
 8007636:	bf42      	ittt	mi
 8007638:	6833      	ldrmi	r3, [r6, #0]
 800763a:	3302      	addmi	r3, #2
 800763c:	6033      	strmi	r3, [r6, #0]
 800763e:	6825      	ldr	r5, [r4, #0]
 8007640:	f015 0506 	ands.w	r5, r5, #6
 8007644:	d106      	bne.n	8007654 <_printf_common+0x48>
 8007646:	f104 0a19 	add.w	sl, r4, #25
 800764a:	68e3      	ldr	r3, [r4, #12]
 800764c:	6832      	ldr	r2, [r6, #0]
 800764e:	1a9b      	subs	r3, r3, r2
 8007650:	42ab      	cmp	r3, r5
 8007652:	dc26      	bgt.n	80076a2 <_printf_common+0x96>
 8007654:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007658:	1e13      	subs	r3, r2, #0
 800765a:	6822      	ldr	r2, [r4, #0]
 800765c:	bf18      	it	ne
 800765e:	2301      	movne	r3, #1
 8007660:	0692      	lsls	r2, r2, #26
 8007662:	d42b      	bmi.n	80076bc <_printf_common+0xb0>
 8007664:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007668:	4649      	mov	r1, r9
 800766a:	4638      	mov	r0, r7
 800766c:	47c0      	blx	r8
 800766e:	3001      	adds	r0, #1
 8007670:	d01e      	beq.n	80076b0 <_printf_common+0xa4>
 8007672:	6823      	ldr	r3, [r4, #0]
 8007674:	68e5      	ldr	r5, [r4, #12]
 8007676:	6832      	ldr	r2, [r6, #0]
 8007678:	f003 0306 	and.w	r3, r3, #6
 800767c:	2b04      	cmp	r3, #4
 800767e:	bf08      	it	eq
 8007680:	1aad      	subeq	r5, r5, r2
 8007682:	68a3      	ldr	r3, [r4, #8]
 8007684:	6922      	ldr	r2, [r4, #16]
 8007686:	bf0c      	ite	eq
 8007688:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800768c:	2500      	movne	r5, #0
 800768e:	4293      	cmp	r3, r2
 8007690:	bfc4      	itt	gt
 8007692:	1a9b      	subgt	r3, r3, r2
 8007694:	18ed      	addgt	r5, r5, r3
 8007696:	2600      	movs	r6, #0
 8007698:	341a      	adds	r4, #26
 800769a:	42b5      	cmp	r5, r6
 800769c:	d11a      	bne.n	80076d4 <_printf_common+0xc8>
 800769e:	2000      	movs	r0, #0
 80076a0:	e008      	b.n	80076b4 <_printf_common+0xa8>
 80076a2:	2301      	movs	r3, #1
 80076a4:	4652      	mov	r2, sl
 80076a6:	4649      	mov	r1, r9
 80076a8:	4638      	mov	r0, r7
 80076aa:	47c0      	blx	r8
 80076ac:	3001      	adds	r0, #1
 80076ae:	d103      	bne.n	80076b8 <_printf_common+0xac>
 80076b0:	f04f 30ff 	mov.w	r0, #4294967295
 80076b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80076b8:	3501      	adds	r5, #1
 80076ba:	e7c6      	b.n	800764a <_printf_common+0x3e>
 80076bc:	18e1      	adds	r1, r4, r3
 80076be:	1c5a      	adds	r2, r3, #1
 80076c0:	2030      	movs	r0, #48	; 0x30
 80076c2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80076c6:	4422      	add	r2, r4
 80076c8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80076cc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80076d0:	3302      	adds	r3, #2
 80076d2:	e7c7      	b.n	8007664 <_printf_common+0x58>
 80076d4:	2301      	movs	r3, #1
 80076d6:	4622      	mov	r2, r4
 80076d8:	4649      	mov	r1, r9
 80076da:	4638      	mov	r0, r7
 80076dc:	47c0      	blx	r8
 80076de:	3001      	adds	r0, #1
 80076e0:	d0e6      	beq.n	80076b0 <_printf_common+0xa4>
 80076e2:	3601      	adds	r6, #1
 80076e4:	e7d9      	b.n	800769a <_printf_common+0x8e>
	...

080076e8 <_printf_i>:
 80076e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80076ec:	7e0f      	ldrb	r7, [r1, #24]
 80076ee:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80076f0:	2f78      	cmp	r7, #120	; 0x78
 80076f2:	4691      	mov	r9, r2
 80076f4:	4680      	mov	r8, r0
 80076f6:	460c      	mov	r4, r1
 80076f8:	469a      	mov	sl, r3
 80076fa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80076fe:	d807      	bhi.n	8007710 <_printf_i+0x28>
 8007700:	2f62      	cmp	r7, #98	; 0x62
 8007702:	d80a      	bhi.n	800771a <_printf_i+0x32>
 8007704:	2f00      	cmp	r7, #0
 8007706:	f000 80d8 	beq.w	80078ba <_printf_i+0x1d2>
 800770a:	2f58      	cmp	r7, #88	; 0x58
 800770c:	f000 80a3 	beq.w	8007856 <_printf_i+0x16e>
 8007710:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007714:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007718:	e03a      	b.n	8007790 <_printf_i+0xa8>
 800771a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800771e:	2b15      	cmp	r3, #21
 8007720:	d8f6      	bhi.n	8007710 <_printf_i+0x28>
 8007722:	a101      	add	r1, pc, #4	; (adr r1, 8007728 <_printf_i+0x40>)
 8007724:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007728:	08007781 	.word	0x08007781
 800772c:	08007795 	.word	0x08007795
 8007730:	08007711 	.word	0x08007711
 8007734:	08007711 	.word	0x08007711
 8007738:	08007711 	.word	0x08007711
 800773c:	08007711 	.word	0x08007711
 8007740:	08007795 	.word	0x08007795
 8007744:	08007711 	.word	0x08007711
 8007748:	08007711 	.word	0x08007711
 800774c:	08007711 	.word	0x08007711
 8007750:	08007711 	.word	0x08007711
 8007754:	080078a1 	.word	0x080078a1
 8007758:	080077c5 	.word	0x080077c5
 800775c:	08007883 	.word	0x08007883
 8007760:	08007711 	.word	0x08007711
 8007764:	08007711 	.word	0x08007711
 8007768:	080078c3 	.word	0x080078c3
 800776c:	08007711 	.word	0x08007711
 8007770:	080077c5 	.word	0x080077c5
 8007774:	08007711 	.word	0x08007711
 8007778:	08007711 	.word	0x08007711
 800777c:	0800788b 	.word	0x0800788b
 8007780:	682b      	ldr	r3, [r5, #0]
 8007782:	1d1a      	adds	r2, r3, #4
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	602a      	str	r2, [r5, #0]
 8007788:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800778c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007790:	2301      	movs	r3, #1
 8007792:	e0a3      	b.n	80078dc <_printf_i+0x1f4>
 8007794:	6820      	ldr	r0, [r4, #0]
 8007796:	6829      	ldr	r1, [r5, #0]
 8007798:	0606      	lsls	r6, r0, #24
 800779a:	f101 0304 	add.w	r3, r1, #4
 800779e:	d50a      	bpl.n	80077b6 <_printf_i+0xce>
 80077a0:	680e      	ldr	r6, [r1, #0]
 80077a2:	602b      	str	r3, [r5, #0]
 80077a4:	2e00      	cmp	r6, #0
 80077a6:	da03      	bge.n	80077b0 <_printf_i+0xc8>
 80077a8:	232d      	movs	r3, #45	; 0x2d
 80077aa:	4276      	negs	r6, r6
 80077ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80077b0:	485e      	ldr	r0, [pc, #376]	; (800792c <_printf_i+0x244>)
 80077b2:	230a      	movs	r3, #10
 80077b4:	e019      	b.n	80077ea <_printf_i+0x102>
 80077b6:	680e      	ldr	r6, [r1, #0]
 80077b8:	602b      	str	r3, [r5, #0]
 80077ba:	f010 0f40 	tst.w	r0, #64	; 0x40
 80077be:	bf18      	it	ne
 80077c0:	b236      	sxthne	r6, r6
 80077c2:	e7ef      	b.n	80077a4 <_printf_i+0xbc>
 80077c4:	682b      	ldr	r3, [r5, #0]
 80077c6:	6820      	ldr	r0, [r4, #0]
 80077c8:	1d19      	adds	r1, r3, #4
 80077ca:	6029      	str	r1, [r5, #0]
 80077cc:	0601      	lsls	r1, r0, #24
 80077ce:	d501      	bpl.n	80077d4 <_printf_i+0xec>
 80077d0:	681e      	ldr	r6, [r3, #0]
 80077d2:	e002      	b.n	80077da <_printf_i+0xf2>
 80077d4:	0646      	lsls	r6, r0, #25
 80077d6:	d5fb      	bpl.n	80077d0 <_printf_i+0xe8>
 80077d8:	881e      	ldrh	r6, [r3, #0]
 80077da:	4854      	ldr	r0, [pc, #336]	; (800792c <_printf_i+0x244>)
 80077dc:	2f6f      	cmp	r7, #111	; 0x6f
 80077de:	bf0c      	ite	eq
 80077e0:	2308      	moveq	r3, #8
 80077e2:	230a      	movne	r3, #10
 80077e4:	2100      	movs	r1, #0
 80077e6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80077ea:	6865      	ldr	r5, [r4, #4]
 80077ec:	60a5      	str	r5, [r4, #8]
 80077ee:	2d00      	cmp	r5, #0
 80077f0:	bfa2      	ittt	ge
 80077f2:	6821      	ldrge	r1, [r4, #0]
 80077f4:	f021 0104 	bicge.w	r1, r1, #4
 80077f8:	6021      	strge	r1, [r4, #0]
 80077fa:	b90e      	cbnz	r6, 8007800 <_printf_i+0x118>
 80077fc:	2d00      	cmp	r5, #0
 80077fe:	d04d      	beq.n	800789c <_printf_i+0x1b4>
 8007800:	4615      	mov	r5, r2
 8007802:	fbb6 f1f3 	udiv	r1, r6, r3
 8007806:	fb03 6711 	mls	r7, r3, r1, r6
 800780a:	5dc7      	ldrb	r7, [r0, r7]
 800780c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007810:	4637      	mov	r7, r6
 8007812:	42bb      	cmp	r3, r7
 8007814:	460e      	mov	r6, r1
 8007816:	d9f4      	bls.n	8007802 <_printf_i+0x11a>
 8007818:	2b08      	cmp	r3, #8
 800781a:	d10b      	bne.n	8007834 <_printf_i+0x14c>
 800781c:	6823      	ldr	r3, [r4, #0]
 800781e:	07de      	lsls	r6, r3, #31
 8007820:	d508      	bpl.n	8007834 <_printf_i+0x14c>
 8007822:	6923      	ldr	r3, [r4, #16]
 8007824:	6861      	ldr	r1, [r4, #4]
 8007826:	4299      	cmp	r1, r3
 8007828:	bfde      	ittt	le
 800782a:	2330      	movle	r3, #48	; 0x30
 800782c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007830:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007834:	1b52      	subs	r2, r2, r5
 8007836:	6122      	str	r2, [r4, #16]
 8007838:	f8cd a000 	str.w	sl, [sp]
 800783c:	464b      	mov	r3, r9
 800783e:	aa03      	add	r2, sp, #12
 8007840:	4621      	mov	r1, r4
 8007842:	4640      	mov	r0, r8
 8007844:	f7ff fee2 	bl	800760c <_printf_common>
 8007848:	3001      	adds	r0, #1
 800784a:	d14c      	bne.n	80078e6 <_printf_i+0x1fe>
 800784c:	f04f 30ff 	mov.w	r0, #4294967295
 8007850:	b004      	add	sp, #16
 8007852:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007856:	4835      	ldr	r0, [pc, #212]	; (800792c <_printf_i+0x244>)
 8007858:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800785c:	6829      	ldr	r1, [r5, #0]
 800785e:	6823      	ldr	r3, [r4, #0]
 8007860:	f851 6b04 	ldr.w	r6, [r1], #4
 8007864:	6029      	str	r1, [r5, #0]
 8007866:	061d      	lsls	r5, r3, #24
 8007868:	d514      	bpl.n	8007894 <_printf_i+0x1ac>
 800786a:	07df      	lsls	r7, r3, #31
 800786c:	bf44      	itt	mi
 800786e:	f043 0320 	orrmi.w	r3, r3, #32
 8007872:	6023      	strmi	r3, [r4, #0]
 8007874:	b91e      	cbnz	r6, 800787e <_printf_i+0x196>
 8007876:	6823      	ldr	r3, [r4, #0]
 8007878:	f023 0320 	bic.w	r3, r3, #32
 800787c:	6023      	str	r3, [r4, #0]
 800787e:	2310      	movs	r3, #16
 8007880:	e7b0      	b.n	80077e4 <_printf_i+0xfc>
 8007882:	6823      	ldr	r3, [r4, #0]
 8007884:	f043 0320 	orr.w	r3, r3, #32
 8007888:	6023      	str	r3, [r4, #0]
 800788a:	2378      	movs	r3, #120	; 0x78
 800788c:	4828      	ldr	r0, [pc, #160]	; (8007930 <_printf_i+0x248>)
 800788e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007892:	e7e3      	b.n	800785c <_printf_i+0x174>
 8007894:	0659      	lsls	r1, r3, #25
 8007896:	bf48      	it	mi
 8007898:	b2b6      	uxthmi	r6, r6
 800789a:	e7e6      	b.n	800786a <_printf_i+0x182>
 800789c:	4615      	mov	r5, r2
 800789e:	e7bb      	b.n	8007818 <_printf_i+0x130>
 80078a0:	682b      	ldr	r3, [r5, #0]
 80078a2:	6826      	ldr	r6, [r4, #0]
 80078a4:	6961      	ldr	r1, [r4, #20]
 80078a6:	1d18      	adds	r0, r3, #4
 80078a8:	6028      	str	r0, [r5, #0]
 80078aa:	0635      	lsls	r5, r6, #24
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	d501      	bpl.n	80078b4 <_printf_i+0x1cc>
 80078b0:	6019      	str	r1, [r3, #0]
 80078b2:	e002      	b.n	80078ba <_printf_i+0x1d2>
 80078b4:	0670      	lsls	r0, r6, #25
 80078b6:	d5fb      	bpl.n	80078b0 <_printf_i+0x1c8>
 80078b8:	8019      	strh	r1, [r3, #0]
 80078ba:	2300      	movs	r3, #0
 80078bc:	6123      	str	r3, [r4, #16]
 80078be:	4615      	mov	r5, r2
 80078c0:	e7ba      	b.n	8007838 <_printf_i+0x150>
 80078c2:	682b      	ldr	r3, [r5, #0]
 80078c4:	1d1a      	adds	r2, r3, #4
 80078c6:	602a      	str	r2, [r5, #0]
 80078c8:	681d      	ldr	r5, [r3, #0]
 80078ca:	6862      	ldr	r2, [r4, #4]
 80078cc:	2100      	movs	r1, #0
 80078ce:	4628      	mov	r0, r5
 80078d0:	f7f8 fca6 	bl	8000220 <memchr>
 80078d4:	b108      	cbz	r0, 80078da <_printf_i+0x1f2>
 80078d6:	1b40      	subs	r0, r0, r5
 80078d8:	6060      	str	r0, [r4, #4]
 80078da:	6863      	ldr	r3, [r4, #4]
 80078dc:	6123      	str	r3, [r4, #16]
 80078de:	2300      	movs	r3, #0
 80078e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80078e4:	e7a8      	b.n	8007838 <_printf_i+0x150>
 80078e6:	6923      	ldr	r3, [r4, #16]
 80078e8:	462a      	mov	r2, r5
 80078ea:	4649      	mov	r1, r9
 80078ec:	4640      	mov	r0, r8
 80078ee:	47d0      	blx	sl
 80078f0:	3001      	adds	r0, #1
 80078f2:	d0ab      	beq.n	800784c <_printf_i+0x164>
 80078f4:	6823      	ldr	r3, [r4, #0]
 80078f6:	079b      	lsls	r3, r3, #30
 80078f8:	d413      	bmi.n	8007922 <_printf_i+0x23a>
 80078fa:	68e0      	ldr	r0, [r4, #12]
 80078fc:	9b03      	ldr	r3, [sp, #12]
 80078fe:	4298      	cmp	r0, r3
 8007900:	bfb8      	it	lt
 8007902:	4618      	movlt	r0, r3
 8007904:	e7a4      	b.n	8007850 <_printf_i+0x168>
 8007906:	2301      	movs	r3, #1
 8007908:	4632      	mov	r2, r6
 800790a:	4649      	mov	r1, r9
 800790c:	4640      	mov	r0, r8
 800790e:	47d0      	blx	sl
 8007910:	3001      	adds	r0, #1
 8007912:	d09b      	beq.n	800784c <_printf_i+0x164>
 8007914:	3501      	adds	r5, #1
 8007916:	68e3      	ldr	r3, [r4, #12]
 8007918:	9903      	ldr	r1, [sp, #12]
 800791a:	1a5b      	subs	r3, r3, r1
 800791c:	42ab      	cmp	r3, r5
 800791e:	dcf2      	bgt.n	8007906 <_printf_i+0x21e>
 8007920:	e7eb      	b.n	80078fa <_printf_i+0x212>
 8007922:	2500      	movs	r5, #0
 8007924:	f104 0619 	add.w	r6, r4, #25
 8007928:	e7f5      	b.n	8007916 <_printf_i+0x22e>
 800792a:	bf00      	nop
 800792c:	08009be2 	.word	0x08009be2
 8007930:	08009bf3 	.word	0x08009bf3

08007934 <iprintf>:
 8007934:	b40f      	push	{r0, r1, r2, r3}
 8007936:	4b0a      	ldr	r3, [pc, #40]	; (8007960 <iprintf+0x2c>)
 8007938:	b513      	push	{r0, r1, r4, lr}
 800793a:	681c      	ldr	r4, [r3, #0]
 800793c:	b124      	cbz	r4, 8007948 <iprintf+0x14>
 800793e:	69a3      	ldr	r3, [r4, #24]
 8007940:	b913      	cbnz	r3, 8007948 <iprintf+0x14>
 8007942:	4620      	mov	r0, r4
 8007944:	f000 fee2 	bl	800870c <__sinit>
 8007948:	ab05      	add	r3, sp, #20
 800794a:	9a04      	ldr	r2, [sp, #16]
 800794c:	68a1      	ldr	r1, [r4, #8]
 800794e:	9301      	str	r3, [sp, #4]
 8007950:	4620      	mov	r0, r4
 8007952:	f001 fc3b 	bl	80091cc <_vfiprintf_r>
 8007956:	b002      	add	sp, #8
 8007958:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800795c:	b004      	add	sp, #16
 800795e:	4770      	bx	lr
 8007960:	2000000c 	.word	0x2000000c

08007964 <quorem>:
 8007964:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007968:	6903      	ldr	r3, [r0, #16]
 800796a:	690c      	ldr	r4, [r1, #16]
 800796c:	42a3      	cmp	r3, r4
 800796e:	4607      	mov	r7, r0
 8007970:	f2c0 8081 	blt.w	8007a76 <quorem+0x112>
 8007974:	3c01      	subs	r4, #1
 8007976:	f101 0814 	add.w	r8, r1, #20
 800797a:	f100 0514 	add.w	r5, r0, #20
 800797e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007982:	9301      	str	r3, [sp, #4]
 8007984:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007988:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800798c:	3301      	adds	r3, #1
 800798e:	429a      	cmp	r2, r3
 8007990:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007994:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007998:	fbb2 f6f3 	udiv	r6, r2, r3
 800799c:	d331      	bcc.n	8007a02 <quorem+0x9e>
 800799e:	f04f 0e00 	mov.w	lr, #0
 80079a2:	4640      	mov	r0, r8
 80079a4:	46ac      	mov	ip, r5
 80079a6:	46f2      	mov	sl, lr
 80079a8:	f850 2b04 	ldr.w	r2, [r0], #4
 80079ac:	b293      	uxth	r3, r2
 80079ae:	fb06 e303 	mla	r3, r6, r3, lr
 80079b2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80079b6:	b29b      	uxth	r3, r3
 80079b8:	ebaa 0303 	sub.w	r3, sl, r3
 80079bc:	f8dc a000 	ldr.w	sl, [ip]
 80079c0:	0c12      	lsrs	r2, r2, #16
 80079c2:	fa13 f38a 	uxtah	r3, r3, sl
 80079c6:	fb06 e202 	mla	r2, r6, r2, lr
 80079ca:	9300      	str	r3, [sp, #0]
 80079cc:	9b00      	ldr	r3, [sp, #0]
 80079ce:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80079d2:	b292      	uxth	r2, r2
 80079d4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80079d8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80079dc:	f8bd 3000 	ldrh.w	r3, [sp]
 80079e0:	4581      	cmp	r9, r0
 80079e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80079e6:	f84c 3b04 	str.w	r3, [ip], #4
 80079ea:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80079ee:	d2db      	bcs.n	80079a8 <quorem+0x44>
 80079f0:	f855 300b 	ldr.w	r3, [r5, fp]
 80079f4:	b92b      	cbnz	r3, 8007a02 <quorem+0x9e>
 80079f6:	9b01      	ldr	r3, [sp, #4]
 80079f8:	3b04      	subs	r3, #4
 80079fa:	429d      	cmp	r5, r3
 80079fc:	461a      	mov	r2, r3
 80079fe:	d32e      	bcc.n	8007a5e <quorem+0xfa>
 8007a00:	613c      	str	r4, [r7, #16]
 8007a02:	4638      	mov	r0, r7
 8007a04:	f001 f9c0 	bl	8008d88 <__mcmp>
 8007a08:	2800      	cmp	r0, #0
 8007a0a:	db24      	blt.n	8007a56 <quorem+0xf2>
 8007a0c:	3601      	adds	r6, #1
 8007a0e:	4628      	mov	r0, r5
 8007a10:	f04f 0c00 	mov.w	ip, #0
 8007a14:	f858 2b04 	ldr.w	r2, [r8], #4
 8007a18:	f8d0 e000 	ldr.w	lr, [r0]
 8007a1c:	b293      	uxth	r3, r2
 8007a1e:	ebac 0303 	sub.w	r3, ip, r3
 8007a22:	0c12      	lsrs	r2, r2, #16
 8007a24:	fa13 f38e 	uxtah	r3, r3, lr
 8007a28:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007a2c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007a30:	b29b      	uxth	r3, r3
 8007a32:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007a36:	45c1      	cmp	r9, r8
 8007a38:	f840 3b04 	str.w	r3, [r0], #4
 8007a3c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007a40:	d2e8      	bcs.n	8007a14 <quorem+0xb0>
 8007a42:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007a46:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007a4a:	b922      	cbnz	r2, 8007a56 <quorem+0xf2>
 8007a4c:	3b04      	subs	r3, #4
 8007a4e:	429d      	cmp	r5, r3
 8007a50:	461a      	mov	r2, r3
 8007a52:	d30a      	bcc.n	8007a6a <quorem+0x106>
 8007a54:	613c      	str	r4, [r7, #16]
 8007a56:	4630      	mov	r0, r6
 8007a58:	b003      	add	sp, #12
 8007a5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a5e:	6812      	ldr	r2, [r2, #0]
 8007a60:	3b04      	subs	r3, #4
 8007a62:	2a00      	cmp	r2, #0
 8007a64:	d1cc      	bne.n	8007a00 <quorem+0x9c>
 8007a66:	3c01      	subs	r4, #1
 8007a68:	e7c7      	b.n	80079fa <quorem+0x96>
 8007a6a:	6812      	ldr	r2, [r2, #0]
 8007a6c:	3b04      	subs	r3, #4
 8007a6e:	2a00      	cmp	r2, #0
 8007a70:	d1f0      	bne.n	8007a54 <quorem+0xf0>
 8007a72:	3c01      	subs	r4, #1
 8007a74:	e7eb      	b.n	8007a4e <quorem+0xea>
 8007a76:	2000      	movs	r0, #0
 8007a78:	e7ee      	b.n	8007a58 <quorem+0xf4>
 8007a7a:	0000      	movs	r0, r0
 8007a7c:	0000      	movs	r0, r0
	...

08007a80 <_dtoa_r>:
 8007a80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a84:	ed2d 8b04 	vpush	{d8-d9}
 8007a88:	ec57 6b10 	vmov	r6, r7, d0
 8007a8c:	b093      	sub	sp, #76	; 0x4c
 8007a8e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007a90:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007a94:	9106      	str	r1, [sp, #24]
 8007a96:	ee10 aa10 	vmov	sl, s0
 8007a9a:	4604      	mov	r4, r0
 8007a9c:	9209      	str	r2, [sp, #36]	; 0x24
 8007a9e:	930c      	str	r3, [sp, #48]	; 0x30
 8007aa0:	46bb      	mov	fp, r7
 8007aa2:	b975      	cbnz	r5, 8007ac2 <_dtoa_r+0x42>
 8007aa4:	2010      	movs	r0, #16
 8007aa6:	f000 fed7 	bl	8008858 <malloc>
 8007aaa:	4602      	mov	r2, r0
 8007aac:	6260      	str	r0, [r4, #36]	; 0x24
 8007aae:	b920      	cbnz	r0, 8007aba <_dtoa_r+0x3a>
 8007ab0:	4ba7      	ldr	r3, [pc, #668]	; (8007d50 <_dtoa_r+0x2d0>)
 8007ab2:	21ea      	movs	r1, #234	; 0xea
 8007ab4:	48a7      	ldr	r0, [pc, #668]	; (8007d54 <_dtoa_r+0x2d4>)
 8007ab6:	f001 fddf 	bl	8009678 <__assert_func>
 8007aba:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007abe:	6005      	str	r5, [r0, #0]
 8007ac0:	60c5      	str	r5, [r0, #12]
 8007ac2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007ac4:	6819      	ldr	r1, [r3, #0]
 8007ac6:	b151      	cbz	r1, 8007ade <_dtoa_r+0x5e>
 8007ac8:	685a      	ldr	r2, [r3, #4]
 8007aca:	604a      	str	r2, [r1, #4]
 8007acc:	2301      	movs	r3, #1
 8007ace:	4093      	lsls	r3, r2
 8007ad0:	608b      	str	r3, [r1, #8]
 8007ad2:	4620      	mov	r0, r4
 8007ad4:	f000 ff16 	bl	8008904 <_Bfree>
 8007ad8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007ada:	2200      	movs	r2, #0
 8007adc:	601a      	str	r2, [r3, #0]
 8007ade:	1e3b      	subs	r3, r7, #0
 8007ae0:	bfaa      	itet	ge
 8007ae2:	2300      	movge	r3, #0
 8007ae4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8007ae8:	f8c8 3000 	strge.w	r3, [r8]
 8007aec:	4b9a      	ldr	r3, [pc, #616]	; (8007d58 <_dtoa_r+0x2d8>)
 8007aee:	bfbc      	itt	lt
 8007af0:	2201      	movlt	r2, #1
 8007af2:	f8c8 2000 	strlt.w	r2, [r8]
 8007af6:	ea33 030b 	bics.w	r3, r3, fp
 8007afa:	d11b      	bne.n	8007b34 <_dtoa_r+0xb4>
 8007afc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007afe:	f242 730f 	movw	r3, #9999	; 0x270f
 8007b02:	6013      	str	r3, [r2, #0]
 8007b04:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007b08:	4333      	orrs	r3, r6
 8007b0a:	f000 8592 	beq.w	8008632 <_dtoa_r+0xbb2>
 8007b0e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007b10:	b963      	cbnz	r3, 8007b2c <_dtoa_r+0xac>
 8007b12:	4b92      	ldr	r3, [pc, #584]	; (8007d5c <_dtoa_r+0x2dc>)
 8007b14:	e022      	b.n	8007b5c <_dtoa_r+0xdc>
 8007b16:	4b92      	ldr	r3, [pc, #584]	; (8007d60 <_dtoa_r+0x2e0>)
 8007b18:	9301      	str	r3, [sp, #4]
 8007b1a:	3308      	adds	r3, #8
 8007b1c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007b1e:	6013      	str	r3, [r2, #0]
 8007b20:	9801      	ldr	r0, [sp, #4]
 8007b22:	b013      	add	sp, #76	; 0x4c
 8007b24:	ecbd 8b04 	vpop	{d8-d9}
 8007b28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b2c:	4b8b      	ldr	r3, [pc, #556]	; (8007d5c <_dtoa_r+0x2dc>)
 8007b2e:	9301      	str	r3, [sp, #4]
 8007b30:	3303      	adds	r3, #3
 8007b32:	e7f3      	b.n	8007b1c <_dtoa_r+0x9c>
 8007b34:	2200      	movs	r2, #0
 8007b36:	2300      	movs	r3, #0
 8007b38:	4650      	mov	r0, sl
 8007b3a:	4659      	mov	r1, fp
 8007b3c:	f7f8 ffe4 	bl	8000b08 <__aeabi_dcmpeq>
 8007b40:	ec4b ab19 	vmov	d9, sl, fp
 8007b44:	4680      	mov	r8, r0
 8007b46:	b158      	cbz	r0, 8007b60 <_dtoa_r+0xe0>
 8007b48:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007b4a:	2301      	movs	r3, #1
 8007b4c:	6013      	str	r3, [r2, #0]
 8007b4e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	f000 856b 	beq.w	800862c <_dtoa_r+0xbac>
 8007b56:	4883      	ldr	r0, [pc, #524]	; (8007d64 <_dtoa_r+0x2e4>)
 8007b58:	6018      	str	r0, [r3, #0]
 8007b5a:	1e43      	subs	r3, r0, #1
 8007b5c:	9301      	str	r3, [sp, #4]
 8007b5e:	e7df      	b.n	8007b20 <_dtoa_r+0xa0>
 8007b60:	ec4b ab10 	vmov	d0, sl, fp
 8007b64:	aa10      	add	r2, sp, #64	; 0x40
 8007b66:	a911      	add	r1, sp, #68	; 0x44
 8007b68:	4620      	mov	r0, r4
 8007b6a:	f001 f9b3 	bl	8008ed4 <__d2b>
 8007b6e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8007b72:	ee08 0a10 	vmov	s16, r0
 8007b76:	2d00      	cmp	r5, #0
 8007b78:	f000 8084 	beq.w	8007c84 <_dtoa_r+0x204>
 8007b7c:	ee19 3a90 	vmov	r3, s19
 8007b80:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007b84:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8007b88:	4656      	mov	r6, sl
 8007b8a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8007b8e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007b92:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8007b96:	4b74      	ldr	r3, [pc, #464]	; (8007d68 <_dtoa_r+0x2e8>)
 8007b98:	2200      	movs	r2, #0
 8007b9a:	4630      	mov	r0, r6
 8007b9c:	4639      	mov	r1, r7
 8007b9e:	f7f8 fb93 	bl	80002c8 <__aeabi_dsub>
 8007ba2:	a365      	add	r3, pc, #404	; (adr r3, 8007d38 <_dtoa_r+0x2b8>)
 8007ba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ba8:	f7f8 fd46 	bl	8000638 <__aeabi_dmul>
 8007bac:	a364      	add	r3, pc, #400	; (adr r3, 8007d40 <_dtoa_r+0x2c0>)
 8007bae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bb2:	f7f8 fb8b 	bl	80002cc <__adddf3>
 8007bb6:	4606      	mov	r6, r0
 8007bb8:	4628      	mov	r0, r5
 8007bba:	460f      	mov	r7, r1
 8007bbc:	f7f8 fcd2 	bl	8000564 <__aeabi_i2d>
 8007bc0:	a361      	add	r3, pc, #388	; (adr r3, 8007d48 <_dtoa_r+0x2c8>)
 8007bc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bc6:	f7f8 fd37 	bl	8000638 <__aeabi_dmul>
 8007bca:	4602      	mov	r2, r0
 8007bcc:	460b      	mov	r3, r1
 8007bce:	4630      	mov	r0, r6
 8007bd0:	4639      	mov	r1, r7
 8007bd2:	f7f8 fb7b 	bl	80002cc <__adddf3>
 8007bd6:	4606      	mov	r6, r0
 8007bd8:	460f      	mov	r7, r1
 8007bda:	f7f8 ffdd 	bl	8000b98 <__aeabi_d2iz>
 8007bde:	2200      	movs	r2, #0
 8007be0:	9000      	str	r0, [sp, #0]
 8007be2:	2300      	movs	r3, #0
 8007be4:	4630      	mov	r0, r6
 8007be6:	4639      	mov	r1, r7
 8007be8:	f7f8 ff98 	bl	8000b1c <__aeabi_dcmplt>
 8007bec:	b150      	cbz	r0, 8007c04 <_dtoa_r+0x184>
 8007bee:	9800      	ldr	r0, [sp, #0]
 8007bf0:	f7f8 fcb8 	bl	8000564 <__aeabi_i2d>
 8007bf4:	4632      	mov	r2, r6
 8007bf6:	463b      	mov	r3, r7
 8007bf8:	f7f8 ff86 	bl	8000b08 <__aeabi_dcmpeq>
 8007bfc:	b910      	cbnz	r0, 8007c04 <_dtoa_r+0x184>
 8007bfe:	9b00      	ldr	r3, [sp, #0]
 8007c00:	3b01      	subs	r3, #1
 8007c02:	9300      	str	r3, [sp, #0]
 8007c04:	9b00      	ldr	r3, [sp, #0]
 8007c06:	2b16      	cmp	r3, #22
 8007c08:	d85a      	bhi.n	8007cc0 <_dtoa_r+0x240>
 8007c0a:	9a00      	ldr	r2, [sp, #0]
 8007c0c:	4b57      	ldr	r3, [pc, #348]	; (8007d6c <_dtoa_r+0x2ec>)
 8007c0e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007c12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c16:	ec51 0b19 	vmov	r0, r1, d9
 8007c1a:	f7f8 ff7f 	bl	8000b1c <__aeabi_dcmplt>
 8007c1e:	2800      	cmp	r0, #0
 8007c20:	d050      	beq.n	8007cc4 <_dtoa_r+0x244>
 8007c22:	9b00      	ldr	r3, [sp, #0]
 8007c24:	3b01      	subs	r3, #1
 8007c26:	9300      	str	r3, [sp, #0]
 8007c28:	2300      	movs	r3, #0
 8007c2a:	930b      	str	r3, [sp, #44]	; 0x2c
 8007c2c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007c2e:	1b5d      	subs	r5, r3, r5
 8007c30:	1e6b      	subs	r3, r5, #1
 8007c32:	9305      	str	r3, [sp, #20]
 8007c34:	bf45      	ittet	mi
 8007c36:	f1c5 0301 	rsbmi	r3, r5, #1
 8007c3a:	9304      	strmi	r3, [sp, #16]
 8007c3c:	2300      	movpl	r3, #0
 8007c3e:	2300      	movmi	r3, #0
 8007c40:	bf4c      	ite	mi
 8007c42:	9305      	strmi	r3, [sp, #20]
 8007c44:	9304      	strpl	r3, [sp, #16]
 8007c46:	9b00      	ldr	r3, [sp, #0]
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	db3d      	blt.n	8007cc8 <_dtoa_r+0x248>
 8007c4c:	9b05      	ldr	r3, [sp, #20]
 8007c4e:	9a00      	ldr	r2, [sp, #0]
 8007c50:	920a      	str	r2, [sp, #40]	; 0x28
 8007c52:	4413      	add	r3, r2
 8007c54:	9305      	str	r3, [sp, #20]
 8007c56:	2300      	movs	r3, #0
 8007c58:	9307      	str	r3, [sp, #28]
 8007c5a:	9b06      	ldr	r3, [sp, #24]
 8007c5c:	2b09      	cmp	r3, #9
 8007c5e:	f200 8089 	bhi.w	8007d74 <_dtoa_r+0x2f4>
 8007c62:	2b05      	cmp	r3, #5
 8007c64:	bfc4      	itt	gt
 8007c66:	3b04      	subgt	r3, #4
 8007c68:	9306      	strgt	r3, [sp, #24]
 8007c6a:	9b06      	ldr	r3, [sp, #24]
 8007c6c:	f1a3 0302 	sub.w	r3, r3, #2
 8007c70:	bfcc      	ite	gt
 8007c72:	2500      	movgt	r5, #0
 8007c74:	2501      	movle	r5, #1
 8007c76:	2b03      	cmp	r3, #3
 8007c78:	f200 8087 	bhi.w	8007d8a <_dtoa_r+0x30a>
 8007c7c:	e8df f003 	tbb	[pc, r3]
 8007c80:	59383a2d 	.word	0x59383a2d
 8007c84:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8007c88:	441d      	add	r5, r3
 8007c8a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007c8e:	2b20      	cmp	r3, #32
 8007c90:	bfc1      	itttt	gt
 8007c92:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007c96:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8007c9a:	fa0b f303 	lslgt.w	r3, fp, r3
 8007c9e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007ca2:	bfda      	itte	le
 8007ca4:	f1c3 0320 	rsble	r3, r3, #32
 8007ca8:	fa06 f003 	lslle.w	r0, r6, r3
 8007cac:	4318      	orrgt	r0, r3
 8007cae:	f7f8 fc49 	bl	8000544 <__aeabi_ui2d>
 8007cb2:	2301      	movs	r3, #1
 8007cb4:	4606      	mov	r6, r0
 8007cb6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8007cba:	3d01      	subs	r5, #1
 8007cbc:	930e      	str	r3, [sp, #56]	; 0x38
 8007cbe:	e76a      	b.n	8007b96 <_dtoa_r+0x116>
 8007cc0:	2301      	movs	r3, #1
 8007cc2:	e7b2      	b.n	8007c2a <_dtoa_r+0x1aa>
 8007cc4:	900b      	str	r0, [sp, #44]	; 0x2c
 8007cc6:	e7b1      	b.n	8007c2c <_dtoa_r+0x1ac>
 8007cc8:	9b04      	ldr	r3, [sp, #16]
 8007cca:	9a00      	ldr	r2, [sp, #0]
 8007ccc:	1a9b      	subs	r3, r3, r2
 8007cce:	9304      	str	r3, [sp, #16]
 8007cd0:	4253      	negs	r3, r2
 8007cd2:	9307      	str	r3, [sp, #28]
 8007cd4:	2300      	movs	r3, #0
 8007cd6:	930a      	str	r3, [sp, #40]	; 0x28
 8007cd8:	e7bf      	b.n	8007c5a <_dtoa_r+0x1da>
 8007cda:	2300      	movs	r3, #0
 8007cdc:	9308      	str	r3, [sp, #32]
 8007cde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	dc55      	bgt.n	8007d90 <_dtoa_r+0x310>
 8007ce4:	2301      	movs	r3, #1
 8007ce6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007cea:	461a      	mov	r2, r3
 8007cec:	9209      	str	r2, [sp, #36]	; 0x24
 8007cee:	e00c      	b.n	8007d0a <_dtoa_r+0x28a>
 8007cf0:	2301      	movs	r3, #1
 8007cf2:	e7f3      	b.n	8007cdc <_dtoa_r+0x25c>
 8007cf4:	2300      	movs	r3, #0
 8007cf6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007cf8:	9308      	str	r3, [sp, #32]
 8007cfa:	9b00      	ldr	r3, [sp, #0]
 8007cfc:	4413      	add	r3, r2
 8007cfe:	9302      	str	r3, [sp, #8]
 8007d00:	3301      	adds	r3, #1
 8007d02:	2b01      	cmp	r3, #1
 8007d04:	9303      	str	r3, [sp, #12]
 8007d06:	bfb8      	it	lt
 8007d08:	2301      	movlt	r3, #1
 8007d0a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8007d0c:	2200      	movs	r2, #0
 8007d0e:	6042      	str	r2, [r0, #4]
 8007d10:	2204      	movs	r2, #4
 8007d12:	f102 0614 	add.w	r6, r2, #20
 8007d16:	429e      	cmp	r6, r3
 8007d18:	6841      	ldr	r1, [r0, #4]
 8007d1a:	d93d      	bls.n	8007d98 <_dtoa_r+0x318>
 8007d1c:	4620      	mov	r0, r4
 8007d1e:	f000 fdb1 	bl	8008884 <_Balloc>
 8007d22:	9001      	str	r0, [sp, #4]
 8007d24:	2800      	cmp	r0, #0
 8007d26:	d13b      	bne.n	8007da0 <_dtoa_r+0x320>
 8007d28:	4b11      	ldr	r3, [pc, #68]	; (8007d70 <_dtoa_r+0x2f0>)
 8007d2a:	4602      	mov	r2, r0
 8007d2c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007d30:	e6c0      	b.n	8007ab4 <_dtoa_r+0x34>
 8007d32:	2301      	movs	r3, #1
 8007d34:	e7df      	b.n	8007cf6 <_dtoa_r+0x276>
 8007d36:	bf00      	nop
 8007d38:	636f4361 	.word	0x636f4361
 8007d3c:	3fd287a7 	.word	0x3fd287a7
 8007d40:	8b60c8b3 	.word	0x8b60c8b3
 8007d44:	3fc68a28 	.word	0x3fc68a28
 8007d48:	509f79fb 	.word	0x509f79fb
 8007d4c:	3fd34413 	.word	0x3fd34413
 8007d50:	08009c11 	.word	0x08009c11
 8007d54:	08009c28 	.word	0x08009c28
 8007d58:	7ff00000 	.word	0x7ff00000
 8007d5c:	08009c0d 	.word	0x08009c0d
 8007d60:	08009c04 	.word	0x08009c04
 8007d64:	08009be1 	.word	0x08009be1
 8007d68:	3ff80000 	.word	0x3ff80000
 8007d6c:	08009d78 	.word	0x08009d78
 8007d70:	08009c83 	.word	0x08009c83
 8007d74:	2501      	movs	r5, #1
 8007d76:	2300      	movs	r3, #0
 8007d78:	9306      	str	r3, [sp, #24]
 8007d7a:	9508      	str	r5, [sp, #32]
 8007d7c:	f04f 33ff 	mov.w	r3, #4294967295
 8007d80:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007d84:	2200      	movs	r2, #0
 8007d86:	2312      	movs	r3, #18
 8007d88:	e7b0      	b.n	8007cec <_dtoa_r+0x26c>
 8007d8a:	2301      	movs	r3, #1
 8007d8c:	9308      	str	r3, [sp, #32]
 8007d8e:	e7f5      	b.n	8007d7c <_dtoa_r+0x2fc>
 8007d90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d92:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007d96:	e7b8      	b.n	8007d0a <_dtoa_r+0x28a>
 8007d98:	3101      	adds	r1, #1
 8007d9a:	6041      	str	r1, [r0, #4]
 8007d9c:	0052      	lsls	r2, r2, #1
 8007d9e:	e7b8      	b.n	8007d12 <_dtoa_r+0x292>
 8007da0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007da2:	9a01      	ldr	r2, [sp, #4]
 8007da4:	601a      	str	r2, [r3, #0]
 8007da6:	9b03      	ldr	r3, [sp, #12]
 8007da8:	2b0e      	cmp	r3, #14
 8007daa:	f200 809d 	bhi.w	8007ee8 <_dtoa_r+0x468>
 8007dae:	2d00      	cmp	r5, #0
 8007db0:	f000 809a 	beq.w	8007ee8 <_dtoa_r+0x468>
 8007db4:	9b00      	ldr	r3, [sp, #0]
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	dd32      	ble.n	8007e20 <_dtoa_r+0x3a0>
 8007dba:	4ab7      	ldr	r2, [pc, #732]	; (8008098 <_dtoa_r+0x618>)
 8007dbc:	f003 030f 	and.w	r3, r3, #15
 8007dc0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007dc4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007dc8:	9b00      	ldr	r3, [sp, #0]
 8007dca:	05d8      	lsls	r0, r3, #23
 8007dcc:	ea4f 1723 	mov.w	r7, r3, asr #4
 8007dd0:	d516      	bpl.n	8007e00 <_dtoa_r+0x380>
 8007dd2:	4bb2      	ldr	r3, [pc, #712]	; (800809c <_dtoa_r+0x61c>)
 8007dd4:	ec51 0b19 	vmov	r0, r1, d9
 8007dd8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007ddc:	f7f8 fd56 	bl	800088c <__aeabi_ddiv>
 8007de0:	f007 070f 	and.w	r7, r7, #15
 8007de4:	4682      	mov	sl, r0
 8007de6:	468b      	mov	fp, r1
 8007de8:	2503      	movs	r5, #3
 8007dea:	4eac      	ldr	r6, [pc, #688]	; (800809c <_dtoa_r+0x61c>)
 8007dec:	b957      	cbnz	r7, 8007e04 <_dtoa_r+0x384>
 8007dee:	4642      	mov	r2, r8
 8007df0:	464b      	mov	r3, r9
 8007df2:	4650      	mov	r0, sl
 8007df4:	4659      	mov	r1, fp
 8007df6:	f7f8 fd49 	bl	800088c <__aeabi_ddiv>
 8007dfa:	4682      	mov	sl, r0
 8007dfc:	468b      	mov	fp, r1
 8007dfe:	e028      	b.n	8007e52 <_dtoa_r+0x3d2>
 8007e00:	2502      	movs	r5, #2
 8007e02:	e7f2      	b.n	8007dea <_dtoa_r+0x36a>
 8007e04:	07f9      	lsls	r1, r7, #31
 8007e06:	d508      	bpl.n	8007e1a <_dtoa_r+0x39a>
 8007e08:	4640      	mov	r0, r8
 8007e0a:	4649      	mov	r1, r9
 8007e0c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007e10:	f7f8 fc12 	bl	8000638 <__aeabi_dmul>
 8007e14:	3501      	adds	r5, #1
 8007e16:	4680      	mov	r8, r0
 8007e18:	4689      	mov	r9, r1
 8007e1a:	107f      	asrs	r7, r7, #1
 8007e1c:	3608      	adds	r6, #8
 8007e1e:	e7e5      	b.n	8007dec <_dtoa_r+0x36c>
 8007e20:	f000 809b 	beq.w	8007f5a <_dtoa_r+0x4da>
 8007e24:	9b00      	ldr	r3, [sp, #0]
 8007e26:	4f9d      	ldr	r7, [pc, #628]	; (800809c <_dtoa_r+0x61c>)
 8007e28:	425e      	negs	r6, r3
 8007e2a:	4b9b      	ldr	r3, [pc, #620]	; (8008098 <_dtoa_r+0x618>)
 8007e2c:	f006 020f 	and.w	r2, r6, #15
 8007e30:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007e34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e38:	ec51 0b19 	vmov	r0, r1, d9
 8007e3c:	f7f8 fbfc 	bl	8000638 <__aeabi_dmul>
 8007e40:	1136      	asrs	r6, r6, #4
 8007e42:	4682      	mov	sl, r0
 8007e44:	468b      	mov	fp, r1
 8007e46:	2300      	movs	r3, #0
 8007e48:	2502      	movs	r5, #2
 8007e4a:	2e00      	cmp	r6, #0
 8007e4c:	d17a      	bne.n	8007f44 <_dtoa_r+0x4c4>
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d1d3      	bne.n	8007dfa <_dtoa_r+0x37a>
 8007e52:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	f000 8082 	beq.w	8007f5e <_dtoa_r+0x4de>
 8007e5a:	4b91      	ldr	r3, [pc, #580]	; (80080a0 <_dtoa_r+0x620>)
 8007e5c:	2200      	movs	r2, #0
 8007e5e:	4650      	mov	r0, sl
 8007e60:	4659      	mov	r1, fp
 8007e62:	f7f8 fe5b 	bl	8000b1c <__aeabi_dcmplt>
 8007e66:	2800      	cmp	r0, #0
 8007e68:	d079      	beq.n	8007f5e <_dtoa_r+0x4de>
 8007e6a:	9b03      	ldr	r3, [sp, #12]
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d076      	beq.n	8007f5e <_dtoa_r+0x4de>
 8007e70:	9b02      	ldr	r3, [sp, #8]
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	dd36      	ble.n	8007ee4 <_dtoa_r+0x464>
 8007e76:	9b00      	ldr	r3, [sp, #0]
 8007e78:	4650      	mov	r0, sl
 8007e7a:	4659      	mov	r1, fp
 8007e7c:	1e5f      	subs	r7, r3, #1
 8007e7e:	2200      	movs	r2, #0
 8007e80:	4b88      	ldr	r3, [pc, #544]	; (80080a4 <_dtoa_r+0x624>)
 8007e82:	f7f8 fbd9 	bl	8000638 <__aeabi_dmul>
 8007e86:	9e02      	ldr	r6, [sp, #8]
 8007e88:	4682      	mov	sl, r0
 8007e8a:	468b      	mov	fp, r1
 8007e8c:	3501      	adds	r5, #1
 8007e8e:	4628      	mov	r0, r5
 8007e90:	f7f8 fb68 	bl	8000564 <__aeabi_i2d>
 8007e94:	4652      	mov	r2, sl
 8007e96:	465b      	mov	r3, fp
 8007e98:	f7f8 fbce 	bl	8000638 <__aeabi_dmul>
 8007e9c:	4b82      	ldr	r3, [pc, #520]	; (80080a8 <_dtoa_r+0x628>)
 8007e9e:	2200      	movs	r2, #0
 8007ea0:	f7f8 fa14 	bl	80002cc <__adddf3>
 8007ea4:	46d0      	mov	r8, sl
 8007ea6:	46d9      	mov	r9, fp
 8007ea8:	4682      	mov	sl, r0
 8007eaa:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8007eae:	2e00      	cmp	r6, #0
 8007eb0:	d158      	bne.n	8007f64 <_dtoa_r+0x4e4>
 8007eb2:	4b7e      	ldr	r3, [pc, #504]	; (80080ac <_dtoa_r+0x62c>)
 8007eb4:	2200      	movs	r2, #0
 8007eb6:	4640      	mov	r0, r8
 8007eb8:	4649      	mov	r1, r9
 8007eba:	f7f8 fa05 	bl	80002c8 <__aeabi_dsub>
 8007ebe:	4652      	mov	r2, sl
 8007ec0:	465b      	mov	r3, fp
 8007ec2:	4680      	mov	r8, r0
 8007ec4:	4689      	mov	r9, r1
 8007ec6:	f7f8 fe47 	bl	8000b58 <__aeabi_dcmpgt>
 8007eca:	2800      	cmp	r0, #0
 8007ecc:	f040 8295 	bne.w	80083fa <_dtoa_r+0x97a>
 8007ed0:	4652      	mov	r2, sl
 8007ed2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8007ed6:	4640      	mov	r0, r8
 8007ed8:	4649      	mov	r1, r9
 8007eda:	f7f8 fe1f 	bl	8000b1c <__aeabi_dcmplt>
 8007ede:	2800      	cmp	r0, #0
 8007ee0:	f040 8289 	bne.w	80083f6 <_dtoa_r+0x976>
 8007ee4:	ec5b ab19 	vmov	sl, fp, d9
 8007ee8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	f2c0 8148 	blt.w	8008180 <_dtoa_r+0x700>
 8007ef0:	9a00      	ldr	r2, [sp, #0]
 8007ef2:	2a0e      	cmp	r2, #14
 8007ef4:	f300 8144 	bgt.w	8008180 <_dtoa_r+0x700>
 8007ef8:	4b67      	ldr	r3, [pc, #412]	; (8008098 <_dtoa_r+0x618>)
 8007efa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007efe:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007f02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	f280 80d5 	bge.w	80080b4 <_dtoa_r+0x634>
 8007f0a:	9b03      	ldr	r3, [sp, #12]
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	f300 80d1 	bgt.w	80080b4 <_dtoa_r+0x634>
 8007f12:	f040 826f 	bne.w	80083f4 <_dtoa_r+0x974>
 8007f16:	4b65      	ldr	r3, [pc, #404]	; (80080ac <_dtoa_r+0x62c>)
 8007f18:	2200      	movs	r2, #0
 8007f1a:	4640      	mov	r0, r8
 8007f1c:	4649      	mov	r1, r9
 8007f1e:	f7f8 fb8b 	bl	8000638 <__aeabi_dmul>
 8007f22:	4652      	mov	r2, sl
 8007f24:	465b      	mov	r3, fp
 8007f26:	f7f8 fe0d 	bl	8000b44 <__aeabi_dcmpge>
 8007f2a:	9e03      	ldr	r6, [sp, #12]
 8007f2c:	4637      	mov	r7, r6
 8007f2e:	2800      	cmp	r0, #0
 8007f30:	f040 8245 	bne.w	80083be <_dtoa_r+0x93e>
 8007f34:	9d01      	ldr	r5, [sp, #4]
 8007f36:	2331      	movs	r3, #49	; 0x31
 8007f38:	f805 3b01 	strb.w	r3, [r5], #1
 8007f3c:	9b00      	ldr	r3, [sp, #0]
 8007f3e:	3301      	adds	r3, #1
 8007f40:	9300      	str	r3, [sp, #0]
 8007f42:	e240      	b.n	80083c6 <_dtoa_r+0x946>
 8007f44:	07f2      	lsls	r2, r6, #31
 8007f46:	d505      	bpl.n	8007f54 <_dtoa_r+0x4d4>
 8007f48:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007f4c:	f7f8 fb74 	bl	8000638 <__aeabi_dmul>
 8007f50:	3501      	adds	r5, #1
 8007f52:	2301      	movs	r3, #1
 8007f54:	1076      	asrs	r6, r6, #1
 8007f56:	3708      	adds	r7, #8
 8007f58:	e777      	b.n	8007e4a <_dtoa_r+0x3ca>
 8007f5a:	2502      	movs	r5, #2
 8007f5c:	e779      	b.n	8007e52 <_dtoa_r+0x3d2>
 8007f5e:	9f00      	ldr	r7, [sp, #0]
 8007f60:	9e03      	ldr	r6, [sp, #12]
 8007f62:	e794      	b.n	8007e8e <_dtoa_r+0x40e>
 8007f64:	9901      	ldr	r1, [sp, #4]
 8007f66:	4b4c      	ldr	r3, [pc, #304]	; (8008098 <_dtoa_r+0x618>)
 8007f68:	4431      	add	r1, r6
 8007f6a:	910d      	str	r1, [sp, #52]	; 0x34
 8007f6c:	9908      	ldr	r1, [sp, #32]
 8007f6e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007f72:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007f76:	2900      	cmp	r1, #0
 8007f78:	d043      	beq.n	8008002 <_dtoa_r+0x582>
 8007f7a:	494d      	ldr	r1, [pc, #308]	; (80080b0 <_dtoa_r+0x630>)
 8007f7c:	2000      	movs	r0, #0
 8007f7e:	f7f8 fc85 	bl	800088c <__aeabi_ddiv>
 8007f82:	4652      	mov	r2, sl
 8007f84:	465b      	mov	r3, fp
 8007f86:	f7f8 f99f 	bl	80002c8 <__aeabi_dsub>
 8007f8a:	9d01      	ldr	r5, [sp, #4]
 8007f8c:	4682      	mov	sl, r0
 8007f8e:	468b      	mov	fp, r1
 8007f90:	4649      	mov	r1, r9
 8007f92:	4640      	mov	r0, r8
 8007f94:	f7f8 fe00 	bl	8000b98 <__aeabi_d2iz>
 8007f98:	4606      	mov	r6, r0
 8007f9a:	f7f8 fae3 	bl	8000564 <__aeabi_i2d>
 8007f9e:	4602      	mov	r2, r0
 8007fa0:	460b      	mov	r3, r1
 8007fa2:	4640      	mov	r0, r8
 8007fa4:	4649      	mov	r1, r9
 8007fa6:	f7f8 f98f 	bl	80002c8 <__aeabi_dsub>
 8007faa:	3630      	adds	r6, #48	; 0x30
 8007fac:	f805 6b01 	strb.w	r6, [r5], #1
 8007fb0:	4652      	mov	r2, sl
 8007fb2:	465b      	mov	r3, fp
 8007fb4:	4680      	mov	r8, r0
 8007fb6:	4689      	mov	r9, r1
 8007fb8:	f7f8 fdb0 	bl	8000b1c <__aeabi_dcmplt>
 8007fbc:	2800      	cmp	r0, #0
 8007fbe:	d163      	bne.n	8008088 <_dtoa_r+0x608>
 8007fc0:	4642      	mov	r2, r8
 8007fc2:	464b      	mov	r3, r9
 8007fc4:	4936      	ldr	r1, [pc, #216]	; (80080a0 <_dtoa_r+0x620>)
 8007fc6:	2000      	movs	r0, #0
 8007fc8:	f7f8 f97e 	bl	80002c8 <__aeabi_dsub>
 8007fcc:	4652      	mov	r2, sl
 8007fce:	465b      	mov	r3, fp
 8007fd0:	f7f8 fda4 	bl	8000b1c <__aeabi_dcmplt>
 8007fd4:	2800      	cmp	r0, #0
 8007fd6:	f040 80b5 	bne.w	8008144 <_dtoa_r+0x6c4>
 8007fda:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007fdc:	429d      	cmp	r5, r3
 8007fde:	d081      	beq.n	8007ee4 <_dtoa_r+0x464>
 8007fe0:	4b30      	ldr	r3, [pc, #192]	; (80080a4 <_dtoa_r+0x624>)
 8007fe2:	2200      	movs	r2, #0
 8007fe4:	4650      	mov	r0, sl
 8007fe6:	4659      	mov	r1, fp
 8007fe8:	f7f8 fb26 	bl	8000638 <__aeabi_dmul>
 8007fec:	4b2d      	ldr	r3, [pc, #180]	; (80080a4 <_dtoa_r+0x624>)
 8007fee:	4682      	mov	sl, r0
 8007ff0:	468b      	mov	fp, r1
 8007ff2:	4640      	mov	r0, r8
 8007ff4:	4649      	mov	r1, r9
 8007ff6:	2200      	movs	r2, #0
 8007ff8:	f7f8 fb1e 	bl	8000638 <__aeabi_dmul>
 8007ffc:	4680      	mov	r8, r0
 8007ffe:	4689      	mov	r9, r1
 8008000:	e7c6      	b.n	8007f90 <_dtoa_r+0x510>
 8008002:	4650      	mov	r0, sl
 8008004:	4659      	mov	r1, fp
 8008006:	f7f8 fb17 	bl	8000638 <__aeabi_dmul>
 800800a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800800c:	9d01      	ldr	r5, [sp, #4]
 800800e:	930f      	str	r3, [sp, #60]	; 0x3c
 8008010:	4682      	mov	sl, r0
 8008012:	468b      	mov	fp, r1
 8008014:	4649      	mov	r1, r9
 8008016:	4640      	mov	r0, r8
 8008018:	f7f8 fdbe 	bl	8000b98 <__aeabi_d2iz>
 800801c:	4606      	mov	r6, r0
 800801e:	f7f8 faa1 	bl	8000564 <__aeabi_i2d>
 8008022:	3630      	adds	r6, #48	; 0x30
 8008024:	4602      	mov	r2, r0
 8008026:	460b      	mov	r3, r1
 8008028:	4640      	mov	r0, r8
 800802a:	4649      	mov	r1, r9
 800802c:	f7f8 f94c 	bl	80002c8 <__aeabi_dsub>
 8008030:	f805 6b01 	strb.w	r6, [r5], #1
 8008034:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008036:	429d      	cmp	r5, r3
 8008038:	4680      	mov	r8, r0
 800803a:	4689      	mov	r9, r1
 800803c:	f04f 0200 	mov.w	r2, #0
 8008040:	d124      	bne.n	800808c <_dtoa_r+0x60c>
 8008042:	4b1b      	ldr	r3, [pc, #108]	; (80080b0 <_dtoa_r+0x630>)
 8008044:	4650      	mov	r0, sl
 8008046:	4659      	mov	r1, fp
 8008048:	f7f8 f940 	bl	80002cc <__adddf3>
 800804c:	4602      	mov	r2, r0
 800804e:	460b      	mov	r3, r1
 8008050:	4640      	mov	r0, r8
 8008052:	4649      	mov	r1, r9
 8008054:	f7f8 fd80 	bl	8000b58 <__aeabi_dcmpgt>
 8008058:	2800      	cmp	r0, #0
 800805a:	d173      	bne.n	8008144 <_dtoa_r+0x6c4>
 800805c:	4652      	mov	r2, sl
 800805e:	465b      	mov	r3, fp
 8008060:	4913      	ldr	r1, [pc, #76]	; (80080b0 <_dtoa_r+0x630>)
 8008062:	2000      	movs	r0, #0
 8008064:	f7f8 f930 	bl	80002c8 <__aeabi_dsub>
 8008068:	4602      	mov	r2, r0
 800806a:	460b      	mov	r3, r1
 800806c:	4640      	mov	r0, r8
 800806e:	4649      	mov	r1, r9
 8008070:	f7f8 fd54 	bl	8000b1c <__aeabi_dcmplt>
 8008074:	2800      	cmp	r0, #0
 8008076:	f43f af35 	beq.w	8007ee4 <_dtoa_r+0x464>
 800807a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800807c:	1e6b      	subs	r3, r5, #1
 800807e:	930f      	str	r3, [sp, #60]	; 0x3c
 8008080:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008084:	2b30      	cmp	r3, #48	; 0x30
 8008086:	d0f8      	beq.n	800807a <_dtoa_r+0x5fa>
 8008088:	9700      	str	r7, [sp, #0]
 800808a:	e049      	b.n	8008120 <_dtoa_r+0x6a0>
 800808c:	4b05      	ldr	r3, [pc, #20]	; (80080a4 <_dtoa_r+0x624>)
 800808e:	f7f8 fad3 	bl	8000638 <__aeabi_dmul>
 8008092:	4680      	mov	r8, r0
 8008094:	4689      	mov	r9, r1
 8008096:	e7bd      	b.n	8008014 <_dtoa_r+0x594>
 8008098:	08009d78 	.word	0x08009d78
 800809c:	08009d50 	.word	0x08009d50
 80080a0:	3ff00000 	.word	0x3ff00000
 80080a4:	40240000 	.word	0x40240000
 80080a8:	401c0000 	.word	0x401c0000
 80080ac:	40140000 	.word	0x40140000
 80080b0:	3fe00000 	.word	0x3fe00000
 80080b4:	9d01      	ldr	r5, [sp, #4]
 80080b6:	4656      	mov	r6, sl
 80080b8:	465f      	mov	r7, fp
 80080ba:	4642      	mov	r2, r8
 80080bc:	464b      	mov	r3, r9
 80080be:	4630      	mov	r0, r6
 80080c0:	4639      	mov	r1, r7
 80080c2:	f7f8 fbe3 	bl	800088c <__aeabi_ddiv>
 80080c6:	f7f8 fd67 	bl	8000b98 <__aeabi_d2iz>
 80080ca:	4682      	mov	sl, r0
 80080cc:	f7f8 fa4a 	bl	8000564 <__aeabi_i2d>
 80080d0:	4642      	mov	r2, r8
 80080d2:	464b      	mov	r3, r9
 80080d4:	f7f8 fab0 	bl	8000638 <__aeabi_dmul>
 80080d8:	4602      	mov	r2, r0
 80080da:	460b      	mov	r3, r1
 80080dc:	4630      	mov	r0, r6
 80080de:	4639      	mov	r1, r7
 80080e0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80080e4:	f7f8 f8f0 	bl	80002c8 <__aeabi_dsub>
 80080e8:	f805 6b01 	strb.w	r6, [r5], #1
 80080ec:	9e01      	ldr	r6, [sp, #4]
 80080ee:	9f03      	ldr	r7, [sp, #12]
 80080f0:	1bae      	subs	r6, r5, r6
 80080f2:	42b7      	cmp	r7, r6
 80080f4:	4602      	mov	r2, r0
 80080f6:	460b      	mov	r3, r1
 80080f8:	d135      	bne.n	8008166 <_dtoa_r+0x6e6>
 80080fa:	f7f8 f8e7 	bl	80002cc <__adddf3>
 80080fe:	4642      	mov	r2, r8
 8008100:	464b      	mov	r3, r9
 8008102:	4606      	mov	r6, r0
 8008104:	460f      	mov	r7, r1
 8008106:	f7f8 fd27 	bl	8000b58 <__aeabi_dcmpgt>
 800810a:	b9d0      	cbnz	r0, 8008142 <_dtoa_r+0x6c2>
 800810c:	4642      	mov	r2, r8
 800810e:	464b      	mov	r3, r9
 8008110:	4630      	mov	r0, r6
 8008112:	4639      	mov	r1, r7
 8008114:	f7f8 fcf8 	bl	8000b08 <__aeabi_dcmpeq>
 8008118:	b110      	cbz	r0, 8008120 <_dtoa_r+0x6a0>
 800811a:	f01a 0f01 	tst.w	sl, #1
 800811e:	d110      	bne.n	8008142 <_dtoa_r+0x6c2>
 8008120:	4620      	mov	r0, r4
 8008122:	ee18 1a10 	vmov	r1, s16
 8008126:	f000 fbed 	bl	8008904 <_Bfree>
 800812a:	2300      	movs	r3, #0
 800812c:	9800      	ldr	r0, [sp, #0]
 800812e:	702b      	strb	r3, [r5, #0]
 8008130:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008132:	3001      	adds	r0, #1
 8008134:	6018      	str	r0, [r3, #0]
 8008136:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008138:	2b00      	cmp	r3, #0
 800813a:	f43f acf1 	beq.w	8007b20 <_dtoa_r+0xa0>
 800813e:	601d      	str	r5, [r3, #0]
 8008140:	e4ee      	b.n	8007b20 <_dtoa_r+0xa0>
 8008142:	9f00      	ldr	r7, [sp, #0]
 8008144:	462b      	mov	r3, r5
 8008146:	461d      	mov	r5, r3
 8008148:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800814c:	2a39      	cmp	r2, #57	; 0x39
 800814e:	d106      	bne.n	800815e <_dtoa_r+0x6de>
 8008150:	9a01      	ldr	r2, [sp, #4]
 8008152:	429a      	cmp	r2, r3
 8008154:	d1f7      	bne.n	8008146 <_dtoa_r+0x6c6>
 8008156:	9901      	ldr	r1, [sp, #4]
 8008158:	2230      	movs	r2, #48	; 0x30
 800815a:	3701      	adds	r7, #1
 800815c:	700a      	strb	r2, [r1, #0]
 800815e:	781a      	ldrb	r2, [r3, #0]
 8008160:	3201      	adds	r2, #1
 8008162:	701a      	strb	r2, [r3, #0]
 8008164:	e790      	b.n	8008088 <_dtoa_r+0x608>
 8008166:	4ba6      	ldr	r3, [pc, #664]	; (8008400 <_dtoa_r+0x980>)
 8008168:	2200      	movs	r2, #0
 800816a:	f7f8 fa65 	bl	8000638 <__aeabi_dmul>
 800816e:	2200      	movs	r2, #0
 8008170:	2300      	movs	r3, #0
 8008172:	4606      	mov	r6, r0
 8008174:	460f      	mov	r7, r1
 8008176:	f7f8 fcc7 	bl	8000b08 <__aeabi_dcmpeq>
 800817a:	2800      	cmp	r0, #0
 800817c:	d09d      	beq.n	80080ba <_dtoa_r+0x63a>
 800817e:	e7cf      	b.n	8008120 <_dtoa_r+0x6a0>
 8008180:	9a08      	ldr	r2, [sp, #32]
 8008182:	2a00      	cmp	r2, #0
 8008184:	f000 80d7 	beq.w	8008336 <_dtoa_r+0x8b6>
 8008188:	9a06      	ldr	r2, [sp, #24]
 800818a:	2a01      	cmp	r2, #1
 800818c:	f300 80ba 	bgt.w	8008304 <_dtoa_r+0x884>
 8008190:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008192:	2a00      	cmp	r2, #0
 8008194:	f000 80b2 	beq.w	80082fc <_dtoa_r+0x87c>
 8008198:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800819c:	9e07      	ldr	r6, [sp, #28]
 800819e:	9d04      	ldr	r5, [sp, #16]
 80081a0:	9a04      	ldr	r2, [sp, #16]
 80081a2:	441a      	add	r2, r3
 80081a4:	9204      	str	r2, [sp, #16]
 80081a6:	9a05      	ldr	r2, [sp, #20]
 80081a8:	2101      	movs	r1, #1
 80081aa:	441a      	add	r2, r3
 80081ac:	4620      	mov	r0, r4
 80081ae:	9205      	str	r2, [sp, #20]
 80081b0:	f000 fc60 	bl	8008a74 <__i2b>
 80081b4:	4607      	mov	r7, r0
 80081b6:	2d00      	cmp	r5, #0
 80081b8:	dd0c      	ble.n	80081d4 <_dtoa_r+0x754>
 80081ba:	9b05      	ldr	r3, [sp, #20]
 80081bc:	2b00      	cmp	r3, #0
 80081be:	dd09      	ble.n	80081d4 <_dtoa_r+0x754>
 80081c0:	42ab      	cmp	r3, r5
 80081c2:	9a04      	ldr	r2, [sp, #16]
 80081c4:	bfa8      	it	ge
 80081c6:	462b      	movge	r3, r5
 80081c8:	1ad2      	subs	r2, r2, r3
 80081ca:	9204      	str	r2, [sp, #16]
 80081cc:	9a05      	ldr	r2, [sp, #20]
 80081ce:	1aed      	subs	r5, r5, r3
 80081d0:	1ad3      	subs	r3, r2, r3
 80081d2:	9305      	str	r3, [sp, #20]
 80081d4:	9b07      	ldr	r3, [sp, #28]
 80081d6:	b31b      	cbz	r3, 8008220 <_dtoa_r+0x7a0>
 80081d8:	9b08      	ldr	r3, [sp, #32]
 80081da:	2b00      	cmp	r3, #0
 80081dc:	f000 80af 	beq.w	800833e <_dtoa_r+0x8be>
 80081e0:	2e00      	cmp	r6, #0
 80081e2:	dd13      	ble.n	800820c <_dtoa_r+0x78c>
 80081e4:	4639      	mov	r1, r7
 80081e6:	4632      	mov	r2, r6
 80081e8:	4620      	mov	r0, r4
 80081ea:	f000 fd03 	bl	8008bf4 <__pow5mult>
 80081ee:	ee18 2a10 	vmov	r2, s16
 80081f2:	4601      	mov	r1, r0
 80081f4:	4607      	mov	r7, r0
 80081f6:	4620      	mov	r0, r4
 80081f8:	f000 fc52 	bl	8008aa0 <__multiply>
 80081fc:	ee18 1a10 	vmov	r1, s16
 8008200:	4680      	mov	r8, r0
 8008202:	4620      	mov	r0, r4
 8008204:	f000 fb7e 	bl	8008904 <_Bfree>
 8008208:	ee08 8a10 	vmov	s16, r8
 800820c:	9b07      	ldr	r3, [sp, #28]
 800820e:	1b9a      	subs	r2, r3, r6
 8008210:	d006      	beq.n	8008220 <_dtoa_r+0x7a0>
 8008212:	ee18 1a10 	vmov	r1, s16
 8008216:	4620      	mov	r0, r4
 8008218:	f000 fcec 	bl	8008bf4 <__pow5mult>
 800821c:	ee08 0a10 	vmov	s16, r0
 8008220:	2101      	movs	r1, #1
 8008222:	4620      	mov	r0, r4
 8008224:	f000 fc26 	bl	8008a74 <__i2b>
 8008228:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800822a:	2b00      	cmp	r3, #0
 800822c:	4606      	mov	r6, r0
 800822e:	f340 8088 	ble.w	8008342 <_dtoa_r+0x8c2>
 8008232:	461a      	mov	r2, r3
 8008234:	4601      	mov	r1, r0
 8008236:	4620      	mov	r0, r4
 8008238:	f000 fcdc 	bl	8008bf4 <__pow5mult>
 800823c:	9b06      	ldr	r3, [sp, #24]
 800823e:	2b01      	cmp	r3, #1
 8008240:	4606      	mov	r6, r0
 8008242:	f340 8081 	ble.w	8008348 <_dtoa_r+0x8c8>
 8008246:	f04f 0800 	mov.w	r8, #0
 800824a:	6933      	ldr	r3, [r6, #16]
 800824c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008250:	6918      	ldr	r0, [r3, #16]
 8008252:	f000 fbbf 	bl	80089d4 <__hi0bits>
 8008256:	f1c0 0020 	rsb	r0, r0, #32
 800825a:	9b05      	ldr	r3, [sp, #20]
 800825c:	4418      	add	r0, r3
 800825e:	f010 001f 	ands.w	r0, r0, #31
 8008262:	f000 8092 	beq.w	800838a <_dtoa_r+0x90a>
 8008266:	f1c0 0320 	rsb	r3, r0, #32
 800826a:	2b04      	cmp	r3, #4
 800826c:	f340 808a 	ble.w	8008384 <_dtoa_r+0x904>
 8008270:	f1c0 001c 	rsb	r0, r0, #28
 8008274:	9b04      	ldr	r3, [sp, #16]
 8008276:	4403      	add	r3, r0
 8008278:	9304      	str	r3, [sp, #16]
 800827a:	9b05      	ldr	r3, [sp, #20]
 800827c:	4403      	add	r3, r0
 800827e:	4405      	add	r5, r0
 8008280:	9305      	str	r3, [sp, #20]
 8008282:	9b04      	ldr	r3, [sp, #16]
 8008284:	2b00      	cmp	r3, #0
 8008286:	dd07      	ble.n	8008298 <_dtoa_r+0x818>
 8008288:	ee18 1a10 	vmov	r1, s16
 800828c:	461a      	mov	r2, r3
 800828e:	4620      	mov	r0, r4
 8008290:	f000 fd0a 	bl	8008ca8 <__lshift>
 8008294:	ee08 0a10 	vmov	s16, r0
 8008298:	9b05      	ldr	r3, [sp, #20]
 800829a:	2b00      	cmp	r3, #0
 800829c:	dd05      	ble.n	80082aa <_dtoa_r+0x82a>
 800829e:	4631      	mov	r1, r6
 80082a0:	461a      	mov	r2, r3
 80082a2:	4620      	mov	r0, r4
 80082a4:	f000 fd00 	bl	8008ca8 <__lshift>
 80082a8:	4606      	mov	r6, r0
 80082aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d06e      	beq.n	800838e <_dtoa_r+0x90e>
 80082b0:	ee18 0a10 	vmov	r0, s16
 80082b4:	4631      	mov	r1, r6
 80082b6:	f000 fd67 	bl	8008d88 <__mcmp>
 80082ba:	2800      	cmp	r0, #0
 80082bc:	da67      	bge.n	800838e <_dtoa_r+0x90e>
 80082be:	9b00      	ldr	r3, [sp, #0]
 80082c0:	3b01      	subs	r3, #1
 80082c2:	ee18 1a10 	vmov	r1, s16
 80082c6:	9300      	str	r3, [sp, #0]
 80082c8:	220a      	movs	r2, #10
 80082ca:	2300      	movs	r3, #0
 80082cc:	4620      	mov	r0, r4
 80082ce:	f000 fb3b 	bl	8008948 <__multadd>
 80082d2:	9b08      	ldr	r3, [sp, #32]
 80082d4:	ee08 0a10 	vmov	s16, r0
 80082d8:	2b00      	cmp	r3, #0
 80082da:	f000 81b1 	beq.w	8008640 <_dtoa_r+0xbc0>
 80082de:	2300      	movs	r3, #0
 80082e0:	4639      	mov	r1, r7
 80082e2:	220a      	movs	r2, #10
 80082e4:	4620      	mov	r0, r4
 80082e6:	f000 fb2f 	bl	8008948 <__multadd>
 80082ea:	9b02      	ldr	r3, [sp, #8]
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	4607      	mov	r7, r0
 80082f0:	f300 808e 	bgt.w	8008410 <_dtoa_r+0x990>
 80082f4:	9b06      	ldr	r3, [sp, #24]
 80082f6:	2b02      	cmp	r3, #2
 80082f8:	dc51      	bgt.n	800839e <_dtoa_r+0x91e>
 80082fa:	e089      	b.n	8008410 <_dtoa_r+0x990>
 80082fc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80082fe:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008302:	e74b      	b.n	800819c <_dtoa_r+0x71c>
 8008304:	9b03      	ldr	r3, [sp, #12]
 8008306:	1e5e      	subs	r6, r3, #1
 8008308:	9b07      	ldr	r3, [sp, #28]
 800830a:	42b3      	cmp	r3, r6
 800830c:	bfbf      	itttt	lt
 800830e:	9b07      	ldrlt	r3, [sp, #28]
 8008310:	9607      	strlt	r6, [sp, #28]
 8008312:	1af2      	sublt	r2, r6, r3
 8008314:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8008316:	bfb6      	itet	lt
 8008318:	189b      	addlt	r3, r3, r2
 800831a:	1b9e      	subge	r6, r3, r6
 800831c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800831e:	9b03      	ldr	r3, [sp, #12]
 8008320:	bfb8      	it	lt
 8008322:	2600      	movlt	r6, #0
 8008324:	2b00      	cmp	r3, #0
 8008326:	bfb7      	itett	lt
 8008328:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800832c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8008330:	1a9d      	sublt	r5, r3, r2
 8008332:	2300      	movlt	r3, #0
 8008334:	e734      	b.n	80081a0 <_dtoa_r+0x720>
 8008336:	9e07      	ldr	r6, [sp, #28]
 8008338:	9d04      	ldr	r5, [sp, #16]
 800833a:	9f08      	ldr	r7, [sp, #32]
 800833c:	e73b      	b.n	80081b6 <_dtoa_r+0x736>
 800833e:	9a07      	ldr	r2, [sp, #28]
 8008340:	e767      	b.n	8008212 <_dtoa_r+0x792>
 8008342:	9b06      	ldr	r3, [sp, #24]
 8008344:	2b01      	cmp	r3, #1
 8008346:	dc18      	bgt.n	800837a <_dtoa_r+0x8fa>
 8008348:	f1ba 0f00 	cmp.w	sl, #0
 800834c:	d115      	bne.n	800837a <_dtoa_r+0x8fa>
 800834e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008352:	b993      	cbnz	r3, 800837a <_dtoa_r+0x8fa>
 8008354:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008358:	0d1b      	lsrs	r3, r3, #20
 800835a:	051b      	lsls	r3, r3, #20
 800835c:	b183      	cbz	r3, 8008380 <_dtoa_r+0x900>
 800835e:	9b04      	ldr	r3, [sp, #16]
 8008360:	3301      	adds	r3, #1
 8008362:	9304      	str	r3, [sp, #16]
 8008364:	9b05      	ldr	r3, [sp, #20]
 8008366:	3301      	adds	r3, #1
 8008368:	9305      	str	r3, [sp, #20]
 800836a:	f04f 0801 	mov.w	r8, #1
 800836e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008370:	2b00      	cmp	r3, #0
 8008372:	f47f af6a 	bne.w	800824a <_dtoa_r+0x7ca>
 8008376:	2001      	movs	r0, #1
 8008378:	e76f      	b.n	800825a <_dtoa_r+0x7da>
 800837a:	f04f 0800 	mov.w	r8, #0
 800837e:	e7f6      	b.n	800836e <_dtoa_r+0x8ee>
 8008380:	4698      	mov	r8, r3
 8008382:	e7f4      	b.n	800836e <_dtoa_r+0x8ee>
 8008384:	f43f af7d 	beq.w	8008282 <_dtoa_r+0x802>
 8008388:	4618      	mov	r0, r3
 800838a:	301c      	adds	r0, #28
 800838c:	e772      	b.n	8008274 <_dtoa_r+0x7f4>
 800838e:	9b03      	ldr	r3, [sp, #12]
 8008390:	2b00      	cmp	r3, #0
 8008392:	dc37      	bgt.n	8008404 <_dtoa_r+0x984>
 8008394:	9b06      	ldr	r3, [sp, #24]
 8008396:	2b02      	cmp	r3, #2
 8008398:	dd34      	ble.n	8008404 <_dtoa_r+0x984>
 800839a:	9b03      	ldr	r3, [sp, #12]
 800839c:	9302      	str	r3, [sp, #8]
 800839e:	9b02      	ldr	r3, [sp, #8]
 80083a0:	b96b      	cbnz	r3, 80083be <_dtoa_r+0x93e>
 80083a2:	4631      	mov	r1, r6
 80083a4:	2205      	movs	r2, #5
 80083a6:	4620      	mov	r0, r4
 80083a8:	f000 face 	bl	8008948 <__multadd>
 80083ac:	4601      	mov	r1, r0
 80083ae:	4606      	mov	r6, r0
 80083b0:	ee18 0a10 	vmov	r0, s16
 80083b4:	f000 fce8 	bl	8008d88 <__mcmp>
 80083b8:	2800      	cmp	r0, #0
 80083ba:	f73f adbb 	bgt.w	8007f34 <_dtoa_r+0x4b4>
 80083be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80083c0:	9d01      	ldr	r5, [sp, #4]
 80083c2:	43db      	mvns	r3, r3
 80083c4:	9300      	str	r3, [sp, #0]
 80083c6:	f04f 0800 	mov.w	r8, #0
 80083ca:	4631      	mov	r1, r6
 80083cc:	4620      	mov	r0, r4
 80083ce:	f000 fa99 	bl	8008904 <_Bfree>
 80083d2:	2f00      	cmp	r7, #0
 80083d4:	f43f aea4 	beq.w	8008120 <_dtoa_r+0x6a0>
 80083d8:	f1b8 0f00 	cmp.w	r8, #0
 80083dc:	d005      	beq.n	80083ea <_dtoa_r+0x96a>
 80083de:	45b8      	cmp	r8, r7
 80083e0:	d003      	beq.n	80083ea <_dtoa_r+0x96a>
 80083e2:	4641      	mov	r1, r8
 80083e4:	4620      	mov	r0, r4
 80083e6:	f000 fa8d 	bl	8008904 <_Bfree>
 80083ea:	4639      	mov	r1, r7
 80083ec:	4620      	mov	r0, r4
 80083ee:	f000 fa89 	bl	8008904 <_Bfree>
 80083f2:	e695      	b.n	8008120 <_dtoa_r+0x6a0>
 80083f4:	2600      	movs	r6, #0
 80083f6:	4637      	mov	r7, r6
 80083f8:	e7e1      	b.n	80083be <_dtoa_r+0x93e>
 80083fa:	9700      	str	r7, [sp, #0]
 80083fc:	4637      	mov	r7, r6
 80083fe:	e599      	b.n	8007f34 <_dtoa_r+0x4b4>
 8008400:	40240000 	.word	0x40240000
 8008404:	9b08      	ldr	r3, [sp, #32]
 8008406:	2b00      	cmp	r3, #0
 8008408:	f000 80ca 	beq.w	80085a0 <_dtoa_r+0xb20>
 800840c:	9b03      	ldr	r3, [sp, #12]
 800840e:	9302      	str	r3, [sp, #8]
 8008410:	2d00      	cmp	r5, #0
 8008412:	dd05      	ble.n	8008420 <_dtoa_r+0x9a0>
 8008414:	4639      	mov	r1, r7
 8008416:	462a      	mov	r2, r5
 8008418:	4620      	mov	r0, r4
 800841a:	f000 fc45 	bl	8008ca8 <__lshift>
 800841e:	4607      	mov	r7, r0
 8008420:	f1b8 0f00 	cmp.w	r8, #0
 8008424:	d05b      	beq.n	80084de <_dtoa_r+0xa5e>
 8008426:	6879      	ldr	r1, [r7, #4]
 8008428:	4620      	mov	r0, r4
 800842a:	f000 fa2b 	bl	8008884 <_Balloc>
 800842e:	4605      	mov	r5, r0
 8008430:	b928      	cbnz	r0, 800843e <_dtoa_r+0x9be>
 8008432:	4b87      	ldr	r3, [pc, #540]	; (8008650 <_dtoa_r+0xbd0>)
 8008434:	4602      	mov	r2, r0
 8008436:	f240 21ea 	movw	r1, #746	; 0x2ea
 800843a:	f7ff bb3b 	b.w	8007ab4 <_dtoa_r+0x34>
 800843e:	693a      	ldr	r2, [r7, #16]
 8008440:	3202      	adds	r2, #2
 8008442:	0092      	lsls	r2, r2, #2
 8008444:	f107 010c 	add.w	r1, r7, #12
 8008448:	300c      	adds	r0, #12
 800844a:	f000 fa0d 	bl	8008868 <memcpy>
 800844e:	2201      	movs	r2, #1
 8008450:	4629      	mov	r1, r5
 8008452:	4620      	mov	r0, r4
 8008454:	f000 fc28 	bl	8008ca8 <__lshift>
 8008458:	9b01      	ldr	r3, [sp, #4]
 800845a:	f103 0901 	add.w	r9, r3, #1
 800845e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8008462:	4413      	add	r3, r2
 8008464:	9305      	str	r3, [sp, #20]
 8008466:	f00a 0301 	and.w	r3, sl, #1
 800846a:	46b8      	mov	r8, r7
 800846c:	9304      	str	r3, [sp, #16]
 800846e:	4607      	mov	r7, r0
 8008470:	4631      	mov	r1, r6
 8008472:	ee18 0a10 	vmov	r0, s16
 8008476:	f7ff fa75 	bl	8007964 <quorem>
 800847a:	4641      	mov	r1, r8
 800847c:	9002      	str	r0, [sp, #8]
 800847e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008482:	ee18 0a10 	vmov	r0, s16
 8008486:	f000 fc7f 	bl	8008d88 <__mcmp>
 800848a:	463a      	mov	r2, r7
 800848c:	9003      	str	r0, [sp, #12]
 800848e:	4631      	mov	r1, r6
 8008490:	4620      	mov	r0, r4
 8008492:	f000 fc95 	bl	8008dc0 <__mdiff>
 8008496:	68c2      	ldr	r2, [r0, #12]
 8008498:	f109 3bff 	add.w	fp, r9, #4294967295
 800849c:	4605      	mov	r5, r0
 800849e:	bb02      	cbnz	r2, 80084e2 <_dtoa_r+0xa62>
 80084a0:	4601      	mov	r1, r0
 80084a2:	ee18 0a10 	vmov	r0, s16
 80084a6:	f000 fc6f 	bl	8008d88 <__mcmp>
 80084aa:	4602      	mov	r2, r0
 80084ac:	4629      	mov	r1, r5
 80084ae:	4620      	mov	r0, r4
 80084b0:	9207      	str	r2, [sp, #28]
 80084b2:	f000 fa27 	bl	8008904 <_Bfree>
 80084b6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80084ba:	ea43 0102 	orr.w	r1, r3, r2
 80084be:	9b04      	ldr	r3, [sp, #16]
 80084c0:	430b      	orrs	r3, r1
 80084c2:	464d      	mov	r5, r9
 80084c4:	d10f      	bne.n	80084e6 <_dtoa_r+0xa66>
 80084c6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80084ca:	d02a      	beq.n	8008522 <_dtoa_r+0xaa2>
 80084cc:	9b03      	ldr	r3, [sp, #12]
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	dd02      	ble.n	80084d8 <_dtoa_r+0xa58>
 80084d2:	9b02      	ldr	r3, [sp, #8]
 80084d4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80084d8:	f88b a000 	strb.w	sl, [fp]
 80084dc:	e775      	b.n	80083ca <_dtoa_r+0x94a>
 80084de:	4638      	mov	r0, r7
 80084e0:	e7ba      	b.n	8008458 <_dtoa_r+0x9d8>
 80084e2:	2201      	movs	r2, #1
 80084e4:	e7e2      	b.n	80084ac <_dtoa_r+0xa2c>
 80084e6:	9b03      	ldr	r3, [sp, #12]
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	db04      	blt.n	80084f6 <_dtoa_r+0xa76>
 80084ec:	9906      	ldr	r1, [sp, #24]
 80084ee:	430b      	orrs	r3, r1
 80084f0:	9904      	ldr	r1, [sp, #16]
 80084f2:	430b      	orrs	r3, r1
 80084f4:	d122      	bne.n	800853c <_dtoa_r+0xabc>
 80084f6:	2a00      	cmp	r2, #0
 80084f8:	ddee      	ble.n	80084d8 <_dtoa_r+0xa58>
 80084fa:	ee18 1a10 	vmov	r1, s16
 80084fe:	2201      	movs	r2, #1
 8008500:	4620      	mov	r0, r4
 8008502:	f000 fbd1 	bl	8008ca8 <__lshift>
 8008506:	4631      	mov	r1, r6
 8008508:	ee08 0a10 	vmov	s16, r0
 800850c:	f000 fc3c 	bl	8008d88 <__mcmp>
 8008510:	2800      	cmp	r0, #0
 8008512:	dc03      	bgt.n	800851c <_dtoa_r+0xa9c>
 8008514:	d1e0      	bne.n	80084d8 <_dtoa_r+0xa58>
 8008516:	f01a 0f01 	tst.w	sl, #1
 800851a:	d0dd      	beq.n	80084d8 <_dtoa_r+0xa58>
 800851c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008520:	d1d7      	bne.n	80084d2 <_dtoa_r+0xa52>
 8008522:	2339      	movs	r3, #57	; 0x39
 8008524:	f88b 3000 	strb.w	r3, [fp]
 8008528:	462b      	mov	r3, r5
 800852a:	461d      	mov	r5, r3
 800852c:	3b01      	subs	r3, #1
 800852e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008532:	2a39      	cmp	r2, #57	; 0x39
 8008534:	d071      	beq.n	800861a <_dtoa_r+0xb9a>
 8008536:	3201      	adds	r2, #1
 8008538:	701a      	strb	r2, [r3, #0]
 800853a:	e746      	b.n	80083ca <_dtoa_r+0x94a>
 800853c:	2a00      	cmp	r2, #0
 800853e:	dd07      	ble.n	8008550 <_dtoa_r+0xad0>
 8008540:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008544:	d0ed      	beq.n	8008522 <_dtoa_r+0xaa2>
 8008546:	f10a 0301 	add.w	r3, sl, #1
 800854a:	f88b 3000 	strb.w	r3, [fp]
 800854e:	e73c      	b.n	80083ca <_dtoa_r+0x94a>
 8008550:	9b05      	ldr	r3, [sp, #20]
 8008552:	f809 ac01 	strb.w	sl, [r9, #-1]
 8008556:	4599      	cmp	r9, r3
 8008558:	d047      	beq.n	80085ea <_dtoa_r+0xb6a>
 800855a:	ee18 1a10 	vmov	r1, s16
 800855e:	2300      	movs	r3, #0
 8008560:	220a      	movs	r2, #10
 8008562:	4620      	mov	r0, r4
 8008564:	f000 f9f0 	bl	8008948 <__multadd>
 8008568:	45b8      	cmp	r8, r7
 800856a:	ee08 0a10 	vmov	s16, r0
 800856e:	f04f 0300 	mov.w	r3, #0
 8008572:	f04f 020a 	mov.w	r2, #10
 8008576:	4641      	mov	r1, r8
 8008578:	4620      	mov	r0, r4
 800857a:	d106      	bne.n	800858a <_dtoa_r+0xb0a>
 800857c:	f000 f9e4 	bl	8008948 <__multadd>
 8008580:	4680      	mov	r8, r0
 8008582:	4607      	mov	r7, r0
 8008584:	f109 0901 	add.w	r9, r9, #1
 8008588:	e772      	b.n	8008470 <_dtoa_r+0x9f0>
 800858a:	f000 f9dd 	bl	8008948 <__multadd>
 800858e:	4639      	mov	r1, r7
 8008590:	4680      	mov	r8, r0
 8008592:	2300      	movs	r3, #0
 8008594:	220a      	movs	r2, #10
 8008596:	4620      	mov	r0, r4
 8008598:	f000 f9d6 	bl	8008948 <__multadd>
 800859c:	4607      	mov	r7, r0
 800859e:	e7f1      	b.n	8008584 <_dtoa_r+0xb04>
 80085a0:	9b03      	ldr	r3, [sp, #12]
 80085a2:	9302      	str	r3, [sp, #8]
 80085a4:	9d01      	ldr	r5, [sp, #4]
 80085a6:	ee18 0a10 	vmov	r0, s16
 80085aa:	4631      	mov	r1, r6
 80085ac:	f7ff f9da 	bl	8007964 <quorem>
 80085b0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80085b4:	9b01      	ldr	r3, [sp, #4]
 80085b6:	f805 ab01 	strb.w	sl, [r5], #1
 80085ba:	1aea      	subs	r2, r5, r3
 80085bc:	9b02      	ldr	r3, [sp, #8]
 80085be:	4293      	cmp	r3, r2
 80085c0:	dd09      	ble.n	80085d6 <_dtoa_r+0xb56>
 80085c2:	ee18 1a10 	vmov	r1, s16
 80085c6:	2300      	movs	r3, #0
 80085c8:	220a      	movs	r2, #10
 80085ca:	4620      	mov	r0, r4
 80085cc:	f000 f9bc 	bl	8008948 <__multadd>
 80085d0:	ee08 0a10 	vmov	s16, r0
 80085d4:	e7e7      	b.n	80085a6 <_dtoa_r+0xb26>
 80085d6:	9b02      	ldr	r3, [sp, #8]
 80085d8:	2b00      	cmp	r3, #0
 80085da:	bfc8      	it	gt
 80085dc:	461d      	movgt	r5, r3
 80085de:	9b01      	ldr	r3, [sp, #4]
 80085e0:	bfd8      	it	le
 80085e2:	2501      	movle	r5, #1
 80085e4:	441d      	add	r5, r3
 80085e6:	f04f 0800 	mov.w	r8, #0
 80085ea:	ee18 1a10 	vmov	r1, s16
 80085ee:	2201      	movs	r2, #1
 80085f0:	4620      	mov	r0, r4
 80085f2:	f000 fb59 	bl	8008ca8 <__lshift>
 80085f6:	4631      	mov	r1, r6
 80085f8:	ee08 0a10 	vmov	s16, r0
 80085fc:	f000 fbc4 	bl	8008d88 <__mcmp>
 8008600:	2800      	cmp	r0, #0
 8008602:	dc91      	bgt.n	8008528 <_dtoa_r+0xaa8>
 8008604:	d102      	bne.n	800860c <_dtoa_r+0xb8c>
 8008606:	f01a 0f01 	tst.w	sl, #1
 800860a:	d18d      	bne.n	8008528 <_dtoa_r+0xaa8>
 800860c:	462b      	mov	r3, r5
 800860e:	461d      	mov	r5, r3
 8008610:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008614:	2a30      	cmp	r2, #48	; 0x30
 8008616:	d0fa      	beq.n	800860e <_dtoa_r+0xb8e>
 8008618:	e6d7      	b.n	80083ca <_dtoa_r+0x94a>
 800861a:	9a01      	ldr	r2, [sp, #4]
 800861c:	429a      	cmp	r2, r3
 800861e:	d184      	bne.n	800852a <_dtoa_r+0xaaa>
 8008620:	9b00      	ldr	r3, [sp, #0]
 8008622:	3301      	adds	r3, #1
 8008624:	9300      	str	r3, [sp, #0]
 8008626:	2331      	movs	r3, #49	; 0x31
 8008628:	7013      	strb	r3, [r2, #0]
 800862a:	e6ce      	b.n	80083ca <_dtoa_r+0x94a>
 800862c:	4b09      	ldr	r3, [pc, #36]	; (8008654 <_dtoa_r+0xbd4>)
 800862e:	f7ff ba95 	b.w	8007b5c <_dtoa_r+0xdc>
 8008632:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008634:	2b00      	cmp	r3, #0
 8008636:	f47f aa6e 	bne.w	8007b16 <_dtoa_r+0x96>
 800863a:	4b07      	ldr	r3, [pc, #28]	; (8008658 <_dtoa_r+0xbd8>)
 800863c:	f7ff ba8e 	b.w	8007b5c <_dtoa_r+0xdc>
 8008640:	9b02      	ldr	r3, [sp, #8]
 8008642:	2b00      	cmp	r3, #0
 8008644:	dcae      	bgt.n	80085a4 <_dtoa_r+0xb24>
 8008646:	9b06      	ldr	r3, [sp, #24]
 8008648:	2b02      	cmp	r3, #2
 800864a:	f73f aea8 	bgt.w	800839e <_dtoa_r+0x91e>
 800864e:	e7a9      	b.n	80085a4 <_dtoa_r+0xb24>
 8008650:	08009c83 	.word	0x08009c83
 8008654:	08009be0 	.word	0x08009be0
 8008658:	08009c04 	.word	0x08009c04

0800865c <std>:
 800865c:	2300      	movs	r3, #0
 800865e:	b510      	push	{r4, lr}
 8008660:	4604      	mov	r4, r0
 8008662:	e9c0 3300 	strd	r3, r3, [r0]
 8008666:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800866a:	6083      	str	r3, [r0, #8]
 800866c:	8181      	strh	r1, [r0, #12]
 800866e:	6643      	str	r3, [r0, #100]	; 0x64
 8008670:	81c2      	strh	r2, [r0, #14]
 8008672:	6183      	str	r3, [r0, #24]
 8008674:	4619      	mov	r1, r3
 8008676:	2208      	movs	r2, #8
 8008678:	305c      	adds	r0, #92	; 0x5c
 800867a:	f7fe fce9 	bl	8007050 <memset>
 800867e:	4b05      	ldr	r3, [pc, #20]	; (8008694 <std+0x38>)
 8008680:	6263      	str	r3, [r4, #36]	; 0x24
 8008682:	4b05      	ldr	r3, [pc, #20]	; (8008698 <std+0x3c>)
 8008684:	62a3      	str	r3, [r4, #40]	; 0x28
 8008686:	4b05      	ldr	r3, [pc, #20]	; (800869c <std+0x40>)
 8008688:	62e3      	str	r3, [r4, #44]	; 0x2c
 800868a:	4b05      	ldr	r3, [pc, #20]	; (80086a0 <std+0x44>)
 800868c:	6224      	str	r4, [r4, #32]
 800868e:	6323      	str	r3, [r4, #48]	; 0x30
 8008690:	bd10      	pop	{r4, pc}
 8008692:	bf00      	nop
 8008694:	0800944d 	.word	0x0800944d
 8008698:	0800946f 	.word	0x0800946f
 800869c:	080094a7 	.word	0x080094a7
 80086a0:	080094cb 	.word	0x080094cb

080086a4 <_cleanup_r>:
 80086a4:	4901      	ldr	r1, [pc, #4]	; (80086ac <_cleanup_r+0x8>)
 80086a6:	f000 b8af 	b.w	8008808 <_fwalk_reent>
 80086aa:	bf00      	nop
 80086ac:	080097e1 	.word	0x080097e1

080086b0 <__sfmoreglue>:
 80086b0:	b570      	push	{r4, r5, r6, lr}
 80086b2:	2268      	movs	r2, #104	; 0x68
 80086b4:	1e4d      	subs	r5, r1, #1
 80086b6:	4355      	muls	r5, r2
 80086b8:	460e      	mov	r6, r1
 80086ba:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80086be:	f000 fce7 	bl	8009090 <_malloc_r>
 80086c2:	4604      	mov	r4, r0
 80086c4:	b140      	cbz	r0, 80086d8 <__sfmoreglue+0x28>
 80086c6:	2100      	movs	r1, #0
 80086c8:	e9c0 1600 	strd	r1, r6, [r0]
 80086cc:	300c      	adds	r0, #12
 80086ce:	60a0      	str	r0, [r4, #8]
 80086d0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80086d4:	f7fe fcbc 	bl	8007050 <memset>
 80086d8:	4620      	mov	r0, r4
 80086da:	bd70      	pop	{r4, r5, r6, pc}

080086dc <__sfp_lock_acquire>:
 80086dc:	4801      	ldr	r0, [pc, #4]	; (80086e4 <__sfp_lock_acquire+0x8>)
 80086de:	f000 b8b8 	b.w	8008852 <__retarget_lock_acquire_recursive>
 80086e2:	bf00      	nop
 80086e4:	20000475 	.word	0x20000475

080086e8 <__sfp_lock_release>:
 80086e8:	4801      	ldr	r0, [pc, #4]	; (80086f0 <__sfp_lock_release+0x8>)
 80086ea:	f000 b8b3 	b.w	8008854 <__retarget_lock_release_recursive>
 80086ee:	bf00      	nop
 80086f0:	20000475 	.word	0x20000475

080086f4 <__sinit_lock_acquire>:
 80086f4:	4801      	ldr	r0, [pc, #4]	; (80086fc <__sinit_lock_acquire+0x8>)
 80086f6:	f000 b8ac 	b.w	8008852 <__retarget_lock_acquire_recursive>
 80086fa:	bf00      	nop
 80086fc:	20000476 	.word	0x20000476

08008700 <__sinit_lock_release>:
 8008700:	4801      	ldr	r0, [pc, #4]	; (8008708 <__sinit_lock_release+0x8>)
 8008702:	f000 b8a7 	b.w	8008854 <__retarget_lock_release_recursive>
 8008706:	bf00      	nop
 8008708:	20000476 	.word	0x20000476

0800870c <__sinit>:
 800870c:	b510      	push	{r4, lr}
 800870e:	4604      	mov	r4, r0
 8008710:	f7ff fff0 	bl	80086f4 <__sinit_lock_acquire>
 8008714:	69a3      	ldr	r3, [r4, #24]
 8008716:	b11b      	cbz	r3, 8008720 <__sinit+0x14>
 8008718:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800871c:	f7ff bff0 	b.w	8008700 <__sinit_lock_release>
 8008720:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008724:	6523      	str	r3, [r4, #80]	; 0x50
 8008726:	4b13      	ldr	r3, [pc, #76]	; (8008774 <__sinit+0x68>)
 8008728:	4a13      	ldr	r2, [pc, #76]	; (8008778 <__sinit+0x6c>)
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	62a2      	str	r2, [r4, #40]	; 0x28
 800872e:	42a3      	cmp	r3, r4
 8008730:	bf04      	itt	eq
 8008732:	2301      	moveq	r3, #1
 8008734:	61a3      	streq	r3, [r4, #24]
 8008736:	4620      	mov	r0, r4
 8008738:	f000 f820 	bl	800877c <__sfp>
 800873c:	6060      	str	r0, [r4, #4]
 800873e:	4620      	mov	r0, r4
 8008740:	f000 f81c 	bl	800877c <__sfp>
 8008744:	60a0      	str	r0, [r4, #8]
 8008746:	4620      	mov	r0, r4
 8008748:	f000 f818 	bl	800877c <__sfp>
 800874c:	2200      	movs	r2, #0
 800874e:	60e0      	str	r0, [r4, #12]
 8008750:	2104      	movs	r1, #4
 8008752:	6860      	ldr	r0, [r4, #4]
 8008754:	f7ff ff82 	bl	800865c <std>
 8008758:	68a0      	ldr	r0, [r4, #8]
 800875a:	2201      	movs	r2, #1
 800875c:	2109      	movs	r1, #9
 800875e:	f7ff ff7d 	bl	800865c <std>
 8008762:	68e0      	ldr	r0, [r4, #12]
 8008764:	2202      	movs	r2, #2
 8008766:	2112      	movs	r1, #18
 8008768:	f7ff ff78 	bl	800865c <std>
 800876c:	2301      	movs	r3, #1
 800876e:	61a3      	str	r3, [r4, #24]
 8008770:	e7d2      	b.n	8008718 <__sinit+0xc>
 8008772:	bf00      	nop
 8008774:	08009bcc 	.word	0x08009bcc
 8008778:	080086a5 	.word	0x080086a5

0800877c <__sfp>:
 800877c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800877e:	4607      	mov	r7, r0
 8008780:	f7ff ffac 	bl	80086dc <__sfp_lock_acquire>
 8008784:	4b1e      	ldr	r3, [pc, #120]	; (8008800 <__sfp+0x84>)
 8008786:	681e      	ldr	r6, [r3, #0]
 8008788:	69b3      	ldr	r3, [r6, #24]
 800878a:	b913      	cbnz	r3, 8008792 <__sfp+0x16>
 800878c:	4630      	mov	r0, r6
 800878e:	f7ff ffbd 	bl	800870c <__sinit>
 8008792:	3648      	adds	r6, #72	; 0x48
 8008794:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008798:	3b01      	subs	r3, #1
 800879a:	d503      	bpl.n	80087a4 <__sfp+0x28>
 800879c:	6833      	ldr	r3, [r6, #0]
 800879e:	b30b      	cbz	r3, 80087e4 <__sfp+0x68>
 80087a0:	6836      	ldr	r6, [r6, #0]
 80087a2:	e7f7      	b.n	8008794 <__sfp+0x18>
 80087a4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80087a8:	b9d5      	cbnz	r5, 80087e0 <__sfp+0x64>
 80087aa:	4b16      	ldr	r3, [pc, #88]	; (8008804 <__sfp+0x88>)
 80087ac:	60e3      	str	r3, [r4, #12]
 80087ae:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80087b2:	6665      	str	r5, [r4, #100]	; 0x64
 80087b4:	f000 f84c 	bl	8008850 <__retarget_lock_init_recursive>
 80087b8:	f7ff ff96 	bl	80086e8 <__sfp_lock_release>
 80087bc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80087c0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80087c4:	6025      	str	r5, [r4, #0]
 80087c6:	61a5      	str	r5, [r4, #24]
 80087c8:	2208      	movs	r2, #8
 80087ca:	4629      	mov	r1, r5
 80087cc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80087d0:	f7fe fc3e 	bl	8007050 <memset>
 80087d4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80087d8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80087dc:	4620      	mov	r0, r4
 80087de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80087e0:	3468      	adds	r4, #104	; 0x68
 80087e2:	e7d9      	b.n	8008798 <__sfp+0x1c>
 80087e4:	2104      	movs	r1, #4
 80087e6:	4638      	mov	r0, r7
 80087e8:	f7ff ff62 	bl	80086b0 <__sfmoreglue>
 80087ec:	4604      	mov	r4, r0
 80087ee:	6030      	str	r0, [r6, #0]
 80087f0:	2800      	cmp	r0, #0
 80087f2:	d1d5      	bne.n	80087a0 <__sfp+0x24>
 80087f4:	f7ff ff78 	bl	80086e8 <__sfp_lock_release>
 80087f8:	230c      	movs	r3, #12
 80087fa:	603b      	str	r3, [r7, #0]
 80087fc:	e7ee      	b.n	80087dc <__sfp+0x60>
 80087fe:	bf00      	nop
 8008800:	08009bcc 	.word	0x08009bcc
 8008804:	ffff0001 	.word	0xffff0001

08008808 <_fwalk_reent>:
 8008808:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800880c:	4606      	mov	r6, r0
 800880e:	4688      	mov	r8, r1
 8008810:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008814:	2700      	movs	r7, #0
 8008816:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800881a:	f1b9 0901 	subs.w	r9, r9, #1
 800881e:	d505      	bpl.n	800882c <_fwalk_reent+0x24>
 8008820:	6824      	ldr	r4, [r4, #0]
 8008822:	2c00      	cmp	r4, #0
 8008824:	d1f7      	bne.n	8008816 <_fwalk_reent+0xe>
 8008826:	4638      	mov	r0, r7
 8008828:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800882c:	89ab      	ldrh	r3, [r5, #12]
 800882e:	2b01      	cmp	r3, #1
 8008830:	d907      	bls.n	8008842 <_fwalk_reent+0x3a>
 8008832:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008836:	3301      	adds	r3, #1
 8008838:	d003      	beq.n	8008842 <_fwalk_reent+0x3a>
 800883a:	4629      	mov	r1, r5
 800883c:	4630      	mov	r0, r6
 800883e:	47c0      	blx	r8
 8008840:	4307      	orrs	r7, r0
 8008842:	3568      	adds	r5, #104	; 0x68
 8008844:	e7e9      	b.n	800881a <_fwalk_reent+0x12>
	...

08008848 <_localeconv_r>:
 8008848:	4800      	ldr	r0, [pc, #0]	; (800884c <_localeconv_r+0x4>)
 800884a:	4770      	bx	lr
 800884c:	20000160 	.word	0x20000160

08008850 <__retarget_lock_init_recursive>:
 8008850:	4770      	bx	lr

08008852 <__retarget_lock_acquire_recursive>:
 8008852:	4770      	bx	lr

08008854 <__retarget_lock_release_recursive>:
 8008854:	4770      	bx	lr
	...

08008858 <malloc>:
 8008858:	4b02      	ldr	r3, [pc, #8]	; (8008864 <malloc+0xc>)
 800885a:	4601      	mov	r1, r0
 800885c:	6818      	ldr	r0, [r3, #0]
 800885e:	f000 bc17 	b.w	8009090 <_malloc_r>
 8008862:	bf00      	nop
 8008864:	2000000c 	.word	0x2000000c

08008868 <memcpy>:
 8008868:	440a      	add	r2, r1
 800886a:	4291      	cmp	r1, r2
 800886c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008870:	d100      	bne.n	8008874 <memcpy+0xc>
 8008872:	4770      	bx	lr
 8008874:	b510      	push	{r4, lr}
 8008876:	f811 4b01 	ldrb.w	r4, [r1], #1
 800887a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800887e:	4291      	cmp	r1, r2
 8008880:	d1f9      	bne.n	8008876 <memcpy+0xe>
 8008882:	bd10      	pop	{r4, pc}

08008884 <_Balloc>:
 8008884:	b570      	push	{r4, r5, r6, lr}
 8008886:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008888:	4604      	mov	r4, r0
 800888a:	460d      	mov	r5, r1
 800888c:	b976      	cbnz	r6, 80088ac <_Balloc+0x28>
 800888e:	2010      	movs	r0, #16
 8008890:	f7ff ffe2 	bl	8008858 <malloc>
 8008894:	4602      	mov	r2, r0
 8008896:	6260      	str	r0, [r4, #36]	; 0x24
 8008898:	b920      	cbnz	r0, 80088a4 <_Balloc+0x20>
 800889a:	4b18      	ldr	r3, [pc, #96]	; (80088fc <_Balloc+0x78>)
 800889c:	4818      	ldr	r0, [pc, #96]	; (8008900 <_Balloc+0x7c>)
 800889e:	2166      	movs	r1, #102	; 0x66
 80088a0:	f000 feea 	bl	8009678 <__assert_func>
 80088a4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80088a8:	6006      	str	r6, [r0, #0]
 80088aa:	60c6      	str	r6, [r0, #12]
 80088ac:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80088ae:	68f3      	ldr	r3, [r6, #12]
 80088b0:	b183      	cbz	r3, 80088d4 <_Balloc+0x50>
 80088b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80088b4:	68db      	ldr	r3, [r3, #12]
 80088b6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80088ba:	b9b8      	cbnz	r0, 80088ec <_Balloc+0x68>
 80088bc:	2101      	movs	r1, #1
 80088be:	fa01 f605 	lsl.w	r6, r1, r5
 80088c2:	1d72      	adds	r2, r6, #5
 80088c4:	0092      	lsls	r2, r2, #2
 80088c6:	4620      	mov	r0, r4
 80088c8:	f000 fb60 	bl	8008f8c <_calloc_r>
 80088cc:	b160      	cbz	r0, 80088e8 <_Balloc+0x64>
 80088ce:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80088d2:	e00e      	b.n	80088f2 <_Balloc+0x6e>
 80088d4:	2221      	movs	r2, #33	; 0x21
 80088d6:	2104      	movs	r1, #4
 80088d8:	4620      	mov	r0, r4
 80088da:	f000 fb57 	bl	8008f8c <_calloc_r>
 80088de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80088e0:	60f0      	str	r0, [r6, #12]
 80088e2:	68db      	ldr	r3, [r3, #12]
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d1e4      	bne.n	80088b2 <_Balloc+0x2e>
 80088e8:	2000      	movs	r0, #0
 80088ea:	bd70      	pop	{r4, r5, r6, pc}
 80088ec:	6802      	ldr	r2, [r0, #0]
 80088ee:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80088f2:	2300      	movs	r3, #0
 80088f4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80088f8:	e7f7      	b.n	80088ea <_Balloc+0x66>
 80088fa:	bf00      	nop
 80088fc:	08009c11 	.word	0x08009c11
 8008900:	08009cf4 	.word	0x08009cf4

08008904 <_Bfree>:
 8008904:	b570      	push	{r4, r5, r6, lr}
 8008906:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008908:	4605      	mov	r5, r0
 800890a:	460c      	mov	r4, r1
 800890c:	b976      	cbnz	r6, 800892c <_Bfree+0x28>
 800890e:	2010      	movs	r0, #16
 8008910:	f7ff ffa2 	bl	8008858 <malloc>
 8008914:	4602      	mov	r2, r0
 8008916:	6268      	str	r0, [r5, #36]	; 0x24
 8008918:	b920      	cbnz	r0, 8008924 <_Bfree+0x20>
 800891a:	4b09      	ldr	r3, [pc, #36]	; (8008940 <_Bfree+0x3c>)
 800891c:	4809      	ldr	r0, [pc, #36]	; (8008944 <_Bfree+0x40>)
 800891e:	218a      	movs	r1, #138	; 0x8a
 8008920:	f000 feaa 	bl	8009678 <__assert_func>
 8008924:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008928:	6006      	str	r6, [r0, #0]
 800892a:	60c6      	str	r6, [r0, #12]
 800892c:	b13c      	cbz	r4, 800893e <_Bfree+0x3a>
 800892e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008930:	6862      	ldr	r2, [r4, #4]
 8008932:	68db      	ldr	r3, [r3, #12]
 8008934:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008938:	6021      	str	r1, [r4, #0]
 800893a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800893e:	bd70      	pop	{r4, r5, r6, pc}
 8008940:	08009c11 	.word	0x08009c11
 8008944:	08009cf4 	.word	0x08009cf4

08008948 <__multadd>:
 8008948:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800894c:	690d      	ldr	r5, [r1, #16]
 800894e:	4607      	mov	r7, r0
 8008950:	460c      	mov	r4, r1
 8008952:	461e      	mov	r6, r3
 8008954:	f101 0c14 	add.w	ip, r1, #20
 8008958:	2000      	movs	r0, #0
 800895a:	f8dc 3000 	ldr.w	r3, [ip]
 800895e:	b299      	uxth	r1, r3
 8008960:	fb02 6101 	mla	r1, r2, r1, r6
 8008964:	0c1e      	lsrs	r6, r3, #16
 8008966:	0c0b      	lsrs	r3, r1, #16
 8008968:	fb02 3306 	mla	r3, r2, r6, r3
 800896c:	b289      	uxth	r1, r1
 800896e:	3001      	adds	r0, #1
 8008970:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008974:	4285      	cmp	r5, r0
 8008976:	f84c 1b04 	str.w	r1, [ip], #4
 800897a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800897e:	dcec      	bgt.n	800895a <__multadd+0x12>
 8008980:	b30e      	cbz	r6, 80089c6 <__multadd+0x7e>
 8008982:	68a3      	ldr	r3, [r4, #8]
 8008984:	42ab      	cmp	r3, r5
 8008986:	dc19      	bgt.n	80089bc <__multadd+0x74>
 8008988:	6861      	ldr	r1, [r4, #4]
 800898a:	4638      	mov	r0, r7
 800898c:	3101      	adds	r1, #1
 800898e:	f7ff ff79 	bl	8008884 <_Balloc>
 8008992:	4680      	mov	r8, r0
 8008994:	b928      	cbnz	r0, 80089a2 <__multadd+0x5a>
 8008996:	4602      	mov	r2, r0
 8008998:	4b0c      	ldr	r3, [pc, #48]	; (80089cc <__multadd+0x84>)
 800899a:	480d      	ldr	r0, [pc, #52]	; (80089d0 <__multadd+0x88>)
 800899c:	21b5      	movs	r1, #181	; 0xb5
 800899e:	f000 fe6b 	bl	8009678 <__assert_func>
 80089a2:	6922      	ldr	r2, [r4, #16]
 80089a4:	3202      	adds	r2, #2
 80089a6:	f104 010c 	add.w	r1, r4, #12
 80089aa:	0092      	lsls	r2, r2, #2
 80089ac:	300c      	adds	r0, #12
 80089ae:	f7ff ff5b 	bl	8008868 <memcpy>
 80089b2:	4621      	mov	r1, r4
 80089b4:	4638      	mov	r0, r7
 80089b6:	f7ff ffa5 	bl	8008904 <_Bfree>
 80089ba:	4644      	mov	r4, r8
 80089bc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80089c0:	3501      	adds	r5, #1
 80089c2:	615e      	str	r6, [r3, #20]
 80089c4:	6125      	str	r5, [r4, #16]
 80089c6:	4620      	mov	r0, r4
 80089c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80089cc:	08009c83 	.word	0x08009c83
 80089d0:	08009cf4 	.word	0x08009cf4

080089d4 <__hi0bits>:
 80089d4:	0c03      	lsrs	r3, r0, #16
 80089d6:	041b      	lsls	r3, r3, #16
 80089d8:	b9d3      	cbnz	r3, 8008a10 <__hi0bits+0x3c>
 80089da:	0400      	lsls	r0, r0, #16
 80089dc:	2310      	movs	r3, #16
 80089de:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80089e2:	bf04      	itt	eq
 80089e4:	0200      	lsleq	r0, r0, #8
 80089e6:	3308      	addeq	r3, #8
 80089e8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80089ec:	bf04      	itt	eq
 80089ee:	0100      	lsleq	r0, r0, #4
 80089f0:	3304      	addeq	r3, #4
 80089f2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80089f6:	bf04      	itt	eq
 80089f8:	0080      	lsleq	r0, r0, #2
 80089fa:	3302      	addeq	r3, #2
 80089fc:	2800      	cmp	r0, #0
 80089fe:	db05      	blt.n	8008a0c <__hi0bits+0x38>
 8008a00:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008a04:	f103 0301 	add.w	r3, r3, #1
 8008a08:	bf08      	it	eq
 8008a0a:	2320      	moveq	r3, #32
 8008a0c:	4618      	mov	r0, r3
 8008a0e:	4770      	bx	lr
 8008a10:	2300      	movs	r3, #0
 8008a12:	e7e4      	b.n	80089de <__hi0bits+0xa>

08008a14 <__lo0bits>:
 8008a14:	6803      	ldr	r3, [r0, #0]
 8008a16:	f013 0207 	ands.w	r2, r3, #7
 8008a1a:	4601      	mov	r1, r0
 8008a1c:	d00b      	beq.n	8008a36 <__lo0bits+0x22>
 8008a1e:	07da      	lsls	r2, r3, #31
 8008a20:	d423      	bmi.n	8008a6a <__lo0bits+0x56>
 8008a22:	0798      	lsls	r0, r3, #30
 8008a24:	bf49      	itett	mi
 8008a26:	085b      	lsrmi	r3, r3, #1
 8008a28:	089b      	lsrpl	r3, r3, #2
 8008a2a:	2001      	movmi	r0, #1
 8008a2c:	600b      	strmi	r3, [r1, #0]
 8008a2e:	bf5c      	itt	pl
 8008a30:	600b      	strpl	r3, [r1, #0]
 8008a32:	2002      	movpl	r0, #2
 8008a34:	4770      	bx	lr
 8008a36:	b298      	uxth	r0, r3
 8008a38:	b9a8      	cbnz	r0, 8008a66 <__lo0bits+0x52>
 8008a3a:	0c1b      	lsrs	r3, r3, #16
 8008a3c:	2010      	movs	r0, #16
 8008a3e:	b2da      	uxtb	r2, r3
 8008a40:	b90a      	cbnz	r2, 8008a46 <__lo0bits+0x32>
 8008a42:	3008      	adds	r0, #8
 8008a44:	0a1b      	lsrs	r3, r3, #8
 8008a46:	071a      	lsls	r2, r3, #28
 8008a48:	bf04      	itt	eq
 8008a4a:	091b      	lsreq	r3, r3, #4
 8008a4c:	3004      	addeq	r0, #4
 8008a4e:	079a      	lsls	r2, r3, #30
 8008a50:	bf04      	itt	eq
 8008a52:	089b      	lsreq	r3, r3, #2
 8008a54:	3002      	addeq	r0, #2
 8008a56:	07da      	lsls	r2, r3, #31
 8008a58:	d403      	bmi.n	8008a62 <__lo0bits+0x4e>
 8008a5a:	085b      	lsrs	r3, r3, #1
 8008a5c:	f100 0001 	add.w	r0, r0, #1
 8008a60:	d005      	beq.n	8008a6e <__lo0bits+0x5a>
 8008a62:	600b      	str	r3, [r1, #0]
 8008a64:	4770      	bx	lr
 8008a66:	4610      	mov	r0, r2
 8008a68:	e7e9      	b.n	8008a3e <__lo0bits+0x2a>
 8008a6a:	2000      	movs	r0, #0
 8008a6c:	4770      	bx	lr
 8008a6e:	2020      	movs	r0, #32
 8008a70:	4770      	bx	lr
	...

08008a74 <__i2b>:
 8008a74:	b510      	push	{r4, lr}
 8008a76:	460c      	mov	r4, r1
 8008a78:	2101      	movs	r1, #1
 8008a7a:	f7ff ff03 	bl	8008884 <_Balloc>
 8008a7e:	4602      	mov	r2, r0
 8008a80:	b928      	cbnz	r0, 8008a8e <__i2b+0x1a>
 8008a82:	4b05      	ldr	r3, [pc, #20]	; (8008a98 <__i2b+0x24>)
 8008a84:	4805      	ldr	r0, [pc, #20]	; (8008a9c <__i2b+0x28>)
 8008a86:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008a8a:	f000 fdf5 	bl	8009678 <__assert_func>
 8008a8e:	2301      	movs	r3, #1
 8008a90:	6144      	str	r4, [r0, #20]
 8008a92:	6103      	str	r3, [r0, #16]
 8008a94:	bd10      	pop	{r4, pc}
 8008a96:	bf00      	nop
 8008a98:	08009c83 	.word	0x08009c83
 8008a9c:	08009cf4 	.word	0x08009cf4

08008aa0 <__multiply>:
 8008aa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008aa4:	4691      	mov	r9, r2
 8008aa6:	690a      	ldr	r2, [r1, #16]
 8008aa8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008aac:	429a      	cmp	r2, r3
 8008aae:	bfb8      	it	lt
 8008ab0:	460b      	movlt	r3, r1
 8008ab2:	460c      	mov	r4, r1
 8008ab4:	bfbc      	itt	lt
 8008ab6:	464c      	movlt	r4, r9
 8008ab8:	4699      	movlt	r9, r3
 8008aba:	6927      	ldr	r7, [r4, #16]
 8008abc:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008ac0:	68a3      	ldr	r3, [r4, #8]
 8008ac2:	6861      	ldr	r1, [r4, #4]
 8008ac4:	eb07 060a 	add.w	r6, r7, sl
 8008ac8:	42b3      	cmp	r3, r6
 8008aca:	b085      	sub	sp, #20
 8008acc:	bfb8      	it	lt
 8008ace:	3101      	addlt	r1, #1
 8008ad0:	f7ff fed8 	bl	8008884 <_Balloc>
 8008ad4:	b930      	cbnz	r0, 8008ae4 <__multiply+0x44>
 8008ad6:	4602      	mov	r2, r0
 8008ad8:	4b44      	ldr	r3, [pc, #272]	; (8008bec <__multiply+0x14c>)
 8008ada:	4845      	ldr	r0, [pc, #276]	; (8008bf0 <__multiply+0x150>)
 8008adc:	f240 115d 	movw	r1, #349	; 0x15d
 8008ae0:	f000 fdca 	bl	8009678 <__assert_func>
 8008ae4:	f100 0514 	add.w	r5, r0, #20
 8008ae8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008aec:	462b      	mov	r3, r5
 8008aee:	2200      	movs	r2, #0
 8008af0:	4543      	cmp	r3, r8
 8008af2:	d321      	bcc.n	8008b38 <__multiply+0x98>
 8008af4:	f104 0314 	add.w	r3, r4, #20
 8008af8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008afc:	f109 0314 	add.w	r3, r9, #20
 8008b00:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008b04:	9202      	str	r2, [sp, #8]
 8008b06:	1b3a      	subs	r2, r7, r4
 8008b08:	3a15      	subs	r2, #21
 8008b0a:	f022 0203 	bic.w	r2, r2, #3
 8008b0e:	3204      	adds	r2, #4
 8008b10:	f104 0115 	add.w	r1, r4, #21
 8008b14:	428f      	cmp	r7, r1
 8008b16:	bf38      	it	cc
 8008b18:	2204      	movcc	r2, #4
 8008b1a:	9201      	str	r2, [sp, #4]
 8008b1c:	9a02      	ldr	r2, [sp, #8]
 8008b1e:	9303      	str	r3, [sp, #12]
 8008b20:	429a      	cmp	r2, r3
 8008b22:	d80c      	bhi.n	8008b3e <__multiply+0x9e>
 8008b24:	2e00      	cmp	r6, #0
 8008b26:	dd03      	ble.n	8008b30 <__multiply+0x90>
 8008b28:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d05a      	beq.n	8008be6 <__multiply+0x146>
 8008b30:	6106      	str	r6, [r0, #16]
 8008b32:	b005      	add	sp, #20
 8008b34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b38:	f843 2b04 	str.w	r2, [r3], #4
 8008b3c:	e7d8      	b.n	8008af0 <__multiply+0x50>
 8008b3e:	f8b3 a000 	ldrh.w	sl, [r3]
 8008b42:	f1ba 0f00 	cmp.w	sl, #0
 8008b46:	d024      	beq.n	8008b92 <__multiply+0xf2>
 8008b48:	f104 0e14 	add.w	lr, r4, #20
 8008b4c:	46a9      	mov	r9, r5
 8008b4e:	f04f 0c00 	mov.w	ip, #0
 8008b52:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008b56:	f8d9 1000 	ldr.w	r1, [r9]
 8008b5a:	fa1f fb82 	uxth.w	fp, r2
 8008b5e:	b289      	uxth	r1, r1
 8008b60:	fb0a 110b 	mla	r1, sl, fp, r1
 8008b64:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8008b68:	f8d9 2000 	ldr.w	r2, [r9]
 8008b6c:	4461      	add	r1, ip
 8008b6e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008b72:	fb0a c20b 	mla	r2, sl, fp, ip
 8008b76:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008b7a:	b289      	uxth	r1, r1
 8008b7c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008b80:	4577      	cmp	r7, lr
 8008b82:	f849 1b04 	str.w	r1, [r9], #4
 8008b86:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008b8a:	d8e2      	bhi.n	8008b52 <__multiply+0xb2>
 8008b8c:	9a01      	ldr	r2, [sp, #4]
 8008b8e:	f845 c002 	str.w	ip, [r5, r2]
 8008b92:	9a03      	ldr	r2, [sp, #12]
 8008b94:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008b98:	3304      	adds	r3, #4
 8008b9a:	f1b9 0f00 	cmp.w	r9, #0
 8008b9e:	d020      	beq.n	8008be2 <__multiply+0x142>
 8008ba0:	6829      	ldr	r1, [r5, #0]
 8008ba2:	f104 0c14 	add.w	ip, r4, #20
 8008ba6:	46ae      	mov	lr, r5
 8008ba8:	f04f 0a00 	mov.w	sl, #0
 8008bac:	f8bc b000 	ldrh.w	fp, [ip]
 8008bb0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008bb4:	fb09 220b 	mla	r2, r9, fp, r2
 8008bb8:	4492      	add	sl, r2
 8008bba:	b289      	uxth	r1, r1
 8008bbc:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8008bc0:	f84e 1b04 	str.w	r1, [lr], #4
 8008bc4:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008bc8:	f8be 1000 	ldrh.w	r1, [lr]
 8008bcc:	0c12      	lsrs	r2, r2, #16
 8008bce:	fb09 1102 	mla	r1, r9, r2, r1
 8008bd2:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8008bd6:	4567      	cmp	r7, ip
 8008bd8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008bdc:	d8e6      	bhi.n	8008bac <__multiply+0x10c>
 8008bde:	9a01      	ldr	r2, [sp, #4]
 8008be0:	50a9      	str	r1, [r5, r2]
 8008be2:	3504      	adds	r5, #4
 8008be4:	e79a      	b.n	8008b1c <__multiply+0x7c>
 8008be6:	3e01      	subs	r6, #1
 8008be8:	e79c      	b.n	8008b24 <__multiply+0x84>
 8008bea:	bf00      	nop
 8008bec:	08009c83 	.word	0x08009c83
 8008bf0:	08009cf4 	.word	0x08009cf4

08008bf4 <__pow5mult>:
 8008bf4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008bf8:	4615      	mov	r5, r2
 8008bfa:	f012 0203 	ands.w	r2, r2, #3
 8008bfe:	4606      	mov	r6, r0
 8008c00:	460f      	mov	r7, r1
 8008c02:	d007      	beq.n	8008c14 <__pow5mult+0x20>
 8008c04:	4c25      	ldr	r4, [pc, #148]	; (8008c9c <__pow5mult+0xa8>)
 8008c06:	3a01      	subs	r2, #1
 8008c08:	2300      	movs	r3, #0
 8008c0a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008c0e:	f7ff fe9b 	bl	8008948 <__multadd>
 8008c12:	4607      	mov	r7, r0
 8008c14:	10ad      	asrs	r5, r5, #2
 8008c16:	d03d      	beq.n	8008c94 <__pow5mult+0xa0>
 8008c18:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008c1a:	b97c      	cbnz	r4, 8008c3c <__pow5mult+0x48>
 8008c1c:	2010      	movs	r0, #16
 8008c1e:	f7ff fe1b 	bl	8008858 <malloc>
 8008c22:	4602      	mov	r2, r0
 8008c24:	6270      	str	r0, [r6, #36]	; 0x24
 8008c26:	b928      	cbnz	r0, 8008c34 <__pow5mult+0x40>
 8008c28:	4b1d      	ldr	r3, [pc, #116]	; (8008ca0 <__pow5mult+0xac>)
 8008c2a:	481e      	ldr	r0, [pc, #120]	; (8008ca4 <__pow5mult+0xb0>)
 8008c2c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008c30:	f000 fd22 	bl	8009678 <__assert_func>
 8008c34:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008c38:	6004      	str	r4, [r0, #0]
 8008c3a:	60c4      	str	r4, [r0, #12]
 8008c3c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008c40:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008c44:	b94c      	cbnz	r4, 8008c5a <__pow5mult+0x66>
 8008c46:	f240 2171 	movw	r1, #625	; 0x271
 8008c4a:	4630      	mov	r0, r6
 8008c4c:	f7ff ff12 	bl	8008a74 <__i2b>
 8008c50:	2300      	movs	r3, #0
 8008c52:	f8c8 0008 	str.w	r0, [r8, #8]
 8008c56:	4604      	mov	r4, r0
 8008c58:	6003      	str	r3, [r0, #0]
 8008c5a:	f04f 0900 	mov.w	r9, #0
 8008c5e:	07eb      	lsls	r3, r5, #31
 8008c60:	d50a      	bpl.n	8008c78 <__pow5mult+0x84>
 8008c62:	4639      	mov	r1, r7
 8008c64:	4622      	mov	r2, r4
 8008c66:	4630      	mov	r0, r6
 8008c68:	f7ff ff1a 	bl	8008aa0 <__multiply>
 8008c6c:	4639      	mov	r1, r7
 8008c6e:	4680      	mov	r8, r0
 8008c70:	4630      	mov	r0, r6
 8008c72:	f7ff fe47 	bl	8008904 <_Bfree>
 8008c76:	4647      	mov	r7, r8
 8008c78:	106d      	asrs	r5, r5, #1
 8008c7a:	d00b      	beq.n	8008c94 <__pow5mult+0xa0>
 8008c7c:	6820      	ldr	r0, [r4, #0]
 8008c7e:	b938      	cbnz	r0, 8008c90 <__pow5mult+0x9c>
 8008c80:	4622      	mov	r2, r4
 8008c82:	4621      	mov	r1, r4
 8008c84:	4630      	mov	r0, r6
 8008c86:	f7ff ff0b 	bl	8008aa0 <__multiply>
 8008c8a:	6020      	str	r0, [r4, #0]
 8008c8c:	f8c0 9000 	str.w	r9, [r0]
 8008c90:	4604      	mov	r4, r0
 8008c92:	e7e4      	b.n	8008c5e <__pow5mult+0x6a>
 8008c94:	4638      	mov	r0, r7
 8008c96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008c9a:	bf00      	nop
 8008c9c:	08009e40 	.word	0x08009e40
 8008ca0:	08009c11 	.word	0x08009c11
 8008ca4:	08009cf4 	.word	0x08009cf4

08008ca8 <__lshift>:
 8008ca8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008cac:	460c      	mov	r4, r1
 8008cae:	6849      	ldr	r1, [r1, #4]
 8008cb0:	6923      	ldr	r3, [r4, #16]
 8008cb2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008cb6:	68a3      	ldr	r3, [r4, #8]
 8008cb8:	4607      	mov	r7, r0
 8008cba:	4691      	mov	r9, r2
 8008cbc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008cc0:	f108 0601 	add.w	r6, r8, #1
 8008cc4:	42b3      	cmp	r3, r6
 8008cc6:	db0b      	blt.n	8008ce0 <__lshift+0x38>
 8008cc8:	4638      	mov	r0, r7
 8008cca:	f7ff fddb 	bl	8008884 <_Balloc>
 8008cce:	4605      	mov	r5, r0
 8008cd0:	b948      	cbnz	r0, 8008ce6 <__lshift+0x3e>
 8008cd2:	4602      	mov	r2, r0
 8008cd4:	4b2a      	ldr	r3, [pc, #168]	; (8008d80 <__lshift+0xd8>)
 8008cd6:	482b      	ldr	r0, [pc, #172]	; (8008d84 <__lshift+0xdc>)
 8008cd8:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008cdc:	f000 fccc 	bl	8009678 <__assert_func>
 8008ce0:	3101      	adds	r1, #1
 8008ce2:	005b      	lsls	r3, r3, #1
 8008ce4:	e7ee      	b.n	8008cc4 <__lshift+0x1c>
 8008ce6:	2300      	movs	r3, #0
 8008ce8:	f100 0114 	add.w	r1, r0, #20
 8008cec:	f100 0210 	add.w	r2, r0, #16
 8008cf0:	4618      	mov	r0, r3
 8008cf2:	4553      	cmp	r3, sl
 8008cf4:	db37      	blt.n	8008d66 <__lshift+0xbe>
 8008cf6:	6920      	ldr	r0, [r4, #16]
 8008cf8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008cfc:	f104 0314 	add.w	r3, r4, #20
 8008d00:	f019 091f 	ands.w	r9, r9, #31
 8008d04:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008d08:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8008d0c:	d02f      	beq.n	8008d6e <__lshift+0xc6>
 8008d0e:	f1c9 0e20 	rsb	lr, r9, #32
 8008d12:	468a      	mov	sl, r1
 8008d14:	f04f 0c00 	mov.w	ip, #0
 8008d18:	681a      	ldr	r2, [r3, #0]
 8008d1a:	fa02 f209 	lsl.w	r2, r2, r9
 8008d1e:	ea42 020c 	orr.w	r2, r2, ip
 8008d22:	f84a 2b04 	str.w	r2, [sl], #4
 8008d26:	f853 2b04 	ldr.w	r2, [r3], #4
 8008d2a:	4298      	cmp	r0, r3
 8008d2c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8008d30:	d8f2      	bhi.n	8008d18 <__lshift+0x70>
 8008d32:	1b03      	subs	r3, r0, r4
 8008d34:	3b15      	subs	r3, #21
 8008d36:	f023 0303 	bic.w	r3, r3, #3
 8008d3a:	3304      	adds	r3, #4
 8008d3c:	f104 0215 	add.w	r2, r4, #21
 8008d40:	4290      	cmp	r0, r2
 8008d42:	bf38      	it	cc
 8008d44:	2304      	movcc	r3, #4
 8008d46:	f841 c003 	str.w	ip, [r1, r3]
 8008d4a:	f1bc 0f00 	cmp.w	ip, #0
 8008d4e:	d001      	beq.n	8008d54 <__lshift+0xac>
 8008d50:	f108 0602 	add.w	r6, r8, #2
 8008d54:	3e01      	subs	r6, #1
 8008d56:	4638      	mov	r0, r7
 8008d58:	612e      	str	r6, [r5, #16]
 8008d5a:	4621      	mov	r1, r4
 8008d5c:	f7ff fdd2 	bl	8008904 <_Bfree>
 8008d60:	4628      	mov	r0, r5
 8008d62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d66:	f842 0f04 	str.w	r0, [r2, #4]!
 8008d6a:	3301      	adds	r3, #1
 8008d6c:	e7c1      	b.n	8008cf2 <__lshift+0x4a>
 8008d6e:	3904      	subs	r1, #4
 8008d70:	f853 2b04 	ldr.w	r2, [r3], #4
 8008d74:	f841 2f04 	str.w	r2, [r1, #4]!
 8008d78:	4298      	cmp	r0, r3
 8008d7a:	d8f9      	bhi.n	8008d70 <__lshift+0xc8>
 8008d7c:	e7ea      	b.n	8008d54 <__lshift+0xac>
 8008d7e:	bf00      	nop
 8008d80:	08009c83 	.word	0x08009c83
 8008d84:	08009cf4 	.word	0x08009cf4

08008d88 <__mcmp>:
 8008d88:	b530      	push	{r4, r5, lr}
 8008d8a:	6902      	ldr	r2, [r0, #16]
 8008d8c:	690c      	ldr	r4, [r1, #16]
 8008d8e:	1b12      	subs	r2, r2, r4
 8008d90:	d10e      	bne.n	8008db0 <__mcmp+0x28>
 8008d92:	f100 0314 	add.w	r3, r0, #20
 8008d96:	3114      	adds	r1, #20
 8008d98:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008d9c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008da0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008da4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008da8:	42a5      	cmp	r5, r4
 8008daa:	d003      	beq.n	8008db4 <__mcmp+0x2c>
 8008dac:	d305      	bcc.n	8008dba <__mcmp+0x32>
 8008dae:	2201      	movs	r2, #1
 8008db0:	4610      	mov	r0, r2
 8008db2:	bd30      	pop	{r4, r5, pc}
 8008db4:	4283      	cmp	r3, r0
 8008db6:	d3f3      	bcc.n	8008da0 <__mcmp+0x18>
 8008db8:	e7fa      	b.n	8008db0 <__mcmp+0x28>
 8008dba:	f04f 32ff 	mov.w	r2, #4294967295
 8008dbe:	e7f7      	b.n	8008db0 <__mcmp+0x28>

08008dc0 <__mdiff>:
 8008dc0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008dc4:	460c      	mov	r4, r1
 8008dc6:	4606      	mov	r6, r0
 8008dc8:	4611      	mov	r1, r2
 8008dca:	4620      	mov	r0, r4
 8008dcc:	4690      	mov	r8, r2
 8008dce:	f7ff ffdb 	bl	8008d88 <__mcmp>
 8008dd2:	1e05      	subs	r5, r0, #0
 8008dd4:	d110      	bne.n	8008df8 <__mdiff+0x38>
 8008dd6:	4629      	mov	r1, r5
 8008dd8:	4630      	mov	r0, r6
 8008dda:	f7ff fd53 	bl	8008884 <_Balloc>
 8008dde:	b930      	cbnz	r0, 8008dee <__mdiff+0x2e>
 8008de0:	4b3a      	ldr	r3, [pc, #232]	; (8008ecc <__mdiff+0x10c>)
 8008de2:	4602      	mov	r2, r0
 8008de4:	f240 2132 	movw	r1, #562	; 0x232
 8008de8:	4839      	ldr	r0, [pc, #228]	; (8008ed0 <__mdiff+0x110>)
 8008dea:	f000 fc45 	bl	8009678 <__assert_func>
 8008dee:	2301      	movs	r3, #1
 8008df0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008df4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008df8:	bfa4      	itt	ge
 8008dfa:	4643      	movge	r3, r8
 8008dfc:	46a0      	movge	r8, r4
 8008dfe:	4630      	mov	r0, r6
 8008e00:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008e04:	bfa6      	itte	ge
 8008e06:	461c      	movge	r4, r3
 8008e08:	2500      	movge	r5, #0
 8008e0a:	2501      	movlt	r5, #1
 8008e0c:	f7ff fd3a 	bl	8008884 <_Balloc>
 8008e10:	b920      	cbnz	r0, 8008e1c <__mdiff+0x5c>
 8008e12:	4b2e      	ldr	r3, [pc, #184]	; (8008ecc <__mdiff+0x10c>)
 8008e14:	4602      	mov	r2, r0
 8008e16:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008e1a:	e7e5      	b.n	8008de8 <__mdiff+0x28>
 8008e1c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008e20:	6926      	ldr	r6, [r4, #16]
 8008e22:	60c5      	str	r5, [r0, #12]
 8008e24:	f104 0914 	add.w	r9, r4, #20
 8008e28:	f108 0514 	add.w	r5, r8, #20
 8008e2c:	f100 0e14 	add.w	lr, r0, #20
 8008e30:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008e34:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008e38:	f108 0210 	add.w	r2, r8, #16
 8008e3c:	46f2      	mov	sl, lr
 8008e3e:	2100      	movs	r1, #0
 8008e40:	f859 3b04 	ldr.w	r3, [r9], #4
 8008e44:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008e48:	fa1f f883 	uxth.w	r8, r3
 8008e4c:	fa11 f18b 	uxtah	r1, r1, fp
 8008e50:	0c1b      	lsrs	r3, r3, #16
 8008e52:	eba1 0808 	sub.w	r8, r1, r8
 8008e56:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008e5a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008e5e:	fa1f f888 	uxth.w	r8, r8
 8008e62:	1419      	asrs	r1, r3, #16
 8008e64:	454e      	cmp	r6, r9
 8008e66:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008e6a:	f84a 3b04 	str.w	r3, [sl], #4
 8008e6e:	d8e7      	bhi.n	8008e40 <__mdiff+0x80>
 8008e70:	1b33      	subs	r3, r6, r4
 8008e72:	3b15      	subs	r3, #21
 8008e74:	f023 0303 	bic.w	r3, r3, #3
 8008e78:	3304      	adds	r3, #4
 8008e7a:	3415      	adds	r4, #21
 8008e7c:	42a6      	cmp	r6, r4
 8008e7e:	bf38      	it	cc
 8008e80:	2304      	movcc	r3, #4
 8008e82:	441d      	add	r5, r3
 8008e84:	4473      	add	r3, lr
 8008e86:	469e      	mov	lr, r3
 8008e88:	462e      	mov	r6, r5
 8008e8a:	4566      	cmp	r6, ip
 8008e8c:	d30e      	bcc.n	8008eac <__mdiff+0xec>
 8008e8e:	f10c 0203 	add.w	r2, ip, #3
 8008e92:	1b52      	subs	r2, r2, r5
 8008e94:	f022 0203 	bic.w	r2, r2, #3
 8008e98:	3d03      	subs	r5, #3
 8008e9a:	45ac      	cmp	ip, r5
 8008e9c:	bf38      	it	cc
 8008e9e:	2200      	movcc	r2, #0
 8008ea0:	441a      	add	r2, r3
 8008ea2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8008ea6:	b17b      	cbz	r3, 8008ec8 <__mdiff+0x108>
 8008ea8:	6107      	str	r7, [r0, #16]
 8008eaa:	e7a3      	b.n	8008df4 <__mdiff+0x34>
 8008eac:	f856 8b04 	ldr.w	r8, [r6], #4
 8008eb0:	fa11 f288 	uxtah	r2, r1, r8
 8008eb4:	1414      	asrs	r4, r2, #16
 8008eb6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008eba:	b292      	uxth	r2, r2
 8008ebc:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8008ec0:	f84e 2b04 	str.w	r2, [lr], #4
 8008ec4:	1421      	asrs	r1, r4, #16
 8008ec6:	e7e0      	b.n	8008e8a <__mdiff+0xca>
 8008ec8:	3f01      	subs	r7, #1
 8008eca:	e7ea      	b.n	8008ea2 <__mdiff+0xe2>
 8008ecc:	08009c83 	.word	0x08009c83
 8008ed0:	08009cf4 	.word	0x08009cf4

08008ed4 <__d2b>:
 8008ed4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008ed8:	4689      	mov	r9, r1
 8008eda:	2101      	movs	r1, #1
 8008edc:	ec57 6b10 	vmov	r6, r7, d0
 8008ee0:	4690      	mov	r8, r2
 8008ee2:	f7ff fccf 	bl	8008884 <_Balloc>
 8008ee6:	4604      	mov	r4, r0
 8008ee8:	b930      	cbnz	r0, 8008ef8 <__d2b+0x24>
 8008eea:	4602      	mov	r2, r0
 8008eec:	4b25      	ldr	r3, [pc, #148]	; (8008f84 <__d2b+0xb0>)
 8008eee:	4826      	ldr	r0, [pc, #152]	; (8008f88 <__d2b+0xb4>)
 8008ef0:	f240 310a 	movw	r1, #778	; 0x30a
 8008ef4:	f000 fbc0 	bl	8009678 <__assert_func>
 8008ef8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008efc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008f00:	bb35      	cbnz	r5, 8008f50 <__d2b+0x7c>
 8008f02:	2e00      	cmp	r6, #0
 8008f04:	9301      	str	r3, [sp, #4]
 8008f06:	d028      	beq.n	8008f5a <__d2b+0x86>
 8008f08:	4668      	mov	r0, sp
 8008f0a:	9600      	str	r6, [sp, #0]
 8008f0c:	f7ff fd82 	bl	8008a14 <__lo0bits>
 8008f10:	9900      	ldr	r1, [sp, #0]
 8008f12:	b300      	cbz	r0, 8008f56 <__d2b+0x82>
 8008f14:	9a01      	ldr	r2, [sp, #4]
 8008f16:	f1c0 0320 	rsb	r3, r0, #32
 8008f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8008f1e:	430b      	orrs	r3, r1
 8008f20:	40c2      	lsrs	r2, r0
 8008f22:	6163      	str	r3, [r4, #20]
 8008f24:	9201      	str	r2, [sp, #4]
 8008f26:	9b01      	ldr	r3, [sp, #4]
 8008f28:	61a3      	str	r3, [r4, #24]
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	bf14      	ite	ne
 8008f2e:	2202      	movne	r2, #2
 8008f30:	2201      	moveq	r2, #1
 8008f32:	6122      	str	r2, [r4, #16]
 8008f34:	b1d5      	cbz	r5, 8008f6c <__d2b+0x98>
 8008f36:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008f3a:	4405      	add	r5, r0
 8008f3c:	f8c9 5000 	str.w	r5, [r9]
 8008f40:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008f44:	f8c8 0000 	str.w	r0, [r8]
 8008f48:	4620      	mov	r0, r4
 8008f4a:	b003      	add	sp, #12
 8008f4c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008f50:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008f54:	e7d5      	b.n	8008f02 <__d2b+0x2e>
 8008f56:	6161      	str	r1, [r4, #20]
 8008f58:	e7e5      	b.n	8008f26 <__d2b+0x52>
 8008f5a:	a801      	add	r0, sp, #4
 8008f5c:	f7ff fd5a 	bl	8008a14 <__lo0bits>
 8008f60:	9b01      	ldr	r3, [sp, #4]
 8008f62:	6163      	str	r3, [r4, #20]
 8008f64:	2201      	movs	r2, #1
 8008f66:	6122      	str	r2, [r4, #16]
 8008f68:	3020      	adds	r0, #32
 8008f6a:	e7e3      	b.n	8008f34 <__d2b+0x60>
 8008f6c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008f70:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008f74:	f8c9 0000 	str.w	r0, [r9]
 8008f78:	6918      	ldr	r0, [r3, #16]
 8008f7a:	f7ff fd2b 	bl	80089d4 <__hi0bits>
 8008f7e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008f82:	e7df      	b.n	8008f44 <__d2b+0x70>
 8008f84:	08009c83 	.word	0x08009c83
 8008f88:	08009cf4 	.word	0x08009cf4

08008f8c <_calloc_r>:
 8008f8c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008f8e:	fba1 2402 	umull	r2, r4, r1, r2
 8008f92:	b94c      	cbnz	r4, 8008fa8 <_calloc_r+0x1c>
 8008f94:	4611      	mov	r1, r2
 8008f96:	9201      	str	r2, [sp, #4]
 8008f98:	f000 f87a 	bl	8009090 <_malloc_r>
 8008f9c:	9a01      	ldr	r2, [sp, #4]
 8008f9e:	4605      	mov	r5, r0
 8008fa0:	b930      	cbnz	r0, 8008fb0 <_calloc_r+0x24>
 8008fa2:	4628      	mov	r0, r5
 8008fa4:	b003      	add	sp, #12
 8008fa6:	bd30      	pop	{r4, r5, pc}
 8008fa8:	220c      	movs	r2, #12
 8008faa:	6002      	str	r2, [r0, #0]
 8008fac:	2500      	movs	r5, #0
 8008fae:	e7f8      	b.n	8008fa2 <_calloc_r+0x16>
 8008fb0:	4621      	mov	r1, r4
 8008fb2:	f7fe f84d 	bl	8007050 <memset>
 8008fb6:	e7f4      	b.n	8008fa2 <_calloc_r+0x16>

08008fb8 <_free_r>:
 8008fb8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008fba:	2900      	cmp	r1, #0
 8008fbc:	d044      	beq.n	8009048 <_free_r+0x90>
 8008fbe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008fc2:	9001      	str	r0, [sp, #4]
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	f1a1 0404 	sub.w	r4, r1, #4
 8008fca:	bfb8      	it	lt
 8008fcc:	18e4      	addlt	r4, r4, r3
 8008fce:	f000 fcdf 	bl	8009990 <__malloc_lock>
 8008fd2:	4a1e      	ldr	r2, [pc, #120]	; (800904c <_free_r+0x94>)
 8008fd4:	9801      	ldr	r0, [sp, #4]
 8008fd6:	6813      	ldr	r3, [r2, #0]
 8008fd8:	b933      	cbnz	r3, 8008fe8 <_free_r+0x30>
 8008fda:	6063      	str	r3, [r4, #4]
 8008fdc:	6014      	str	r4, [r2, #0]
 8008fde:	b003      	add	sp, #12
 8008fe0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008fe4:	f000 bcda 	b.w	800999c <__malloc_unlock>
 8008fe8:	42a3      	cmp	r3, r4
 8008fea:	d908      	bls.n	8008ffe <_free_r+0x46>
 8008fec:	6825      	ldr	r5, [r4, #0]
 8008fee:	1961      	adds	r1, r4, r5
 8008ff0:	428b      	cmp	r3, r1
 8008ff2:	bf01      	itttt	eq
 8008ff4:	6819      	ldreq	r1, [r3, #0]
 8008ff6:	685b      	ldreq	r3, [r3, #4]
 8008ff8:	1949      	addeq	r1, r1, r5
 8008ffa:	6021      	streq	r1, [r4, #0]
 8008ffc:	e7ed      	b.n	8008fda <_free_r+0x22>
 8008ffe:	461a      	mov	r2, r3
 8009000:	685b      	ldr	r3, [r3, #4]
 8009002:	b10b      	cbz	r3, 8009008 <_free_r+0x50>
 8009004:	42a3      	cmp	r3, r4
 8009006:	d9fa      	bls.n	8008ffe <_free_r+0x46>
 8009008:	6811      	ldr	r1, [r2, #0]
 800900a:	1855      	adds	r5, r2, r1
 800900c:	42a5      	cmp	r5, r4
 800900e:	d10b      	bne.n	8009028 <_free_r+0x70>
 8009010:	6824      	ldr	r4, [r4, #0]
 8009012:	4421      	add	r1, r4
 8009014:	1854      	adds	r4, r2, r1
 8009016:	42a3      	cmp	r3, r4
 8009018:	6011      	str	r1, [r2, #0]
 800901a:	d1e0      	bne.n	8008fde <_free_r+0x26>
 800901c:	681c      	ldr	r4, [r3, #0]
 800901e:	685b      	ldr	r3, [r3, #4]
 8009020:	6053      	str	r3, [r2, #4]
 8009022:	4421      	add	r1, r4
 8009024:	6011      	str	r1, [r2, #0]
 8009026:	e7da      	b.n	8008fde <_free_r+0x26>
 8009028:	d902      	bls.n	8009030 <_free_r+0x78>
 800902a:	230c      	movs	r3, #12
 800902c:	6003      	str	r3, [r0, #0]
 800902e:	e7d6      	b.n	8008fde <_free_r+0x26>
 8009030:	6825      	ldr	r5, [r4, #0]
 8009032:	1961      	adds	r1, r4, r5
 8009034:	428b      	cmp	r3, r1
 8009036:	bf04      	itt	eq
 8009038:	6819      	ldreq	r1, [r3, #0]
 800903a:	685b      	ldreq	r3, [r3, #4]
 800903c:	6063      	str	r3, [r4, #4]
 800903e:	bf04      	itt	eq
 8009040:	1949      	addeq	r1, r1, r5
 8009042:	6021      	streq	r1, [r4, #0]
 8009044:	6054      	str	r4, [r2, #4]
 8009046:	e7ca      	b.n	8008fde <_free_r+0x26>
 8009048:	b003      	add	sp, #12
 800904a:	bd30      	pop	{r4, r5, pc}
 800904c:	20000478 	.word	0x20000478

08009050 <sbrk_aligned>:
 8009050:	b570      	push	{r4, r5, r6, lr}
 8009052:	4e0e      	ldr	r6, [pc, #56]	; (800908c <sbrk_aligned+0x3c>)
 8009054:	460c      	mov	r4, r1
 8009056:	6831      	ldr	r1, [r6, #0]
 8009058:	4605      	mov	r5, r0
 800905a:	b911      	cbnz	r1, 8009062 <sbrk_aligned+0x12>
 800905c:	f000 f9e6 	bl	800942c <_sbrk_r>
 8009060:	6030      	str	r0, [r6, #0]
 8009062:	4621      	mov	r1, r4
 8009064:	4628      	mov	r0, r5
 8009066:	f000 f9e1 	bl	800942c <_sbrk_r>
 800906a:	1c43      	adds	r3, r0, #1
 800906c:	d00a      	beq.n	8009084 <sbrk_aligned+0x34>
 800906e:	1cc4      	adds	r4, r0, #3
 8009070:	f024 0403 	bic.w	r4, r4, #3
 8009074:	42a0      	cmp	r0, r4
 8009076:	d007      	beq.n	8009088 <sbrk_aligned+0x38>
 8009078:	1a21      	subs	r1, r4, r0
 800907a:	4628      	mov	r0, r5
 800907c:	f000 f9d6 	bl	800942c <_sbrk_r>
 8009080:	3001      	adds	r0, #1
 8009082:	d101      	bne.n	8009088 <sbrk_aligned+0x38>
 8009084:	f04f 34ff 	mov.w	r4, #4294967295
 8009088:	4620      	mov	r0, r4
 800908a:	bd70      	pop	{r4, r5, r6, pc}
 800908c:	2000047c 	.word	0x2000047c

08009090 <_malloc_r>:
 8009090:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009094:	1ccd      	adds	r5, r1, #3
 8009096:	f025 0503 	bic.w	r5, r5, #3
 800909a:	3508      	adds	r5, #8
 800909c:	2d0c      	cmp	r5, #12
 800909e:	bf38      	it	cc
 80090a0:	250c      	movcc	r5, #12
 80090a2:	2d00      	cmp	r5, #0
 80090a4:	4607      	mov	r7, r0
 80090a6:	db01      	blt.n	80090ac <_malloc_r+0x1c>
 80090a8:	42a9      	cmp	r1, r5
 80090aa:	d905      	bls.n	80090b8 <_malloc_r+0x28>
 80090ac:	230c      	movs	r3, #12
 80090ae:	603b      	str	r3, [r7, #0]
 80090b0:	2600      	movs	r6, #0
 80090b2:	4630      	mov	r0, r6
 80090b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80090b8:	4e2e      	ldr	r6, [pc, #184]	; (8009174 <_malloc_r+0xe4>)
 80090ba:	f000 fc69 	bl	8009990 <__malloc_lock>
 80090be:	6833      	ldr	r3, [r6, #0]
 80090c0:	461c      	mov	r4, r3
 80090c2:	bb34      	cbnz	r4, 8009112 <_malloc_r+0x82>
 80090c4:	4629      	mov	r1, r5
 80090c6:	4638      	mov	r0, r7
 80090c8:	f7ff ffc2 	bl	8009050 <sbrk_aligned>
 80090cc:	1c43      	adds	r3, r0, #1
 80090ce:	4604      	mov	r4, r0
 80090d0:	d14d      	bne.n	800916e <_malloc_r+0xde>
 80090d2:	6834      	ldr	r4, [r6, #0]
 80090d4:	4626      	mov	r6, r4
 80090d6:	2e00      	cmp	r6, #0
 80090d8:	d140      	bne.n	800915c <_malloc_r+0xcc>
 80090da:	6823      	ldr	r3, [r4, #0]
 80090dc:	4631      	mov	r1, r6
 80090de:	4638      	mov	r0, r7
 80090e0:	eb04 0803 	add.w	r8, r4, r3
 80090e4:	f000 f9a2 	bl	800942c <_sbrk_r>
 80090e8:	4580      	cmp	r8, r0
 80090ea:	d13a      	bne.n	8009162 <_malloc_r+0xd2>
 80090ec:	6821      	ldr	r1, [r4, #0]
 80090ee:	3503      	adds	r5, #3
 80090f0:	1a6d      	subs	r5, r5, r1
 80090f2:	f025 0503 	bic.w	r5, r5, #3
 80090f6:	3508      	adds	r5, #8
 80090f8:	2d0c      	cmp	r5, #12
 80090fa:	bf38      	it	cc
 80090fc:	250c      	movcc	r5, #12
 80090fe:	4629      	mov	r1, r5
 8009100:	4638      	mov	r0, r7
 8009102:	f7ff ffa5 	bl	8009050 <sbrk_aligned>
 8009106:	3001      	adds	r0, #1
 8009108:	d02b      	beq.n	8009162 <_malloc_r+0xd2>
 800910a:	6823      	ldr	r3, [r4, #0]
 800910c:	442b      	add	r3, r5
 800910e:	6023      	str	r3, [r4, #0]
 8009110:	e00e      	b.n	8009130 <_malloc_r+0xa0>
 8009112:	6822      	ldr	r2, [r4, #0]
 8009114:	1b52      	subs	r2, r2, r5
 8009116:	d41e      	bmi.n	8009156 <_malloc_r+0xc6>
 8009118:	2a0b      	cmp	r2, #11
 800911a:	d916      	bls.n	800914a <_malloc_r+0xba>
 800911c:	1961      	adds	r1, r4, r5
 800911e:	42a3      	cmp	r3, r4
 8009120:	6025      	str	r5, [r4, #0]
 8009122:	bf18      	it	ne
 8009124:	6059      	strne	r1, [r3, #4]
 8009126:	6863      	ldr	r3, [r4, #4]
 8009128:	bf08      	it	eq
 800912a:	6031      	streq	r1, [r6, #0]
 800912c:	5162      	str	r2, [r4, r5]
 800912e:	604b      	str	r3, [r1, #4]
 8009130:	4638      	mov	r0, r7
 8009132:	f104 060b 	add.w	r6, r4, #11
 8009136:	f000 fc31 	bl	800999c <__malloc_unlock>
 800913a:	f026 0607 	bic.w	r6, r6, #7
 800913e:	1d23      	adds	r3, r4, #4
 8009140:	1af2      	subs	r2, r6, r3
 8009142:	d0b6      	beq.n	80090b2 <_malloc_r+0x22>
 8009144:	1b9b      	subs	r3, r3, r6
 8009146:	50a3      	str	r3, [r4, r2]
 8009148:	e7b3      	b.n	80090b2 <_malloc_r+0x22>
 800914a:	6862      	ldr	r2, [r4, #4]
 800914c:	42a3      	cmp	r3, r4
 800914e:	bf0c      	ite	eq
 8009150:	6032      	streq	r2, [r6, #0]
 8009152:	605a      	strne	r2, [r3, #4]
 8009154:	e7ec      	b.n	8009130 <_malloc_r+0xa0>
 8009156:	4623      	mov	r3, r4
 8009158:	6864      	ldr	r4, [r4, #4]
 800915a:	e7b2      	b.n	80090c2 <_malloc_r+0x32>
 800915c:	4634      	mov	r4, r6
 800915e:	6876      	ldr	r6, [r6, #4]
 8009160:	e7b9      	b.n	80090d6 <_malloc_r+0x46>
 8009162:	230c      	movs	r3, #12
 8009164:	603b      	str	r3, [r7, #0]
 8009166:	4638      	mov	r0, r7
 8009168:	f000 fc18 	bl	800999c <__malloc_unlock>
 800916c:	e7a1      	b.n	80090b2 <_malloc_r+0x22>
 800916e:	6025      	str	r5, [r4, #0]
 8009170:	e7de      	b.n	8009130 <_malloc_r+0xa0>
 8009172:	bf00      	nop
 8009174:	20000478 	.word	0x20000478

08009178 <__sfputc_r>:
 8009178:	6893      	ldr	r3, [r2, #8]
 800917a:	3b01      	subs	r3, #1
 800917c:	2b00      	cmp	r3, #0
 800917e:	b410      	push	{r4}
 8009180:	6093      	str	r3, [r2, #8]
 8009182:	da08      	bge.n	8009196 <__sfputc_r+0x1e>
 8009184:	6994      	ldr	r4, [r2, #24]
 8009186:	42a3      	cmp	r3, r4
 8009188:	db01      	blt.n	800918e <__sfputc_r+0x16>
 800918a:	290a      	cmp	r1, #10
 800918c:	d103      	bne.n	8009196 <__sfputc_r+0x1e>
 800918e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009192:	f000 b99f 	b.w	80094d4 <__swbuf_r>
 8009196:	6813      	ldr	r3, [r2, #0]
 8009198:	1c58      	adds	r0, r3, #1
 800919a:	6010      	str	r0, [r2, #0]
 800919c:	7019      	strb	r1, [r3, #0]
 800919e:	4608      	mov	r0, r1
 80091a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80091a4:	4770      	bx	lr

080091a6 <__sfputs_r>:
 80091a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091a8:	4606      	mov	r6, r0
 80091aa:	460f      	mov	r7, r1
 80091ac:	4614      	mov	r4, r2
 80091ae:	18d5      	adds	r5, r2, r3
 80091b0:	42ac      	cmp	r4, r5
 80091b2:	d101      	bne.n	80091b8 <__sfputs_r+0x12>
 80091b4:	2000      	movs	r0, #0
 80091b6:	e007      	b.n	80091c8 <__sfputs_r+0x22>
 80091b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80091bc:	463a      	mov	r2, r7
 80091be:	4630      	mov	r0, r6
 80091c0:	f7ff ffda 	bl	8009178 <__sfputc_r>
 80091c4:	1c43      	adds	r3, r0, #1
 80091c6:	d1f3      	bne.n	80091b0 <__sfputs_r+0xa>
 80091c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080091cc <_vfiprintf_r>:
 80091cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091d0:	460d      	mov	r5, r1
 80091d2:	b09d      	sub	sp, #116	; 0x74
 80091d4:	4614      	mov	r4, r2
 80091d6:	4698      	mov	r8, r3
 80091d8:	4606      	mov	r6, r0
 80091da:	b118      	cbz	r0, 80091e4 <_vfiprintf_r+0x18>
 80091dc:	6983      	ldr	r3, [r0, #24]
 80091de:	b90b      	cbnz	r3, 80091e4 <_vfiprintf_r+0x18>
 80091e0:	f7ff fa94 	bl	800870c <__sinit>
 80091e4:	4b89      	ldr	r3, [pc, #548]	; (800940c <_vfiprintf_r+0x240>)
 80091e6:	429d      	cmp	r5, r3
 80091e8:	d11b      	bne.n	8009222 <_vfiprintf_r+0x56>
 80091ea:	6875      	ldr	r5, [r6, #4]
 80091ec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80091ee:	07d9      	lsls	r1, r3, #31
 80091f0:	d405      	bmi.n	80091fe <_vfiprintf_r+0x32>
 80091f2:	89ab      	ldrh	r3, [r5, #12]
 80091f4:	059a      	lsls	r2, r3, #22
 80091f6:	d402      	bmi.n	80091fe <_vfiprintf_r+0x32>
 80091f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80091fa:	f7ff fb2a 	bl	8008852 <__retarget_lock_acquire_recursive>
 80091fe:	89ab      	ldrh	r3, [r5, #12]
 8009200:	071b      	lsls	r3, r3, #28
 8009202:	d501      	bpl.n	8009208 <_vfiprintf_r+0x3c>
 8009204:	692b      	ldr	r3, [r5, #16]
 8009206:	b9eb      	cbnz	r3, 8009244 <_vfiprintf_r+0x78>
 8009208:	4629      	mov	r1, r5
 800920a:	4630      	mov	r0, r6
 800920c:	f000 f9c6 	bl	800959c <__swsetup_r>
 8009210:	b1c0      	cbz	r0, 8009244 <_vfiprintf_r+0x78>
 8009212:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009214:	07dc      	lsls	r4, r3, #31
 8009216:	d50e      	bpl.n	8009236 <_vfiprintf_r+0x6a>
 8009218:	f04f 30ff 	mov.w	r0, #4294967295
 800921c:	b01d      	add	sp, #116	; 0x74
 800921e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009222:	4b7b      	ldr	r3, [pc, #492]	; (8009410 <_vfiprintf_r+0x244>)
 8009224:	429d      	cmp	r5, r3
 8009226:	d101      	bne.n	800922c <_vfiprintf_r+0x60>
 8009228:	68b5      	ldr	r5, [r6, #8]
 800922a:	e7df      	b.n	80091ec <_vfiprintf_r+0x20>
 800922c:	4b79      	ldr	r3, [pc, #484]	; (8009414 <_vfiprintf_r+0x248>)
 800922e:	429d      	cmp	r5, r3
 8009230:	bf08      	it	eq
 8009232:	68f5      	ldreq	r5, [r6, #12]
 8009234:	e7da      	b.n	80091ec <_vfiprintf_r+0x20>
 8009236:	89ab      	ldrh	r3, [r5, #12]
 8009238:	0598      	lsls	r0, r3, #22
 800923a:	d4ed      	bmi.n	8009218 <_vfiprintf_r+0x4c>
 800923c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800923e:	f7ff fb09 	bl	8008854 <__retarget_lock_release_recursive>
 8009242:	e7e9      	b.n	8009218 <_vfiprintf_r+0x4c>
 8009244:	2300      	movs	r3, #0
 8009246:	9309      	str	r3, [sp, #36]	; 0x24
 8009248:	2320      	movs	r3, #32
 800924a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800924e:	f8cd 800c 	str.w	r8, [sp, #12]
 8009252:	2330      	movs	r3, #48	; 0x30
 8009254:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009418 <_vfiprintf_r+0x24c>
 8009258:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800925c:	f04f 0901 	mov.w	r9, #1
 8009260:	4623      	mov	r3, r4
 8009262:	469a      	mov	sl, r3
 8009264:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009268:	b10a      	cbz	r2, 800926e <_vfiprintf_r+0xa2>
 800926a:	2a25      	cmp	r2, #37	; 0x25
 800926c:	d1f9      	bne.n	8009262 <_vfiprintf_r+0x96>
 800926e:	ebba 0b04 	subs.w	fp, sl, r4
 8009272:	d00b      	beq.n	800928c <_vfiprintf_r+0xc0>
 8009274:	465b      	mov	r3, fp
 8009276:	4622      	mov	r2, r4
 8009278:	4629      	mov	r1, r5
 800927a:	4630      	mov	r0, r6
 800927c:	f7ff ff93 	bl	80091a6 <__sfputs_r>
 8009280:	3001      	adds	r0, #1
 8009282:	f000 80aa 	beq.w	80093da <_vfiprintf_r+0x20e>
 8009286:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009288:	445a      	add	r2, fp
 800928a:	9209      	str	r2, [sp, #36]	; 0x24
 800928c:	f89a 3000 	ldrb.w	r3, [sl]
 8009290:	2b00      	cmp	r3, #0
 8009292:	f000 80a2 	beq.w	80093da <_vfiprintf_r+0x20e>
 8009296:	2300      	movs	r3, #0
 8009298:	f04f 32ff 	mov.w	r2, #4294967295
 800929c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80092a0:	f10a 0a01 	add.w	sl, sl, #1
 80092a4:	9304      	str	r3, [sp, #16]
 80092a6:	9307      	str	r3, [sp, #28]
 80092a8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80092ac:	931a      	str	r3, [sp, #104]	; 0x68
 80092ae:	4654      	mov	r4, sl
 80092b0:	2205      	movs	r2, #5
 80092b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80092b6:	4858      	ldr	r0, [pc, #352]	; (8009418 <_vfiprintf_r+0x24c>)
 80092b8:	f7f6 ffb2 	bl	8000220 <memchr>
 80092bc:	9a04      	ldr	r2, [sp, #16]
 80092be:	b9d8      	cbnz	r0, 80092f8 <_vfiprintf_r+0x12c>
 80092c0:	06d1      	lsls	r1, r2, #27
 80092c2:	bf44      	itt	mi
 80092c4:	2320      	movmi	r3, #32
 80092c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80092ca:	0713      	lsls	r3, r2, #28
 80092cc:	bf44      	itt	mi
 80092ce:	232b      	movmi	r3, #43	; 0x2b
 80092d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80092d4:	f89a 3000 	ldrb.w	r3, [sl]
 80092d8:	2b2a      	cmp	r3, #42	; 0x2a
 80092da:	d015      	beq.n	8009308 <_vfiprintf_r+0x13c>
 80092dc:	9a07      	ldr	r2, [sp, #28]
 80092de:	4654      	mov	r4, sl
 80092e0:	2000      	movs	r0, #0
 80092e2:	f04f 0c0a 	mov.w	ip, #10
 80092e6:	4621      	mov	r1, r4
 80092e8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80092ec:	3b30      	subs	r3, #48	; 0x30
 80092ee:	2b09      	cmp	r3, #9
 80092f0:	d94e      	bls.n	8009390 <_vfiprintf_r+0x1c4>
 80092f2:	b1b0      	cbz	r0, 8009322 <_vfiprintf_r+0x156>
 80092f4:	9207      	str	r2, [sp, #28]
 80092f6:	e014      	b.n	8009322 <_vfiprintf_r+0x156>
 80092f8:	eba0 0308 	sub.w	r3, r0, r8
 80092fc:	fa09 f303 	lsl.w	r3, r9, r3
 8009300:	4313      	orrs	r3, r2
 8009302:	9304      	str	r3, [sp, #16]
 8009304:	46a2      	mov	sl, r4
 8009306:	e7d2      	b.n	80092ae <_vfiprintf_r+0xe2>
 8009308:	9b03      	ldr	r3, [sp, #12]
 800930a:	1d19      	adds	r1, r3, #4
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	9103      	str	r1, [sp, #12]
 8009310:	2b00      	cmp	r3, #0
 8009312:	bfbb      	ittet	lt
 8009314:	425b      	neglt	r3, r3
 8009316:	f042 0202 	orrlt.w	r2, r2, #2
 800931a:	9307      	strge	r3, [sp, #28]
 800931c:	9307      	strlt	r3, [sp, #28]
 800931e:	bfb8      	it	lt
 8009320:	9204      	strlt	r2, [sp, #16]
 8009322:	7823      	ldrb	r3, [r4, #0]
 8009324:	2b2e      	cmp	r3, #46	; 0x2e
 8009326:	d10c      	bne.n	8009342 <_vfiprintf_r+0x176>
 8009328:	7863      	ldrb	r3, [r4, #1]
 800932a:	2b2a      	cmp	r3, #42	; 0x2a
 800932c:	d135      	bne.n	800939a <_vfiprintf_r+0x1ce>
 800932e:	9b03      	ldr	r3, [sp, #12]
 8009330:	1d1a      	adds	r2, r3, #4
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	9203      	str	r2, [sp, #12]
 8009336:	2b00      	cmp	r3, #0
 8009338:	bfb8      	it	lt
 800933a:	f04f 33ff 	movlt.w	r3, #4294967295
 800933e:	3402      	adds	r4, #2
 8009340:	9305      	str	r3, [sp, #20]
 8009342:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009428 <_vfiprintf_r+0x25c>
 8009346:	7821      	ldrb	r1, [r4, #0]
 8009348:	2203      	movs	r2, #3
 800934a:	4650      	mov	r0, sl
 800934c:	f7f6 ff68 	bl	8000220 <memchr>
 8009350:	b140      	cbz	r0, 8009364 <_vfiprintf_r+0x198>
 8009352:	2340      	movs	r3, #64	; 0x40
 8009354:	eba0 000a 	sub.w	r0, r0, sl
 8009358:	fa03 f000 	lsl.w	r0, r3, r0
 800935c:	9b04      	ldr	r3, [sp, #16]
 800935e:	4303      	orrs	r3, r0
 8009360:	3401      	adds	r4, #1
 8009362:	9304      	str	r3, [sp, #16]
 8009364:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009368:	482c      	ldr	r0, [pc, #176]	; (800941c <_vfiprintf_r+0x250>)
 800936a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800936e:	2206      	movs	r2, #6
 8009370:	f7f6 ff56 	bl	8000220 <memchr>
 8009374:	2800      	cmp	r0, #0
 8009376:	d03f      	beq.n	80093f8 <_vfiprintf_r+0x22c>
 8009378:	4b29      	ldr	r3, [pc, #164]	; (8009420 <_vfiprintf_r+0x254>)
 800937a:	bb1b      	cbnz	r3, 80093c4 <_vfiprintf_r+0x1f8>
 800937c:	9b03      	ldr	r3, [sp, #12]
 800937e:	3307      	adds	r3, #7
 8009380:	f023 0307 	bic.w	r3, r3, #7
 8009384:	3308      	adds	r3, #8
 8009386:	9303      	str	r3, [sp, #12]
 8009388:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800938a:	443b      	add	r3, r7
 800938c:	9309      	str	r3, [sp, #36]	; 0x24
 800938e:	e767      	b.n	8009260 <_vfiprintf_r+0x94>
 8009390:	fb0c 3202 	mla	r2, ip, r2, r3
 8009394:	460c      	mov	r4, r1
 8009396:	2001      	movs	r0, #1
 8009398:	e7a5      	b.n	80092e6 <_vfiprintf_r+0x11a>
 800939a:	2300      	movs	r3, #0
 800939c:	3401      	adds	r4, #1
 800939e:	9305      	str	r3, [sp, #20]
 80093a0:	4619      	mov	r1, r3
 80093a2:	f04f 0c0a 	mov.w	ip, #10
 80093a6:	4620      	mov	r0, r4
 80093a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80093ac:	3a30      	subs	r2, #48	; 0x30
 80093ae:	2a09      	cmp	r2, #9
 80093b0:	d903      	bls.n	80093ba <_vfiprintf_r+0x1ee>
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d0c5      	beq.n	8009342 <_vfiprintf_r+0x176>
 80093b6:	9105      	str	r1, [sp, #20]
 80093b8:	e7c3      	b.n	8009342 <_vfiprintf_r+0x176>
 80093ba:	fb0c 2101 	mla	r1, ip, r1, r2
 80093be:	4604      	mov	r4, r0
 80093c0:	2301      	movs	r3, #1
 80093c2:	e7f0      	b.n	80093a6 <_vfiprintf_r+0x1da>
 80093c4:	ab03      	add	r3, sp, #12
 80093c6:	9300      	str	r3, [sp, #0]
 80093c8:	462a      	mov	r2, r5
 80093ca:	4b16      	ldr	r3, [pc, #88]	; (8009424 <_vfiprintf_r+0x258>)
 80093cc:	a904      	add	r1, sp, #16
 80093ce:	4630      	mov	r0, r6
 80093d0:	f7fd fee6 	bl	80071a0 <_printf_float>
 80093d4:	4607      	mov	r7, r0
 80093d6:	1c78      	adds	r0, r7, #1
 80093d8:	d1d6      	bne.n	8009388 <_vfiprintf_r+0x1bc>
 80093da:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80093dc:	07d9      	lsls	r1, r3, #31
 80093de:	d405      	bmi.n	80093ec <_vfiprintf_r+0x220>
 80093e0:	89ab      	ldrh	r3, [r5, #12]
 80093e2:	059a      	lsls	r2, r3, #22
 80093e4:	d402      	bmi.n	80093ec <_vfiprintf_r+0x220>
 80093e6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80093e8:	f7ff fa34 	bl	8008854 <__retarget_lock_release_recursive>
 80093ec:	89ab      	ldrh	r3, [r5, #12]
 80093ee:	065b      	lsls	r3, r3, #25
 80093f0:	f53f af12 	bmi.w	8009218 <_vfiprintf_r+0x4c>
 80093f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80093f6:	e711      	b.n	800921c <_vfiprintf_r+0x50>
 80093f8:	ab03      	add	r3, sp, #12
 80093fa:	9300      	str	r3, [sp, #0]
 80093fc:	462a      	mov	r2, r5
 80093fe:	4b09      	ldr	r3, [pc, #36]	; (8009424 <_vfiprintf_r+0x258>)
 8009400:	a904      	add	r1, sp, #16
 8009402:	4630      	mov	r0, r6
 8009404:	f7fe f970 	bl	80076e8 <_printf_i>
 8009408:	e7e4      	b.n	80093d4 <_vfiprintf_r+0x208>
 800940a:	bf00      	nop
 800940c:	08009cb4 	.word	0x08009cb4
 8009410:	08009cd4 	.word	0x08009cd4
 8009414:	08009c94 	.word	0x08009c94
 8009418:	08009e4c 	.word	0x08009e4c
 800941c:	08009e56 	.word	0x08009e56
 8009420:	080071a1 	.word	0x080071a1
 8009424:	080091a7 	.word	0x080091a7
 8009428:	08009e52 	.word	0x08009e52

0800942c <_sbrk_r>:
 800942c:	b538      	push	{r3, r4, r5, lr}
 800942e:	4d06      	ldr	r5, [pc, #24]	; (8009448 <_sbrk_r+0x1c>)
 8009430:	2300      	movs	r3, #0
 8009432:	4604      	mov	r4, r0
 8009434:	4608      	mov	r0, r1
 8009436:	602b      	str	r3, [r5, #0]
 8009438:	f7f8 fd86 	bl	8001f48 <_sbrk>
 800943c:	1c43      	adds	r3, r0, #1
 800943e:	d102      	bne.n	8009446 <_sbrk_r+0x1a>
 8009440:	682b      	ldr	r3, [r5, #0]
 8009442:	b103      	cbz	r3, 8009446 <_sbrk_r+0x1a>
 8009444:	6023      	str	r3, [r4, #0]
 8009446:	bd38      	pop	{r3, r4, r5, pc}
 8009448:	20000480 	.word	0x20000480

0800944c <__sread>:
 800944c:	b510      	push	{r4, lr}
 800944e:	460c      	mov	r4, r1
 8009450:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009454:	f000 faa8 	bl	80099a8 <_read_r>
 8009458:	2800      	cmp	r0, #0
 800945a:	bfab      	itete	ge
 800945c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800945e:	89a3      	ldrhlt	r3, [r4, #12]
 8009460:	181b      	addge	r3, r3, r0
 8009462:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009466:	bfac      	ite	ge
 8009468:	6563      	strge	r3, [r4, #84]	; 0x54
 800946a:	81a3      	strhlt	r3, [r4, #12]
 800946c:	bd10      	pop	{r4, pc}

0800946e <__swrite>:
 800946e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009472:	461f      	mov	r7, r3
 8009474:	898b      	ldrh	r3, [r1, #12]
 8009476:	05db      	lsls	r3, r3, #23
 8009478:	4605      	mov	r5, r0
 800947a:	460c      	mov	r4, r1
 800947c:	4616      	mov	r6, r2
 800947e:	d505      	bpl.n	800948c <__swrite+0x1e>
 8009480:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009484:	2302      	movs	r3, #2
 8009486:	2200      	movs	r2, #0
 8009488:	f000 f9f8 	bl	800987c <_lseek_r>
 800948c:	89a3      	ldrh	r3, [r4, #12]
 800948e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009492:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009496:	81a3      	strh	r3, [r4, #12]
 8009498:	4632      	mov	r2, r6
 800949a:	463b      	mov	r3, r7
 800949c:	4628      	mov	r0, r5
 800949e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80094a2:	f000 b869 	b.w	8009578 <_write_r>

080094a6 <__sseek>:
 80094a6:	b510      	push	{r4, lr}
 80094a8:	460c      	mov	r4, r1
 80094aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80094ae:	f000 f9e5 	bl	800987c <_lseek_r>
 80094b2:	1c43      	adds	r3, r0, #1
 80094b4:	89a3      	ldrh	r3, [r4, #12]
 80094b6:	bf15      	itete	ne
 80094b8:	6560      	strne	r0, [r4, #84]	; 0x54
 80094ba:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80094be:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80094c2:	81a3      	strheq	r3, [r4, #12]
 80094c4:	bf18      	it	ne
 80094c6:	81a3      	strhne	r3, [r4, #12]
 80094c8:	bd10      	pop	{r4, pc}

080094ca <__sclose>:
 80094ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80094ce:	f000 b8f1 	b.w	80096b4 <_close_r>
	...

080094d4 <__swbuf_r>:
 80094d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094d6:	460e      	mov	r6, r1
 80094d8:	4614      	mov	r4, r2
 80094da:	4605      	mov	r5, r0
 80094dc:	b118      	cbz	r0, 80094e6 <__swbuf_r+0x12>
 80094de:	6983      	ldr	r3, [r0, #24]
 80094e0:	b90b      	cbnz	r3, 80094e6 <__swbuf_r+0x12>
 80094e2:	f7ff f913 	bl	800870c <__sinit>
 80094e6:	4b21      	ldr	r3, [pc, #132]	; (800956c <__swbuf_r+0x98>)
 80094e8:	429c      	cmp	r4, r3
 80094ea:	d12b      	bne.n	8009544 <__swbuf_r+0x70>
 80094ec:	686c      	ldr	r4, [r5, #4]
 80094ee:	69a3      	ldr	r3, [r4, #24]
 80094f0:	60a3      	str	r3, [r4, #8]
 80094f2:	89a3      	ldrh	r3, [r4, #12]
 80094f4:	071a      	lsls	r2, r3, #28
 80094f6:	d52f      	bpl.n	8009558 <__swbuf_r+0x84>
 80094f8:	6923      	ldr	r3, [r4, #16]
 80094fa:	b36b      	cbz	r3, 8009558 <__swbuf_r+0x84>
 80094fc:	6923      	ldr	r3, [r4, #16]
 80094fe:	6820      	ldr	r0, [r4, #0]
 8009500:	1ac0      	subs	r0, r0, r3
 8009502:	6963      	ldr	r3, [r4, #20]
 8009504:	b2f6      	uxtb	r6, r6
 8009506:	4283      	cmp	r3, r0
 8009508:	4637      	mov	r7, r6
 800950a:	dc04      	bgt.n	8009516 <__swbuf_r+0x42>
 800950c:	4621      	mov	r1, r4
 800950e:	4628      	mov	r0, r5
 8009510:	f000 f966 	bl	80097e0 <_fflush_r>
 8009514:	bb30      	cbnz	r0, 8009564 <__swbuf_r+0x90>
 8009516:	68a3      	ldr	r3, [r4, #8]
 8009518:	3b01      	subs	r3, #1
 800951a:	60a3      	str	r3, [r4, #8]
 800951c:	6823      	ldr	r3, [r4, #0]
 800951e:	1c5a      	adds	r2, r3, #1
 8009520:	6022      	str	r2, [r4, #0]
 8009522:	701e      	strb	r6, [r3, #0]
 8009524:	6963      	ldr	r3, [r4, #20]
 8009526:	3001      	adds	r0, #1
 8009528:	4283      	cmp	r3, r0
 800952a:	d004      	beq.n	8009536 <__swbuf_r+0x62>
 800952c:	89a3      	ldrh	r3, [r4, #12]
 800952e:	07db      	lsls	r3, r3, #31
 8009530:	d506      	bpl.n	8009540 <__swbuf_r+0x6c>
 8009532:	2e0a      	cmp	r6, #10
 8009534:	d104      	bne.n	8009540 <__swbuf_r+0x6c>
 8009536:	4621      	mov	r1, r4
 8009538:	4628      	mov	r0, r5
 800953a:	f000 f951 	bl	80097e0 <_fflush_r>
 800953e:	b988      	cbnz	r0, 8009564 <__swbuf_r+0x90>
 8009540:	4638      	mov	r0, r7
 8009542:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009544:	4b0a      	ldr	r3, [pc, #40]	; (8009570 <__swbuf_r+0x9c>)
 8009546:	429c      	cmp	r4, r3
 8009548:	d101      	bne.n	800954e <__swbuf_r+0x7a>
 800954a:	68ac      	ldr	r4, [r5, #8]
 800954c:	e7cf      	b.n	80094ee <__swbuf_r+0x1a>
 800954e:	4b09      	ldr	r3, [pc, #36]	; (8009574 <__swbuf_r+0xa0>)
 8009550:	429c      	cmp	r4, r3
 8009552:	bf08      	it	eq
 8009554:	68ec      	ldreq	r4, [r5, #12]
 8009556:	e7ca      	b.n	80094ee <__swbuf_r+0x1a>
 8009558:	4621      	mov	r1, r4
 800955a:	4628      	mov	r0, r5
 800955c:	f000 f81e 	bl	800959c <__swsetup_r>
 8009560:	2800      	cmp	r0, #0
 8009562:	d0cb      	beq.n	80094fc <__swbuf_r+0x28>
 8009564:	f04f 37ff 	mov.w	r7, #4294967295
 8009568:	e7ea      	b.n	8009540 <__swbuf_r+0x6c>
 800956a:	bf00      	nop
 800956c:	08009cb4 	.word	0x08009cb4
 8009570:	08009cd4 	.word	0x08009cd4
 8009574:	08009c94 	.word	0x08009c94

08009578 <_write_r>:
 8009578:	b538      	push	{r3, r4, r5, lr}
 800957a:	4d07      	ldr	r5, [pc, #28]	; (8009598 <_write_r+0x20>)
 800957c:	4604      	mov	r4, r0
 800957e:	4608      	mov	r0, r1
 8009580:	4611      	mov	r1, r2
 8009582:	2200      	movs	r2, #0
 8009584:	602a      	str	r2, [r5, #0]
 8009586:	461a      	mov	r2, r3
 8009588:	f7f8 f928 	bl	80017dc <_write>
 800958c:	1c43      	adds	r3, r0, #1
 800958e:	d102      	bne.n	8009596 <_write_r+0x1e>
 8009590:	682b      	ldr	r3, [r5, #0]
 8009592:	b103      	cbz	r3, 8009596 <_write_r+0x1e>
 8009594:	6023      	str	r3, [r4, #0]
 8009596:	bd38      	pop	{r3, r4, r5, pc}
 8009598:	20000480 	.word	0x20000480

0800959c <__swsetup_r>:
 800959c:	4b32      	ldr	r3, [pc, #200]	; (8009668 <__swsetup_r+0xcc>)
 800959e:	b570      	push	{r4, r5, r6, lr}
 80095a0:	681d      	ldr	r5, [r3, #0]
 80095a2:	4606      	mov	r6, r0
 80095a4:	460c      	mov	r4, r1
 80095a6:	b125      	cbz	r5, 80095b2 <__swsetup_r+0x16>
 80095a8:	69ab      	ldr	r3, [r5, #24]
 80095aa:	b913      	cbnz	r3, 80095b2 <__swsetup_r+0x16>
 80095ac:	4628      	mov	r0, r5
 80095ae:	f7ff f8ad 	bl	800870c <__sinit>
 80095b2:	4b2e      	ldr	r3, [pc, #184]	; (800966c <__swsetup_r+0xd0>)
 80095b4:	429c      	cmp	r4, r3
 80095b6:	d10f      	bne.n	80095d8 <__swsetup_r+0x3c>
 80095b8:	686c      	ldr	r4, [r5, #4]
 80095ba:	89a3      	ldrh	r3, [r4, #12]
 80095bc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80095c0:	0719      	lsls	r1, r3, #28
 80095c2:	d42c      	bmi.n	800961e <__swsetup_r+0x82>
 80095c4:	06dd      	lsls	r5, r3, #27
 80095c6:	d411      	bmi.n	80095ec <__swsetup_r+0x50>
 80095c8:	2309      	movs	r3, #9
 80095ca:	6033      	str	r3, [r6, #0]
 80095cc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80095d0:	81a3      	strh	r3, [r4, #12]
 80095d2:	f04f 30ff 	mov.w	r0, #4294967295
 80095d6:	e03e      	b.n	8009656 <__swsetup_r+0xba>
 80095d8:	4b25      	ldr	r3, [pc, #148]	; (8009670 <__swsetup_r+0xd4>)
 80095da:	429c      	cmp	r4, r3
 80095dc:	d101      	bne.n	80095e2 <__swsetup_r+0x46>
 80095de:	68ac      	ldr	r4, [r5, #8]
 80095e0:	e7eb      	b.n	80095ba <__swsetup_r+0x1e>
 80095e2:	4b24      	ldr	r3, [pc, #144]	; (8009674 <__swsetup_r+0xd8>)
 80095e4:	429c      	cmp	r4, r3
 80095e6:	bf08      	it	eq
 80095e8:	68ec      	ldreq	r4, [r5, #12]
 80095ea:	e7e6      	b.n	80095ba <__swsetup_r+0x1e>
 80095ec:	0758      	lsls	r0, r3, #29
 80095ee:	d512      	bpl.n	8009616 <__swsetup_r+0x7a>
 80095f0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80095f2:	b141      	cbz	r1, 8009606 <__swsetup_r+0x6a>
 80095f4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80095f8:	4299      	cmp	r1, r3
 80095fa:	d002      	beq.n	8009602 <__swsetup_r+0x66>
 80095fc:	4630      	mov	r0, r6
 80095fe:	f7ff fcdb 	bl	8008fb8 <_free_r>
 8009602:	2300      	movs	r3, #0
 8009604:	6363      	str	r3, [r4, #52]	; 0x34
 8009606:	89a3      	ldrh	r3, [r4, #12]
 8009608:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800960c:	81a3      	strh	r3, [r4, #12]
 800960e:	2300      	movs	r3, #0
 8009610:	6063      	str	r3, [r4, #4]
 8009612:	6923      	ldr	r3, [r4, #16]
 8009614:	6023      	str	r3, [r4, #0]
 8009616:	89a3      	ldrh	r3, [r4, #12]
 8009618:	f043 0308 	orr.w	r3, r3, #8
 800961c:	81a3      	strh	r3, [r4, #12]
 800961e:	6923      	ldr	r3, [r4, #16]
 8009620:	b94b      	cbnz	r3, 8009636 <__swsetup_r+0x9a>
 8009622:	89a3      	ldrh	r3, [r4, #12]
 8009624:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009628:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800962c:	d003      	beq.n	8009636 <__swsetup_r+0x9a>
 800962e:	4621      	mov	r1, r4
 8009630:	4630      	mov	r0, r6
 8009632:	f000 f95b 	bl	80098ec <__smakebuf_r>
 8009636:	89a0      	ldrh	r0, [r4, #12]
 8009638:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800963c:	f010 0301 	ands.w	r3, r0, #1
 8009640:	d00a      	beq.n	8009658 <__swsetup_r+0xbc>
 8009642:	2300      	movs	r3, #0
 8009644:	60a3      	str	r3, [r4, #8]
 8009646:	6963      	ldr	r3, [r4, #20]
 8009648:	425b      	negs	r3, r3
 800964a:	61a3      	str	r3, [r4, #24]
 800964c:	6923      	ldr	r3, [r4, #16]
 800964e:	b943      	cbnz	r3, 8009662 <__swsetup_r+0xc6>
 8009650:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009654:	d1ba      	bne.n	80095cc <__swsetup_r+0x30>
 8009656:	bd70      	pop	{r4, r5, r6, pc}
 8009658:	0781      	lsls	r1, r0, #30
 800965a:	bf58      	it	pl
 800965c:	6963      	ldrpl	r3, [r4, #20]
 800965e:	60a3      	str	r3, [r4, #8]
 8009660:	e7f4      	b.n	800964c <__swsetup_r+0xb0>
 8009662:	2000      	movs	r0, #0
 8009664:	e7f7      	b.n	8009656 <__swsetup_r+0xba>
 8009666:	bf00      	nop
 8009668:	2000000c 	.word	0x2000000c
 800966c:	08009cb4 	.word	0x08009cb4
 8009670:	08009cd4 	.word	0x08009cd4
 8009674:	08009c94 	.word	0x08009c94

08009678 <__assert_func>:
 8009678:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800967a:	4614      	mov	r4, r2
 800967c:	461a      	mov	r2, r3
 800967e:	4b09      	ldr	r3, [pc, #36]	; (80096a4 <__assert_func+0x2c>)
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	4605      	mov	r5, r0
 8009684:	68d8      	ldr	r0, [r3, #12]
 8009686:	b14c      	cbz	r4, 800969c <__assert_func+0x24>
 8009688:	4b07      	ldr	r3, [pc, #28]	; (80096a8 <__assert_func+0x30>)
 800968a:	9100      	str	r1, [sp, #0]
 800968c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009690:	4906      	ldr	r1, [pc, #24]	; (80096ac <__assert_func+0x34>)
 8009692:	462b      	mov	r3, r5
 8009694:	f000 f8e0 	bl	8009858 <fiprintf>
 8009698:	f000 f9a5 	bl	80099e6 <abort>
 800969c:	4b04      	ldr	r3, [pc, #16]	; (80096b0 <__assert_func+0x38>)
 800969e:	461c      	mov	r4, r3
 80096a0:	e7f3      	b.n	800968a <__assert_func+0x12>
 80096a2:	bf00      	nop
 80096a4:	2000000c 	.word	0x2000000c
 80096a8:	08009e5d 	.word	0x08009e5d
 80096ac:	08009e6a 	.word	0x08009e6a
 80096b0:	08009e98 	.word	0x08009e98

080096b4 <_close_r>:
 80096b4:	b538      	push	{r3, r4, r5, lr}
 80096b6:	4d06      	ldr	r5, [pc, #24]	; (80096d0 <_close_r+0x1c>)
 80096b8:	2300      	movs	r3, #0
 80096ba:	4604      	mov	r4, r0
 80096bc:	4608      	mov	r0, r1
 80096be:	602b      	str	r3, [r5, #0]
 80096c0:	f7f8 fc0d 	bl	8001ede <_close>
 80096c4:	1c43      	adds	r3, r0, #1
 80096c6:	d102      	bne.n	80096ce <_close_r+0x1a>
 80096c8:	682b      	ldr	r3, [r5, #0]
 80096ca:	b103      	cbz	r3, 80096ce <_close_r+0x1a>
 80096cc:	6023      	str	r3, [r4, #0]
 80096ce:	bd38      	pop	{r3, r4, r5, pc}
 80096d0:	20000480 	.word	0x20000480

080096d4 <__sflush_r>:
 80096d4:	898a      	ldrh	r2, [r1, #12]
 80096d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80096da:	4605      	mov	r5, r0
 80096dc:	0710      	lsls	r0, r2, #28
 80096de:	460c      	mov	r4, r1
 80096e0:	d458      	bmi.n	8009794 <__sflush_r+0xc0>
 80096e2:	684b      	ldr	r3, [r1, #4]
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	dc05      	bgt.n	80096f4 <__sflush_r+0x20>
 80096e8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	dc02      	bgt.n	80096f4 <__sflush_r+0x20>
 80096ee:	2000      	movs	r0, #0
 80096f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80096f4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80096f6:	2e00      	cmp	r6, #0
 80096f8:	d0f9      	beq.n	80096ee <__sflush_r+0x1a>
 80096fa:	2300      	movs	r3, #0
 80096fc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009700:	682f      	ldr	r7, [r5, #0]
 8009702:	602b      	str	r3, [r5, #0]
 8009704:	d032      	beq.n	800976c <__sflush_r+0x98>
 8009706:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009708:	89a3      	ldrh	r3, [r4, #12]
 800970a:	075a      	lsls	r2, r3, #29
 800970c:	d505      	bpl.n	800971a <__sflush_r+0x46>
 800970e:	6863      	ldr	r3, [r4, #4]
 8009710:	1ac0      	subs	r0, r0, r3
 8009712:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009714:	b10b      	cbz	r3, 800971a <__sflush_r+0x46>
 8009716:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009718:	1ac0      	subs	r0, r0, r3
 800971a:	2300      	movs	r3, #0
 800971c:	4602      	mov	r2, r0
 800971e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009720:	6a21      	ldr	r1, [r4, #32]
 8009722:	4628      	mov	r0, r5
 8009724:	47b0      	blx	r6
 8009726:	1c43      	adds	r3, r0, #1
 8009728:	89a3      	ldrh	r3, [r4, #12]
 800972a:	d106      	bne.n	800973a <__sflush_r+0x66>
 800972c:	6829      	ldr	r1, [r5, #0]
 800972e:	291d      	cmp	r1, #29
 8009730:	d82c      	bhi.n	800978c <__sflush_r+0xb8>
 8009732:	4a2a      	ldr	r2, [pc, #168]	; (80097dc <__sflush_r+0x108>)
 8009734:	40ca      	lsrs	r2, r1
 8009736:	07d6      	lsls	r6, r2, #31
 8009738:	d528      	bpl.n	800978c <__sflush_r+0xb8>
 800973a:	2200      	movs	r2, #0
 800973c:	6062      	str	r2, [r4, #4]
 800973e:	04d9      	lsls	r1, r3, #19
 8009740:	6922      	ldr	r2, [r4, #16]
 8009742:	6022      	str	r2, [r4, #0]
 8009744:	d504      	bpl.n	8009750 <__sflush_r+0x7c>
 8009746:	1c42      	adds	r2, r0, #1
 8009748:	d101      	bne.n	800974e <__sflush_r+0x7a>
 800974a:	682b      	ldr	r3, [r5, #0]
 800974c:	b903      	cbnz	r3, 8009750 <__sflush_r+0x7c>
 800974e:	6560      	str	r0, [r4, #84]	; 0x54
 8009750:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009752:	602f      	str	r7, [r5, #0]
 8009754:	2900      	cmp	r1, #0
 8009756:	d0ca      	beq.n	80096ee <__sflush_r+0x1a>
 8009758:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800975c:	4299      	cmp	r1, r3
 800975e:	d002      	beq.n	8009766 <__sflush_r+0x92>
 8009760:	4628      	mov	r0, r5
 8009762:	f7ff fc29 	bl	8008fb8 <_free_r>
 8009766:	2000      	movs	r0, #0
 8009768:	6360      	str	r0, [r4, #52]	; 0x34
 800976a:	e7c1      	b.n	80096f0 <__sflush_r+0x1c>
 800976c:	6a21      	ldr	r1, [r4, #32]
 800976e:	2301      	movs	r3, #1
 8009770:	4628      	mov	r0, r5
 8009772:	47b0      	blx	r6
 8009774:	1c41      	adds	r1, r0, #1
 8009776:	d1c7      	bne.n	8009708 <__sflush_r+0x34>
 8009778:	682b      	ldr	r3, [r5, #0]
 800977a:	2b00      	cmp	r3, #0
 800977c:	d0c4      	beq.n	8009708 <__sflush_r+0x34>
 800977e:	2b1d      	cmp	r3, #29
 8009780:	d001      	beq.n	8009786 <__sflush_r+0xb2>
 8009782:	2b16      	cmp	r3, #22
 8009784:	d101      	bne.n	800978a <__sflush_r+0xb6>
 8009786:	602f      	str	r7, [r5, #0]
 8009788:	e7b1      	b.n	80096ee <__sflush_r+0x1a>
 800978a:	89a3      	ldrh	r3, [r4, #12]
 800978c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009790:	81a3      	strh	r3, [r4, #12]
 8009792:	e7ad      	b.n	80096f0 <__sflush_r+0x1c>
 8009794:	690f      	ldr	r7, [r1, #16]
 8009796:	2f00      	cmp	r7, #0
 8009798:	d0a9      	beq.n	80096ee <__sflush_r+0x1a>
 800979a:	0793      	lsls	r3, r2, #30
 800979c:	680e      	ldr	r6, [r1, #0]
 800979e:	bf08      	it	eq
 80097a0:	694b      	ldreq	r3, [r1, #20]
 80097a2:	600f      	str	r7, [r1, #0]
 80097a4:	bf18      	it	ne
 80097a6:	2300      	movne	r3, #0
 80097a8:	eba6 0807 	sub.w	r8, r6, r7
 80097ac:	608b      	str	r3, [r1, #8]
 80097ae:	f1b8 0f00 	cmp.w	r8, #0
 80097b2:	dd9c      	ble.n	80096ee <__sflush_r+0x1a>
 80097b4:	6a21      	ldr	r1, [r4, #32]
 80097b6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80097b8:	4643      	mov	r3, r8
 80097ba:	463a      	mov	r2, r7
 80097bc:	4628      	mov	r0, r5
 80097be:	47b0      	blx	r6
 80097c0:	2800      	cmp	r0, #0
 80097c2:	dc06      	bgt.n	80097d2 <__sflush_r+0xfe>
 80097c4:	89a3      	ldrh	r3, [r4, #12]
 80097c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80097ca:	81a3      	strh	r3, [r4, #12]
 80097cc:	f04f 30ff 	mov.w	r0, #4294967295
 80097d0:	e78e      	b.n	80096f0 <__sflush_r+0x1c>
 80097d2:	4407      	add	r7, r0
 80097d4:	eba8 0800 	sub.w	r8, r8, r0
 80097d8:	e7e9      	b.n	80097ae <__sflush_r+0xda>
 80097da:	bf00      	nop
 80097dc:	20400001 	.word	0x20400001

080097e0 <_fflush_r>:
 80097e0:	b538      	push	{r3, r4, r5, lr}
 80097e2:	690b      	ldr	r3, [r1, #16]
 80097e4:	4605      	mov	r5, r0
 80097e6:	460c      	mov	r4, r1
 80097e8:	b913      	cbnz	r3, 80097f0 <_fflush_r+0x10>
 80097ea:	2500      	movs	r5, #0
 80097ec:	4628      	mov	r0, r5
 80097ee:	bd38      	pop	{r3, r4, r5, pc}
 80097f0:	b118      	cbz	r0, 80097fa <_fflush_r+0x1a>
 80097f2:	6983      	ldr	r3, [r0, #24]
 80097f4:	b90b      	cbnz	r3, 80097fa <_fflush_r+0x1a>
 80097f6:	f7fe ff89 	bl	800870c <__sinit>
 80097fa:	4b14      	ldr	r3, [pc, #80]	; (800984c <_fflush_r+0x6c>)
 80097fc:	429c      	cmp	r4, r3
 80097fe:	d11b      	bne.n	8009838 <_fflush_r+0x58>
 8009800:	686c      	ldr	r4, [r5, #4]
 8009802:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009806:	2b00      	cmp	r3, #0
 8009808:	d0ef      	beq.n	80097ea <_fflush_r+0xa>
 800980a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800980c:	07d0      	lsls	r0, r2, #31
 800980e:	d404      	bmi.n	800981a <_fflush_r+0x3a>
 8009810:	0599      	lsls	r1, r3, #22
 8009812:	d402      	bmi.n	800981a <_fflush_r+0x3a>
 8009814:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009816:	f7ff f81c 	bl	8008852 <__retarget_lock_acquire_recursive>
 800981a:	4628      	mov	r0, r5
 800981c:	4621      	mov	r1, r4
 800981e:	f7ff ff59 	bl	80096d4 <__sflush_r>
 8009822:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009824:	07da      	lsls	r2, r3, #31
 8009826:	4605      	mov	r5, r0
 8009828:	d4e0      	bmi.n	80097ec <_fflush_r+0xc>
 800982a:	89a3      	ldrh	r3, [r4, #12]
 800982c:	059b      	lsls	r3, r3, #22
 800982e:	d4dd      	bmi.n	80097ec <_fflush_r+0xc>
 8009830:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009832:	f7ff f80f 	bl	8008854 <__retarget_lock_release_recursive>
 8009836:	e7d9      	b.n	80097ec <_fflush_r+0xc>
 8009838:	4b05      	ldr	r3, [pc, #20]	; (8009850 <_fflush_r+0x70>)
 800983a:	429c      	cmp	r4, r3
 800983c:	d101      	bne.n	8009842 <_fflush_r+0x62>
 800983e:	68ac      	ldr	r4, [r5, #8]
 8009840:	e7df      	b.n	8009802 <_fflush_r+0x22>
 8009842:	4b04      	ldr	r3, [pc, #16]	; (8009854 <_fflush_r+0x74>)
 8009844:	429c      	cmp	r4, r3
 8009846:	bf08      	it	eq
 8009848:	68ec      	ldreq	r4, [r5, #12]
 800984a:	e7da      	b.n	8009802 <_fflush_r+0x22>
 800984c:	08009cb4 	.word	0x08009cb4
 8009850:	08009cd4 	.word	0x08009cd4
 8009854:	08009c94 	.word	0x08009c94

08009858 <fiprintf>:
 8009858:	b40e      	push	{r1, r2, r3}
 800985a:	b503      	push	{r0, r1, lr}
 800985c:	4601      	mov	r1, r0
 800985e:	ab03      	add	r3, sp, #12
 8009860:	4805      	ldr	r0, [pc, #20]	; (8009878 <fiprintf+0x20>)
 8009862:	f853 2b04 	ldr.w	r2, [r3], #4
 8009866:	6800      	ldr	r0, [r0, #0]
 8009868:	9301      	str	r3, [sp, #4]
 800986a:	f7ff fcaf 	bl	80091cc <_vfiprintf_r>
 800986e:	b002      	add	sp, #8
 8009870:	f85d eb04 	ldr.w	lr, [sp], #4
 8009874:	b003      	add	sp, #12
 8009876:	4770      	bx	lr
 8009878:	2000000c 	.word	0x2000000c

0800987c <_lseek_r>:
 800987c:	b538      	push	{r3, r4, r5, lr}
 800987e:	4d07      	ldr	r5, [pc, #28]	; (800989c <_lseek_r+0x20>)
 8009880:	4604      	mov	r4, r0
 8009882:	4608      	mov	r0, r1
 8009884:	4611      	mov	r1, r2
 8009886:	2200      	movs	r2, #0
 8009888:	602a      	str	r2, [r5, #0]
 800988a:	461a      	mov	r2, r3
 800988c:	f7f8 fb4e 	bl	8001f2c <_lseek>
 8009890:	1c43      	adds	r3, r0, #1
 8009892:	d102      	bne.n	800989a <_lseek_r+0x1e>
 8009894:	682b      	ldr	r3, [r5, #0]
 8009896:	b103      	cbz	r3, 800989a <_lseek_r+0x1e>
 8009898:	6023      	str	r3, [r4, #0]
 800989a:	bd38      	pop	{r3, r4, r5, pc}
 800989c:	20000480 	.word	0x20000480

080098a0 <__swhatbuf_r>:
 80098a0:	b570      	push	{r4, r5, r6, lr}
 80098a2:	460e      	mov	r6, r1
 80098a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80098a8:	2900      	cmp	r1, #0
 80098aa:	b096      	sub	sp, #88	; 0x58
 80098ac:	4614      	mov	r4, r2
 80098ae:	461d      	mov	r5, r3
 80098b0:	da08      	bge.n	80098c4 <__swhatbuf_r+0x24>
 80098b2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80098b6:	2200      	movs	r2, #0
 80098b8:	602a      	str	r2, [r5, #0]
 80098ba:	061a      	lsls	r2, r3, #24
 80098bc:	d410      	bmi.n	80098e0 <__swhatbuf_r+0x40>
 80098be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80098c2:	e00e      	b.n	80098e2 <__swhatbuf_r+0x42>
 80098c4:	466a      	mov	r2, sp
 80098c6:	f000 f895 	bl	80099f4 <_fstat_r>
 80098ca:	2800      	cmp	r0, #0
 80098cc:	dbf1      	blt.n	80098b2 <__swhatbuf_r+0x12>
 80098ce:	9a01      	ldr	r2, [sp, #4]
 80098d0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80098d4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80098d8:	425a      	negs	r2, r3
 80098da:	415a      	adcs	r2, r3
 80098dc:	602a      	str	r2, [r5, #0]
 80098de:	e7ee      	b.n	80098be <__swhatbuf_r+0x1e>
 80098e0:	2340      	movs	r3, #64	; 0x40
 80098e2:	2000      	movs	r0, #0
 80098e4:	6023      	str	r3, [r4, #0]
 80098e6:	b016      	add	sp, #88	; 0x58
 80098e8:	bd70      	pop	{r4, r5, r6, pc}
	...

080098ec <__smakebuf_r>:
 80098ec:	898b      	ldrh	r3, [r1, #12]
 80098ee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80098f0:	079d      	lsls	r5, r3, #30
 80098f2:	4606      	mov	r6, r0
 80098f4:	460c      	mov	r4, r1
 80098f6:	d507      	bpl.n	8009908 <__smakebuf_r+0x1c>
 80098f8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80098fc:	6023      	str	r3, [r4, #0]
 80098fe:	6123      	str	r3, [r4, #16]
 8009900:	2301      	movs	r3, #1
 8009902:	6163      	str	r3, [r4, #20]
 8009904:	b002      	add	sp, #8
 8009906:	bd70      	pop	{r4, r5, r6, pc}
 8009908:	ab01      	add	r3, sp, #4
 800990a:	466a      	mov	r2, sp
 800990c:	f7ff ffc8 	bl	80098a0 <__swhatbuf_r>
 8009910:	9900      	ldr	r1, [sp, #0]
 8009912:	4605      	mov	r5, r0
 8009914:	4630      	mov	r0, r6
 8009916:	f7ff fbbb 	bl	8009090 <_malloc_r>
 800991a:	b948      	cbnz	r0, 8009930 <__smakebuf_r+0x44>
 800991c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009920:	059a      	lsls	r2, r3, #22
 8009922:	d4ef      	bmi.n	8009904 <__smakebuf_r+0x18>
 8009924:	f023 0303 	bic.w	r3, r3, #3
 8009928:	f043 0302 	orr.w	r3, r3, #2
 800992c:	81a3      	strh	r3, [r4, #12]
 800992e:	e7e3      	b.n	80098f8 <__smakebuf_r+0xc>
 8009930:	4b0d      	ldr	r3, [pc, #52]	; (8009968 <__smakebuf_r+0x7c>)
 8009932:	62b3      	str	r3, [r6, #40]	; 0x28
 8009934:	89a3      	ldrh	r3, [r4, #12]
 8009936:	6020      	str	r0, [r4, #0]
 8009938:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800993c:	81a3      	strh	r3, [r4, #12]
 800993e:	9b00      	ldr	r3, [sp, #0]
 8009940:	6163      	str	r3, [r4, #20]
 8009942:	9b01      	ldr	r3, [sp, #4]
 8009944:	6120      	str	r0, [r4, #16]
 8009946:	b15b      	cbz	r3, 8009960 <__smakebuf_r+0x74>
 8009948:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800994c:	4630      	mov	r0, r6
 800994e:	f000 f863 	bl	8009a18 <_isatty_r>
 8009952:	b128      	cbz	r0, 8009960 <__smakebuf_r+0x74>
 8009954:	89a3      	ldrh	r3, [r4, #12]
 8009956:	f023 0303 	bic.w	r3, r3, #3
 800995a:	f043 0301 	orr.w	r3, r3, #1
 800995e:	81a3      	strh	r3, [r4, #12]
 8009960:	89a0      	ldrh	r0, [r4, #12]
 8009962:	4305      	orrs	r5, r0
 8009964:	81a5      	strh	r5, [r4, #12]
 8009966:	e7cd      	b.n	8009904 <__smakebuf_r+0x18>
 8009968:	080086a5 	.word	0x080086a5

0800996c <__ascii_mbtowc>:
 800996c:	b082      	sub	sp, #8
 800996e:	b901      	cbnz	r1, 8009972 <__ascii_mbtowc+0x6>
 8009970:	a901      	add	r1, sp, #4
 8009972:	b142      	cbz	r2, 8009986 <__ascii_mbtowc+0x1a>
 8009974:	b14b      	cbz	r3, 800998a <__ascii_mbtowc+0x1e>
 8009976:	7813      	ldrb	r3, [r2, #0]
 8009978:	600b      	str	r3, [r1, #0]
 800997a:	7812      	ldrb	r2, [r2, #0]
 800997c:	1e10      	subs	r0, r2, #0
 800997e:	bf18      	it	ne
 8009980:	2001      	movne	r0, #1
 8009982:	b002      	add	sp, #8
 8009984:	4770      	bx	lr
 8009986:	4610      	mov	r0, r2
 8009988:	e7fb      	b.n	8009982 <__ascii_mbtowc+0x16>
 800998a:	f06f 0001 	mvn.w	r0, #1
 800998e:	e7f8      	b.n	8009982 <__ascii_mbtowc+0x16>

08009990 <__malloc_lock>:
 8009990:	4801      	ldr	r0, [pc, #4]	; (8009998 <__malloc_lock+0x8>)
 8009992:	f7fe bf5e 	b.w	8008852 <__retarget_lock_acquire_recursive>
 8009996:	bf00      	nop
 8009998:	20000474 	.word	0x20000474

0800999c <__malloc_unlock>:
 800999c:	4801      	ldr	r0, [pc, #4]	; (80099a4 <__malloc_unlock+0x8>)
 800999e:	f7fe bf59 	b.w	8008854 <__retarget_lock_release_recursive>
 80099a2:	bf00      	nop
 80099a4:	20000474 	.word	0x20000474

080099a8 <_read_r>:
 80099a8:	b538      	push	{r3, r4, r5, lr}
 80099aa:	4d07      	ldr	r5, [pc, #28]	; (80099c8 <_read_r+0x20>)
 80099ac:	4604      	mov	r4, r0
 80099ae:	4608      	mov	r0, r1
 80099b0:	4611      	mov	r1, r2
 80099b2:	2200      	movs	r2, #0
 80099b4:	602a      	str	r2, [r5, #0]
 80099b6:	461a      	mov	r2, r3
 80099b8:	f7f8 fa74 	bl	8001ea4 <_read>
 80099bc:	1c43      	adds	r3, r0, #1
 80099be:	d102      	bne.n	80099c6 <_read_r+0x1e>
 80099c0:	682b      	ldr	r3, [r5, #0]
 80099c2:	b103      	cbz	r3, 80099c6 <_read_r+0x1e>
 80099c4:	6023      	str	r3, [r4, #0]
 80099c6:	bd38      	pop	{r3, r4, r5, pc}
 80099c8:	20000480 	.word	0x20000480

080099cc <__ascii_wctomb>:
 80099cc:	b149      	cbz	r1, 80099e2 <__ascii_wctomb+0x16>
 80099ce:	2aff      	cmp	r2, #255	; 0xff
 80099d0:	bf85      	ittet	hi
 80099d2:	238a      	movhi	r3, #138	; 0x8a
 80099d4:	6003      	strhi	r3, [r0, #0]
 80099d6:	700a      	strbls	r2, [r1, #0]
 80099d8:	f04f 30ff 	movhi.w	r0, #4294967295
 80099dc:	bf98      	it	ls
 80099de:	2001      	movls	r0, #1
 80099e0:	4770      	bx	lr
 80099e2:	4608      	mov	r0, r1
 80099e4:	4770      	bx	lr

080099e6 <abort>:
 80099e6:	b508      	push	{r3, lr}
 80099e8:	2006      	movs	r0, #6
 80099ea:	f000 f84d 	bl	8009a88 <raise>
 80099ee:	2001      	movs	r0, #1
 80099f0:	f7f8 fa4e 	bl	8001e90 <_exit>

080099f4 <_fstat_r>:
 80099f4:	b538      	push	{r3, r4, r5, lr}
 80099f6:	4d07      	ldr	r5, [pc, #28]	; (8009a14 <_fstat_r+0x20>)
 80099f8:	2300      	movs	r3, #0
 80099fa:	4604      	mov	r4, r0
 80099fc:	4608      	mov	r0, r1
 80099fe:	4611      	mov	r1, r2
 8009a00:	602b      	str	r3, [r5, #0]
 8009a02:	f7f8 fa78 	bl	8001ef6 <_fstat>
 8009a06:	1c43      	adds	r3, r0, #1
 8009a08:	d102      	bne.n	8009a10 <_fstat_r+0x1c>
 8009a0a:	682b      	ldr	r3, [r5, #0]
 8009a0c:	b103      	cbz	r3, 8009a10 <_fstat_r+0x1c>
 8009a0e:	6023      	str	r3, [r4, #0]
 8009a10:	bd38      	pop	{r3, r4, r5, pc}
 8009a12:	bf00      	nop
 8009a14:	20000480 	.word	0x20000480

08009a18 <_isatty_r>:
 8009a18:	b538      	push	{r3, r4, r5, lr}
 8009a1a:	4d06      	ldr	r5, [pc, #24]	; (8009a34 <_isatty_r+0x1c>)
 8009a1c:	2300      	movs	r3, #0
 8009a1e:	4604      	mov	r4, r0
 8009a20:	4608      	mov	r0, r1
 8009a22:	602b      	str	r3, [r5, #0]
 8009a24:	f7f8 fa77 	bl	8001f16 <_isatty>
 8009a28:	1c43      	adds	r3, r0, #1
 8009a2a:	d102      	bne.n	8009a32 <_isatty_r+0x1a>
 8009a2c:	682b      	ldr	r3, [r5, #0]
 8009a2e:	b103      	cbz	r3, 8009a32 <_isatty_r+0x1a>
 8009a30:	6023      	str	r3, [r4, #0]
 8009a32:	bd38      	pop	{r3, r4, r5, pc}
 8009a34:	20000480 	.word	0x20000480

08009a38 <_raise_r>:
 8009a38:	291f      	cmp	r1, #31
 8009a3a:	b538      	push	{r3, r4, r5, lr}
 8009a3c:	4604      	mov	r4, r0
 8009a3e:	460d      	mov	r5, r1
 8009a40:	d904      	bls.n	8009a4c <_raise_r+0x14>
 8009a42:	2316      	movs	r3, #22
 8009a44:	6003      	str	r3, [r0, #0]
 8009a46:	f04f 30ff 	mov.w	r0, #4294967295
 8009a4a:	bd38      	pop	{r3, r4, r5, pc}
 8009a4c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009a4e:	b112      	cbz	r2, 8009a56 <_raise_r+0x1e>
 8009a50:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009a54:	b94b      	cbnz	r3, 8009a6a <_raise_r+0x32>
 8009a56:	4620      	mov	r0, r4
 8009a58:	f000 f830 	bl	8009abc <_getpid_r>
 8009a5c:	462a      	mov	r2, r5
 8009a5e:	4601      	mov	r1, r0
 8009a60:	4620      	mov	r0, r4
 8009a62:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009a66:	f000 b817 	b.w	8009a98 <_kill_r>
 8009a6a:	2b01      	cmp	r3, #1
 8009a6c:	d00a      	beq.n	8009a84 <_raise_r+0x4c>
 8009a6e:	1c59      	adds	r1, r3, #1
 8009a70:	d103      	bne.n	8009a7a <_raise_r+0x42>
 8009a72:	2316      	movs	r3, #22
 8009a74:	6003      	str	r3, [r0, #0]
 8009a76:	2001      	movs	r0, #1
 8009a78:	e7e7      	b.n	8009a4a <_raise_r+0x12>
 8009a7a:	2400      	movs	r4, #0
 8009a7c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009a80:	4628      	mov	r0, r5
 8009a82:	4798      	blx	r3
 8009a84:	2000      	movs	r0, #0
 8009a86:	e7e0      	b.n	8009a4a <_raise_r+0x12>

08009a88 <raise>:
 8009a88:	4b02      	ldr	r3, [pc, #8]	; (8009a94 <raise+0xc>)
 8009a8a:	4601      	mov	r1, r0
 8009a8c:	6818      	ldr	r0, [r3, #0]
 8009a8e:	f7ff bfd3 	b.w	8009a38 <_raise_r>
 8009a92:	bf00      	nop
 8009a94:	2000000c 	.word	0x2000000c

08009a98 <_kill_r>:
 8009a98:	b538      	push	{r3, r4, r5, lr}
 8009a9a:	4d07      	ldr	r5, [pc, #28]	; (8009ab8 <_kill_r+0x20>)
 8009a9c:	2300      	movs	r3, #0
 8009a9e:	4604      	mov	r4, r0
 8009aa0:	4608      	mov	r0, r1
 8009aa2:	4611      	mov	r1, r2
 8009aa4:	602b      	str	r3, [r5, #0]
 8009aa6:	f7f8 f9e3 	bl	8001e70 <_kill>
 8009aaa:	1c43      	adds	r3, r0, #1
 8009aac:	d102      	bne.n	8009ab4 <_kill_r+0x1c>
 8009aae:	682b      	ldr	r3, [r5, #0]
 8009ab0:	b103      	cbz	r3, 8009ab4 <_kill_r+0x1c>
 8009ab2:	6023      	str	r3, [r4, #0]
 8009ab4:	bd38      	pop	{r3, r4, r5, pc}
 8009ab6:	bf00      	nop
 8009ab8:	20000480 	.word	0x20000480

08009abc <_getpid_r>:
 8009abc:	f7f8 b9d0 	b.w	8001e60 <_getpid>

08009ac0 <_init>:
 8009ac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ac2:	bf00      	nop
 8009ac4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ac6:	bc08      	pop	{r3}
 8009ac8:	469e      	mov	lr, r3
 8009aca:	4770      	bx	lr

08009acc <_fini>:
 8009acc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ace:	bf00      	nop
 8009ad0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ad2:	bc08      	pop	{r3}
 8009ad4:	469e      	mov	lr, r3
 8009ad6:	4770      	bx	lr
